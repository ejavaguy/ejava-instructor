<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="esport-project3-tech">
    <title>Project 3 Technical Details</title>

    <section id="esport-project3-tech-impl">
        <title>Data Tier, Business Logic, and EJB/WAR Support</title>
        <para>
            Provide all functionality from Projects 1 and 2.
        </para>
    </section>

    <section id="esport-project3-tech-leagueaccess">
        <title>eLeague Access Restrictions</title>
        <para>
            Enhance eLeague with access restrictions.
        </para>
        <orderedlist spacing="compact">
            <listitem><para>
                Assign the EJBs and WARs to the "other" security domain
                </para>
                </listitem>
            <listitem><para>
                Restrict access to WEB URIs in WARS
                </para>

                <orderedlist spacing="compact">
                    <listitem><para>
                        All API calls must allow authentication.
                        </para></listitem>
                    <listitem><para>
                        Use BASIC login-config for API calls.
                        </para></listitem>
                    <listitem><para>
                        Use of CONFIDENTIAL (HTTPS) is not required for this project
                        but can be easily added if you have time.
                        </para></listitem>
                </orderedlist>
                </listitem>

            <listitem><para>
                Restrict access to the EJB methods to appropriate read/write roles
                using declarative security.
                </para>
                <orderedlist spacing="compact">
                    <listitem><para>
                        Administrators may run the test utility functions like reset() and populate().
                        </para></listitem>
                    <listitem><para>
                        League Coordinators may create clubs, seasons, and divisions as well as schedule contests.
                        They may also perform duties normally performed by club and division coordinators -- like report scores.
                        </para></listitem>
                    <listitem><para>
                        Club Coordinators may create venues, teams, and assign teams to divisions 
                        </para></listitem>
                    <listitem><para>
                        Division coordinators may report scores
                        </para></listitem>
                </orderedlist>
                </listitem>
            <listitem><para>
                Perform additional programmatic security checks to verify 
                the right user is accessing the appropriate information.
                </para>
                <orderedlist spacing="compact">
                    <listitem><para>
                        Club coordinators may only manage teams and venues
                        associated with their club.
                        </para></listitem>
                    <listitem><para>
                        Division coordinators may only report scores for contests 
                        in their assigned division. Note that the League Coordinator
                        should be able to report a score for any division.
                        </para></listitem>
                    <listitem><para>
                        League coordinators may report scores for any division without
                        being the coordinator for that division.
                        </para></listitem>
                </orderedlist>
                </listitem>
            <listitem><para>
                Allow any user to perform read operations.
                </para>
                </listitem>
            <listitem><para>
                Use Run-As to assign application code a role sufficient to 
                complete its required actions when there is no calling client
                identity.
                </para>
                </listitem>
        </orderedlist>
    </section>

    <section id="esport-project3-tech-clubaccess">
        <title>eClub Access Restrictions</title>
        <para>
            Enhance eClub with access restrictions.
        </para>
        <orderedlist spacing="compact">
            <listitem><para>
                Assign the EJB and WARS to the "other" security domain.
                </para>
                </listitem>
            <listitem><para>
                Restrict access to the EJB read/write methods to appropriate roles
                using declarative security.
                </para>
                <orderedlist spacing="compact">
                    <listitem><para>
                        Administrators may run the test utility functions like reset().
                        </para>
                        </listitem>
                    <listitem><para>
                        Organization coordinators may create teams and members/roles. They 
                        can also assign players, coaches, and managers to teams.
                        </para>
                        </listitem>
                    <listitem><para>
                        Members may update contact information and 
                        obtain roster information.
                        </para>
                        </listitem>
                </orderedlist>
                </listitem>
            <listitem><para>
                Perform additional programmatic security checks to verify 
                the right user is accessing the appropriate information.
                </para>
                <orderedlist spacing="compact">
                    <listitem><para>
                        Members are accessing rosters for teams they are
                        associated with.
                        </para>
                        </listitem>
                </orderedlist>
                </listitem>
            <listitem><para>
                Use Run-As to assign application code a role sufficient to 
                complete its required actions when there is no calling client
                identity.
                </para>
                </listitem>
        </orderedlist>
    </section>


    <section id="esport-project3-tech-client">
        <title>Remote Client Authentication</title>
        <para>
            Extend your existing client code to optionally accept credentials.
            No credentials provided should invoke a remote method/URI as an 
            anonymous user. Credentials provided should invoke a remote 
            method/URI using the identity associated with the credentials.
        </para>
        <orderedlist spacing="compact">
            <listitem><para>
                For RMI -- dynamically add security principal and credential 
                properties to your runtime JNDI lookup.
                </para></listitem>
            <listitem><para>
                For JAX-RS -- dynamically add a "Basic" Authentication header 
                (ideally using a JAX-RS ClientRequestFilter) to each HTTP(S) request.
                </para></listitem>
        </orderedlist>
    </section>

    <section id="esport-project3-tech-remotetest">
        <title>Remote Test Authentication</title>
        <para>
            Extend your existing remote Test project to address new authentication requirements.
        </para>
        <orderedlist spacing="compact">
            <listitem><para>
                Add a valid login to your existing tests to re-enable them under
                the newly secure environment.
                </para>
                </listitem>
            <listitem><para>
                Add a new unit test case that verifies the access controls of the
                protected and open methods. This means that -- after fixing access
                issues in the previous bullet -- you purposely attempt to violate
                access restrictions from a new JUnit test to show a test of 
                access control.
                </para>
                <para>
                Please see the 
                <link linkend="esport-project3-grading">grading criteria</link> 
                to identify specific scenarios your JUnit tests should address in this area.
                </para>
                </listitem>
        </orderedlist>
    </section>

    <section id="esport-project3-tech-webui">
        <title>eLeague Web-UI Access Restrictions</title>
        <para>
            Enhance Web-UIs with authentication and access restrictions for any 
            use case you implement requiring access control. Note that your selected
            use case may not require an authenticated user -- which would render
            this section not relevant.
        </para>
        <orderedlist spacing="compact">
            <listitem><para>
                Assign the WAR to the "other" security-domain.
                </para>
                </listitem>
            <listitem><para>
                Restrict access beyond the main page to users with
                the appropriate roles. You may use FORM or BASIC authentication.
                </para>
                </listitem>
            <listitem><para>
                Permit only users to only ask the EJB tier for
                information that is associated with their login. For example,
                a Club Coordinator should not have to tell the Web UI what
                club they are managing. It should be derived from their identity
                and information in the database.
                </para>
                </listitem>
        </orderedlist>

        <note>
          <title>BASIC does not support logout/login well</title>
          <para>
            Co-hosting the Web-UI and API in the same WAR will restrict you
            to using the same authentication mechanism for both. Since we 
            are suggesting use of BASIC for API calls -- we would use BASIC
            for the Web-UI as well. That functionally works except the use of BASIC and the 
            way the HTTP protocol and browsers work -- it makes it hard to 
            logout to change identity. Keeping the project within scope --
            this may limit the number of steps you implement with Web-UI
            for the end-to-end scenario.
          </para>
        </note>
    </section>

    <section id="esport-project3-tech-interceptors">
        <title>Interceptors and Validators</title>
        <para>
            Implement a "thin slice" of capability to demonstrate JavaEE interceptors
            using validation.
        </para>
        <orderedlist spacing="compact">
            <listitem><para>
                Define javax.validation constraints on at least one of your DTOs.
                </para>
                </listitem>
            <listitem><para>
                Implement a JavaEE interceptor that gets a Validator injected,
                intercepts all calls of your EJBs, and runs the validator against
                each parameter input to the EJB method.
                </para>
                </listitem>
            <listitem><para>
                The interceptor can have no knowledge of the specific EJB, method, or 
                parameters it is intercepting and validating.
                </para>
                </listitem>
            <listitem><para>
                The EJB can have no knowledge of the interceptor and should do no
                work to validate the DTO itself.
                </para>
                </listitem>
        </orderedlist>
    </section>

    <section id="esport-project3-tech-jms">
        <title>eSport JMS</title>
        <para>
          In this portion of the project we are going to send and receive
          a JMS message using publish/subscribe JMS techniques.
        </para>
        <figure>
            <title>eSport Async</title>
            <graphic scalefit="1" fileref="images/esport-async.jpg"/>
        </figure>

        <section id="esport-project3-tech-async-publish">
            <title>eLeague JMS Publisher</title>
            <para>
              Extend your eLeague EJB implementation to publish JMS messages whenever
              a Contest is scheduled, changes (e.g., scores posted), or for whatever
              reason the application has for notifying subscribers. 
              You may want to place an artificial limit on 
              the number of messages sent to help keep from being unnecessarily
              overwhelmed in the development environment. 
              You can decide on any thresholds used.
            </para>
            <orderedlist spacing="compact">
                <listitem><para>
                    Use the esport-eleague-contests topic 
                    (JNDI names: java:/topic/ejava/projects/esport/eleague-contests and
                    java:jboss/exported/topic/ejava/projects/esport/eleague-contests)
                    </para>
                    </listitem>
                <listitem><para>
                    Design your JMS Message to carry a portable payload. 
                    You can use any JMS Type you wish. However, know that subscribers 
                    will not likely have your implementation JARs with Entity classes.
                    Use of DTO classes works well here.
                    </para>
                    </listitem>
                <listitem><para>
                    Design your JMS Message to be filterable using a JMS selector. 
                    You can use any properties you wish.  However, know that some subscribers will
                    be filtering on such things as the impacted club, team, or type of event.
                    </para>
                    </listitem>
                <listitem><para>
                    Have your eLeague EJBs publish JMS Messages to the topic when
                    a Contest changes state (created, canceled, completed).
                    </para>
                    </listitem>
            </orderedlist>

            <note>
              <para>
                This means that there are several reasons for a Contest to be sent
                and that reason should be a filterable part of the overall message
                properties using a JMS selector.
              </para>
            </note>
        </section>

        <section id="esport-project3-tech-async-subscribe">
            <title>eClub MDB Subscriber</title>
            <para>
                Implement a Message Driven Bean within eClub to subscribe to 
                contests that are new, rescheduled, or reminders; but not completed 
                (i.e. it should have a selector that causes the MDB to not be told about
                scores being reported) that invole the specific club.
                [Note:] The ability to reschedule a contest was not part of 
                the functional requirements and need not be implemented at this time.
                Just account for the future event and the relevance to the club in your selector.
            </para>
            <orderedlist spacing="compact">
                <listitem><para>
                    Use a JMS Selector for the MDB to limit the types of messages consumed.
                    </para>
                    </listitem>
                <listitem><para>
                    Obtain the e-mail address for each individual associated with
                    the team effected by the event. Print a textual message and the
                    address list to the server log. 
                    </para>
                    <para>
                    You do not have to physically send an e-mail as a part of this assignment.
                    The key point of this requirement is for your MDB to be able to 
                    succesfully access a protected EJB method without a calling client 
                    context present.
                    </para>
                    </listitem>
            </orderedlist>
        </section>

    </section>


    <section id="esport-project3-tech-leaguetimer">
        <title>eLeague EJBTimer</title>
        <para>
            Implement an EJB Timer that will allow eLeague to automatically
            wake-up and send out schedule reminders for contests that have not yet
            finished. Depending on the provided test data, you might want to limit
            the number of reminders sent. The main goal of this requirement is
            that you make use of an EJBTimer and that you trigger the 
            JMS filtered MDB logic in eClub.
        </para>
        <para>
            Your timer can be declarative or programmatic. However, the programmatic 
            approach is recommended so that -- with a remote interface -- your 
            IT integration test can have control over when the events should start
            and end.
        </para>
    </section>
</chapter>
  
