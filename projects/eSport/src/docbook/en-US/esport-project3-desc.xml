<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="esport-project3-desc">
    <title>eMarket Project 3 Description</title>
    <subtitle>Secure and Asynchronous N-Tier Application</subtitle>

    <section id="esport-project3-purpose">
        <title>Purpose</title>

        <section id="esport-project3-goals">
            <title>Goals</title>
            <itemizedlist spacing="compact">
                <listitem><para>
                    Secure access to EJB and Web applications
                    </para> </listitem>
                <listitem><para>
                    Decouple business logic from common tasks 
                    </para> </listitem>
                <listitem><para>
                    Provide for asynchronous processing.
                    </para> </listitem>
            </itemizedlist>
            <para></para>
        </section>

        <section id="esport-project3-objectives">
            <title>Objectives</title>
            <itemizedlist spacing="compact">
                <listitem><para>
                    Re-use the eSales and eBidbot implementations from projects 1 and 2.
                    </para></listitem>
                <listitem><para>
                    Define access controls and implement authentication mechanisms for 
                    applications.
                    </para></listitem>
                <listitem><para>
                    Implement DTO validation using interceptors
                    </para></listitem>
                <listitem><para>
                    Implement a publish/subscribe capability between the eBidbot
                    and stand-alone client applications.
                    </para></listitem>
                <listitem><para>
                    Trigger certain behaviors based on timers.
                    </para></listitem>
            </itemizedlist>
            <para></para>
        </section>
    </section>

    <section id="esport-project3-techoverview">
        <title>Technical Overview</title>

        <para>
            The project will build on the core implementation from Projects 1 and
            2. We will mostly extend existing projects with security and
            asynchronous logic. 
        </para>

        <para>
            Java EE defines authentication and authorization to be independent
            of the overall API and capability. JBoss and other application
            servers provide simple, default mechanisms that are easy to
            demonstrate and more sophisticated mechanisms that are realistic for
            deployments that require no change to the JavaEE-compliant application code.  
            We will use the simple, default/"other" security-domain defined
            within the standard JBoss installation. This uses the RealmUsersRoles
            login-module -- which is powered by two property files supplied and
            pre-populated by the class server files from ejava-wildfly901.
        </para>


        <table>
            <title>User Credential Files</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='0'>
            <colspec colname="file"/>
            <colspec colname="desc"/>
            <thead>
                <row>
                  <entry>File</entry>
                  <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row rowsep="1">
                   <entry namest="file">
                        ${jboss.server.config.dir}/application-users.properties
                        </entry>
                   <entry namest="desc">
                        defines username=password lines that list the login username and hashed password
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="file">
                        ${jboss.server.config.dir}/application-roles.properties
                        </entry>
                   <entry namest="desc">
                        defines username=role1,role2 lines that list the login username and assigned roles
                        </entry>
                </row>
            </tbody>
            </tgroup>
        </table>    

        <para>
            We are going to have a couple types of users. Some of the users will
            have zero, one, or more of these roles. Because of the static nature of
            our authentication, all users will have a login configured before
            the application is even deployed to the server.
        </para>

        <table>
            <title>Application Roles</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='0'>
            <colspec colname="role"/>
            <colspec colname="desc"/>
            <thead>
                <row>
                  <entry>Role</entry>
                  <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row rowsep="1">
                   <entry namest="role">anonymous</entry>
                   <entry namest="desc">
                        these users can view auctions and create an account
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">esales-admin</entry>
                   <entry namest="desc">
                        these users can reset and populate the eSales database
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">esales-user</entry>
                   <entry namest="desc">
                        these users can create and auction, and bid on auctions. 
                        This role is also required to subscribe to JMS auction events.
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">esales-sys</entry>
                   <entry namest="desc">
                        role required to perform internal auction actions like JMS publishing
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">esales-trusted</entry>
                   <entry namest="desc">
                        these users can bid on auctions on behalf of a specified user
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">ebidbot-admin</entry>
                   <entry namest="desc">
                        these users will be able to perform management and test functions on eBidbot
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">ebidbot-user</entry>
                   <entry namest="desc">
                        these users can and manage their orders
                        </entry>
                </row>
            </tbody>
            </tgroup>
        </table>    

        <para>
            If a user has a login for one application, they will use the same
            account to access the other application (e.g., user3 might have
            both esales-user and ebidbot-user roles).
        </para>

        <table>
            <title>User Roles</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='0'>
            <colspec colname="user"/>
            <colspec colname="roles"/>
            <thead>
                <row>
                  <entry>User</entry>
                  <entry>Roles</entry>
                </row>
            </thead>
            <tbody>
                <row rowsep="1">
                   <entry namest="user">known</entry>
                   <entry namest="roles">(no roles)</entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">admin1</entry>
                   <entry namest="roles">esales-admin</entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">admin2</entry>
                   <entry namest="roles">ebidbot-admin</entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">syssales1</entry>
                   <entry namest="roles">esales-sys</entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">sysbidbot1</entry>
                   <entry namest="roles">esales-trusted</entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">user1</entry>
                   <entry namest="roles">esales-user</entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">user2</entry>
                   <entry namest="roles">esales-user</entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">user3</entry>
                   <entry namest="roles">esales-user,bidbot-user</entry>
                </row>
            </tbody>
            </tgroup>
        </table>    

        <note>
            <para>
            To clarify, your application will have a static set of
            logins and will ingest a set of accounts. A user with a
            login and no account can login, but won't be able to do
            anything meaningful. A user with an account and no login
            won't be able to access the system. Normally the login would
            be created at the same time as the account. Except for your
            JBoss configuration and your "Create Account" logic, no other
            part of your project should be aware of this tradeoff made
            for class project simplicity.
            </para>
        </note>

        <para>
            Some actions are open to any users; authenticated or not.
            Authentication will be performed using a JNDI login.  All users
            will have a password of "password1!".
        </para>

        <para>
            eBidbot will run-as an esales-trusted user and pass the userId 
            for the eSales bidder with the placed bid.
        </para>

        <para>
            For some asynchronous activity, we will implement an Auction
            Topic with eSales that will be used to provide updates to auction
            information. eBidbot will listen to this topic using a Message
            Driven Bean to keep orders up to date and to specifically know
            when they are closed. A stand-alone client will also be used to
            subscribe to auction events. The topic(s) will be pre-defined
            in your application server along with users and roles. However,
            you will have to design the type, structure, and payload of the
            messages on the topic(s).
        </para>

        <para>
            eSales and eBidbot will use EJB Timers to help perform
            periodic business logic, like checking for completed auctions
            or making bids.
        </para>
            
    </section>
</chapter>
  
