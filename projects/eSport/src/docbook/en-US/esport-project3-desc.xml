<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="esport-project3-desc">
    <title>eSport Project 3 Description</title>
    <subtitle>Secure and Asynchronous N-Tier Application</subtitle>

    <section id="esport-project3-purpose">
        <title>Purpose</title>

        <section id="esport-project3-goals">
            <title>Goals</title>
            <itemizedlist spacing="compact">
                <listitem><para>
                    Secure access to EJB and Web applications
                    </para> </listitem>
                <listitem><para>
                    Decouple business logic from common tasks 
                    </para> </listitem>
                <listitem><para>
                    Provide for asynchronous processing.
                    </para> </listitem>
            </itemizedlist>
            <para></para>
        </section>

        <section id="esport-project3-objectives">
            <title>Objectives</title>
            <itemizedlist spacing="compact">
                <listitem><para>
                    Re-use the eLeague and eClub implementations from projects 1 and 2.
                    </para></listitem>
                <listitem><para>
                    Implement authentication and access restrictions for EJB methods 
                    and WEB URIs thru declarative and programmatic APIs.
                    </para></listitem>
                <listitem><para>
                    Implement authentication for RMI and HTTP(s) clients.
                    </para></listitem>
                <listitem><para>
                    Implement DTO validation using interceptors.
                    </para></listitem>
                <listitem><para>
                    Implement a filterable, publish/subscribe capability with portable
                    payloads between applications.
                    </para></listitem>
                <listitem><para>
                    Schedule and invoke certain behavior based on an EJB timer.
                    </para></listitem>
            </itemizedlist>
            <para></para>
        </section>
    </section>

    <section id="esport-project3-techoverview">
        <title>Technical Overview</title>

        <para>
            The project will build on the core implementation from Projects 1 and
            2. We will mostly extend existing projects with security and
            asynchronous logic. 
        </para>

        <para>
            JavaEE defines authentication and authorization to be independent
            of the overall API and capability. JBoss and other application
            servers provide default mechanisms behind the scenes to implement 
            these features -- that can make it simple and easy to demonstrate. 
            A switch to more realistic and sophisticated mechanisms should
            require no change to JavaEE-compliant application code.  
            We will use the simple, default "other" security-domain defined
            within the standard JBoss installation. This uses the RealmUsersRoles
            login-module -- which is powered by two property files supplied and
            pre-populated by the course server files from ejava-wildfly(version)
            in your course examples source tree. You unzipped this file into
            your application server configuration as part of course setup
            and it would be wise to repeat that to make sure your server configuration
            is up to date with any changes added since then.
        </para>

        <table>
            <title>User Credential Files</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='0'>
            <colspec colname="file"/>
            <colspec colname="desc"/>
            <thead>
                <row>
                  <entry>File</entry>
                  <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row rowsep="1">
                   <entry namest="file">
                        ${jboss.server.config.dir}/application-users.properties
                        </entry>
                   <entry namest="desc">
                        defines username=password lines that list the login username and hashed password
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="file">
                        ${jboss.server.config.dir}/application-roles.properties
                        </entry>
                   <entry namest="desc">
                        defines username=role1,role2 lines that list the login username and assigned roles
                        </entry>
                </row>
            </tbody>
            </tgroup>
        </table>    

        <note>
          <title>jboss.server.config.dir</title>
          <para>
            ${jboss.server.config.dir} is a reference to an internal JBoss variable that references
            the "standalone/configuration" directory.
<programlisting language=""><![CDATA[
$ ls standalone/configuration/application*.properties
standalone/configuration/application-roles.properties    
standalone/configuration/application-users.properties
]]></programlisting>                        
          </para>
        </note>

        <para>
            We are going to have several types of user roles. Some of the users will
            have zero, one, or more of these roles. Because of the static nature of
            our demonstration authentication solution, all users will have a login 
            configured before the application is even deployed to the server.
        </para>

        <table>
            <title>Application Roles</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='0'>
            <colspec colname="role"/>
            <colspec colname="desc"/>
            <thead>
                <row>
                  <entry>Role</entry>
                  <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row rowsep="1">
                   <entry namest="role">(anonymous)</entry>
                   <entry namest="desc">
                        These users can view standings and schedules in league
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eleague-sys</entry>
                   <entry namest="desc">
                        Authorized to publish to eLeague topic
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eleague-user</entry>
                   <entry namest="desc">
                        Authorized to subscribe to eLeague topic
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eleague-admin</entry>
                   <entry namest="desc">
                        Authorized to reset and populate the database
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eleague-coord</entry>
                   <entry namest="desc">
                        Authorized to create season, divisions, clubs, 
                        and schedule contests.
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eleague-clubcoord</entry>
                   <entry namest="desc">
                        Authorized to create teams, provide contacts for the teams, 
                        and assign them to divisions.
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eleague-divcoord</entry>
                   <entry namest="desc">
                        Authorized to report scores.
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eclub-admin</entry>
                   <entry namest="desc">
                        Authorized to run ClubTestUtil operations.
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eclub-member</entry>
                   <entry namest="desc">
                        Authorized to obtain team rosters and
                        update contact and role information.
                        </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eclub-coord</entry>
                   <entry namest="desc">
                        Authorized to create teams and assign players, 
                        coaches, and managers.
                        </entry>
                </row>
            </tbody>
            </tgroup>
        </table>    

        <para>
            If a user has a login for one application, they will use the same
            account to access the other application 
            (e.g., user2 has both eleague-clubcoord and eclub-coord roles).
        </para>
        <para>
            The "sys" accounts are meant to be used by the application code
            when actions taken require an authenticated user but there is 
            no caller context (e.g., async callbacks) or the identity of the 
            incoming caller is not appropriate for the outgoing call being 
            triggered (e.g., elevated permission access).
        </para>

        <table>
            <title>User Roles</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='0'>
            <colspec colname="user"/>
            <colspec colname="roles"/>
            <thead>
                <row>
                  <entry>User Login</entry>
                  <entry>Roles</entry>
                </row>
            </thead>
            <tbody>
                <row rowsep="1">
                   <entry namest="user">known</entry>
                   <entry namest="roles">
                   (no roles)
                   </entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">eleaguesys1</entry>
                   <entry namest="roles">
                    eleague-sys
                   </entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">eclubsys1</entry>
                   <entry namest="roles">
                    eleague-user
                   </entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">admin1</entry>
                   <entry namest="roles">
                    eleague-admin,eclub-admin
                   </entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">lmtucker</entry>
                   <entry namest="roles">
                    eleague-coord
                   </entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">user2</entry>
                   <entry namest="roles">
                    eleague-clubcoord,eclub-coord,eclub-member
                   </entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">user3</entry>
                   <entry namest="roles">
                    eclub-member
                   </entry>
                </row>
                <row rowsep="1">
                   <entry namest="user">jtflynn</entry>
                   <entry namest="roles">
                    eleague-divcoord
                   </entry>
                </row>
            </tbody>
            </tgroup>
        </table>    

        <para>
        Based on the test data, the following are some other logins that may 
        be useful. They have been added to your users and roles property
        files and are referencs either in the ingested XML file or part of 
        the end-to-end demonstration steps.
        </para>

        <table>
            <title>Other Users/Roles</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='0'>
            <colspec colname="roles"/>
            <colspec colname="users"/>
            <thead>
                <row>
                  <entry>Role</entry>
                  <entry>Users</entry>
                </row>
            </thead>
            <tbody>
                <row rowsep="1">
                   <entry namest="role">eleague-clubcoord</entry>
                   <entry namest="users">
                    tbswanson,
                    kdromero,
                    sthart,
                    lmfuller,
                    rgrobbins,
                    gchamilton,
                    avschultz,
                    jcbell,
                    user4
                   </entry>
                </row>
                <row rowsep="1">
                   <entry namest="role">eleague-divcoord</entry>
                   <entry namest="users">
                    jddavidson,
                    whlee,
                    pjjimenez,
                    ksharrison,
                    acrussell,
                    ckriley5687
                   </entry>
                </row>
            </tbody>
            </tgroup>
        </table>    

        <note>
            <para>
            To clarify, your application will have a static set of
            logins and will dynamically ingest a set of Contacts at scenario
            startup. More Contacts and Members will be added during the
            scenario.  A user with a login and no Contact/Member info
            within the database can login, but won't be able to do
            anything meaningful to them personally. A user with a Contact/Member 
            defined and no login won't be able to access the protected 
            areas of the system. 
            Normally the login would be created at the same time the 
            Contact/Member is added.  Except for your
            JBoss configuration and your add user logic, no other
            part of your project should be aware of this tradeoff made
            for class project simplicity.
            </para>
        </note>

        <para>
            Some actions are open to any users; authenticated or not.
            Authentication will be performed using a JNDI login for RMI, 
            BASIC for HTTP web services, and FORM for Web UIs.
            All users will have a password of "password1!".
        </para>

        <para>
          We will optionally (for the assignment) use HTTPS to provide 
          confidentiality between our client and server for communications.  
          The server has a keystore for identity. The JUnit tests 
          can conveniently use that as a trustStore through the base path
          defined by the "jboss.home" property.
        </para>

<programlisting language="xml"><![CDATA[# build/dependencies/pom.xml

<java.truststore>${jboss.home}/standalone/configuration/application.keystore</java.truststore>
...
<plugin>
    <artifactId>maven-failsafe-plugin</artifactId>
    <configuration>
        <systemPropertyVariables>
            <javax.net.ssl.trustStore>${java.truststore}</javax.net.ssl.trustStore>
]]></programlisting>

        <table>
            <title>HTTPS Keystore(s)</title>
            <tgroup cols='2' align='left' colsep='1' rowsep='0'>
            <colspec colname="file"/>
            <colspec colname="desc"/>
            <thead>
                <row>
                  <entry>File</entry>
                  <entry>Description</entry>
                </row>
            </thead>
            <tbody>
                <row rowsep="1">
                   <entry namest="file">
                        ${jboss.server.config.dir}/application.keystore
                        </entry>
                   <entry namest="desc">
                        Self-signed JKS keystore with server certificate. 
                        Also also used as client trustStore during testing.
                        </entry>
                </row>
            </tbody>
            </tgroup>
        </table>    

        <note>
          <title>jboss.home</title>
          <para>
            jboss.home is a property you should define in your "$HOME/.m2/settings.xml"
            file and have it reference your installation directory for JBoss/Wildfly.
          </para>
<programlisting language="xml"><![CDATA[
# .m2/settings.xml

    <profiles>
        <profile>
            <id>wildfly13</id>
            <properties>
                <jboss.home>.../apps/wildfly-13.0.0.Final</jboss.home>
            </properties>
        </profile>
    ...
    <activeProfiles>
      <activeProfile>wildfly13</activeProfile>
      <activeProfile>h2db</activeProfile>
    </activeProfiles>
]]></programlisting>
        </note>

        <tip>
          <title>SSL and/or HTTPS is not a assignment requirement</title>
          <para>
            Although essential in securing communications, SSL and/or HTTPS is
            not a requirement for implmenting this assignment. The instructions
            above are provided for students wishing to satisfy a key but 
            not very noticeable portion of a secure interface.
          </para>
        </tip>


        <para>
            For asynchronous activity, we will implement a Schedule JMS Topic where 
            eLeague will publish messages related to team schedules. 
            eClub will subscribe to the topic using a Message Driven 
            Bean (MDB) to keep members up to date on schedule changes.
            The JMS topic has already been added to your JMS Server within
            JBoss and has been assigned both an internal and external JNDI name. 
            You will have to design the message type, message properties,
            and payload of the messages sent on that topic in order that the
            message carries a partable payload and can be filtered for 
            subscriber-specific criteria via a JMS selector.
            Your DTOs already express a portable expression of data.
            Each club will only want to process messages for their teams
            and only events that impact upcoming schedules (i.e., not
            scores of completed Contests).
        </para>

<programlisting language="xml"><![CDATA[<jms-topic name="esport-eleague-contests" 
     entries="java:/topic/ejava/projects/esport/eleague-contests 
              java:jboss/exported/topic/ejava/projects/esport/eleague-contests"/>
]]></programlisting>

        <para>
          eLeague will use EJB Timers to send out schedule reminders
          for upcoming Contests.
        </para>
            
    </section>
</chapter>
