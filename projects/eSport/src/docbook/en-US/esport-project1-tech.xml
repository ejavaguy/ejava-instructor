<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="esport-project1-tech">
    <title>Project 1 Technical Details</title>
    <note>
        There are a lot of technical details presented with this 
        specification. This is done to provide clarity and a starting point for
        design discussion. However, it is not done so to specify specific class
        or method naming, project layout, or order of work. You are free to
        make many technical adjustments to the ideas presented. Implementation
        of the end-to-end scenario is the primary requirement.
    </note>
    <tip>
      <para>
        This project provides an obvious opportunity to use compound
        business primary keys and the documentation below depicts some
        of the ramifications in doing so. Synthetic, single value
        primary keys are permitted in your solution without penalty.
        Single value primary keys are much easier and should be the 
        first choice if you have limited experience and limited time
        to work with the more complex primary key and foreign key
        mechanism.
      </para>
    </tip>

    <section id="esport-project1-tech-dbschema">
        <title>Database Schema</title>
        <para>
            Design 2 sets of database schema that account for the following
            information. Although we will deploy the 2 database schemas to
            the same database for the project, they should be designed to be
            independently deployed to separate databases. eLeague and eClub are
            two independent applications. This will primarily affect your attempt
            re-use tables or to make primary key assumptions between the two.
        </para>

        <section id="esport-project1-tech-leaguedb">
            <title>eLeague Candidate Database Schema</title>

            <figure>
                <title>eLeague Candidate Database Schema</title>
                <graphic scalefit="1" fileref="images/eleague-db-schema.jpg"/>
            </figure>
      
            <section id="esport-project1-tech-leaguedb-league">
                <title>ELEAGUE_LEAGUE</title>
                <para>
                    This table is used to store singleton
                    information for the entire application. Although JPA 
                    requires a primary key field, this table should have only
                    one row. Right now, it is being depicted as referencing the
                    current season.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>LEAGUE_NAME</filename></term>
                        <listitem><para>
                          Unique name for the league that will
                          not change.  It can be used as a primary key.
                         </para></listitem>
                    </varlistentry>


                    <varlistentry>
                        <term><filename>SEASON_ID</filename></term>
                        <listitem><para>
                          (1 to 0..1 relation to ELEAGUE_SEASON) - this
                          references the most current season and will be NULL before
                          the start of the first season.
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>COORDINATOR_ID</filename></term>
                        <listitem><para>
                          (1 to 0..1 relation to the
                          ELEAGUE_CONTACT) - designates the overall coordinator for
                          the league. They will be responsible for adding clubs,
                          forming divisions, and scheduling contests.
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>


            <section id="esport-project1-tech-leaguedb-contact">
                <title>ELEAGUE_CONTACT</title>
                <para>
                  Design a table that contains POC
                  information for individuals responsible for the league,
                  divisions, and teams. This information is primarily on-line
                  information and need only contain a textual name and an e-mail
                  address. There is no need for any more detailed information and
                  we don't want to expose phone numbers.
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          This is a synthetic/generated id to identify the contact.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>CONTACT_NAME</filename></term>
                        <listitem><para>
                          This is a required, non-unique textual
                          name for the individual. This will be posted the
                          league site and can be updated.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>EMAIL</filename></term>
                        <listitem><para>
                          This contains the e-mail contact information
                          for the individual that will be posted to the web site.
                          It its highly recommended for optimal operation of
                          the league, but may not be available when contacts are
                          initially entered. We should not treat this field as
                          unique since family members have been known to share
                          the same league e-mail address.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>LOGIN</filename></term>
                        <listitem><para>
                          This is a field that can be used to represent
                          the individual's login to the web site. This field is not
                          required. However, if it is not supplied, it is assumed 
                          that they will not be personally accessing the site. This
                          field can be updated, thus it would not work well as a
                          primary key.
                         </para></listitem>
                    </varlistentry>

                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguedb-season">
                <title>ELEAGUE_SEASON</title>
                <para>
                  Design a table to store the name
                  and core information associated with a season. Seasons will
                  never be removed as a part of normal operation.
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          The unique ID for the season. This value is
                          required, must be unique, and cannot be changed. It can
                          be used as a primary key if desired. It can be a natural
                          value (e.g., Fall2000) or a synthetic value.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>SEASON_NAME</filename></term>
                        <listitem><para>
                          The textual name for the season (e.g.,
                          "Fall 2000"). This value is required and must be unique.
                          It could be used as a primary key if desired, but is
                          thought to be more of a textual value that may require
                          modification.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>START_DATE</filename></term>
                        <listitem><para>
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>END_DATE</filename></term>
                        <listitem><para>
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>LEAGUE_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ELEAGUE_LEAGUE). This 
                          relationship allows all seasons to form a DB relationship
                          to the league.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguedb-division">
                <title>ELEAGUE_DIVISION</title>
                <para>
                  Design a table that represents
                  a division for teams, for a single season. Divisions
                  will be arranged by group (i.e., age) and level of play.
                  Since group/level names cannot be relied on for any specific
                  ordering, you may wish to add a competitive rank property (11,
                  21, 22, 23 might equate to U11-D1, U12-D1, U12-D2, U12-D3 
                  with U11 and U12 being a group and D1, D2, and D3 being a level).
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>SEASON_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ELEAGUE_SEASON) 
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>GROUP</filename></term>
                        <listitem><para>
                          A name for a class of teams,
                          such as an age group (e.g., U11, Bantam, or Masters). This 
                          is required and does not change.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>LEVEL</filename></term>
                        <listitem><para>
                           A name for the competitive level of play (e.g.,
                          DI, DII -or- AA, A, B, etc.)
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>COORDINATOR_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ELEAGUE_CONTACT) - this
                          individual will be responsible for updating scores for
                          contests within the division.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>COMP_RANKING</filename></term>
                        <listitem><para>
                          A value that can be used to sort divisions
                          by their competitive ranking rather than an ASCII sort of
                          their group and level names.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>


            <section id="esport-project1-tech-leaguedb-teamseason">
                <title>ELEAGUE_TEAM_SEASON</title>
                <para>
                  Design a table that represents a
                  team's participation in a division for a season. 
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>TEAM_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ELEAGUE_TEAM) - a team 
                          will participate in 0 to many seasons and we will keep 
                          historical information of the teams from season to season.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>SEASON_ID,GROUP,LEVEL</filename></term>
                        <listitem><para>
                          * (N:1 relation to ELEAGUE_DIVISION) - a team will 
                          participate in only one division per season.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>


            <section id="esport-project1-tech-leaguedb-team">
                <title>ELEAGUE_TEAM</title>
                <para>
                  Design a table that represents a team
                  over time. We are interested in tracking points of contact for
                  the team and divisional play. We do want to keep current and
                  historical division play, but do not need to keep historical
                  contact information.
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          An artificial id for the team
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>TEAM_NAME</filename></term>
                        <listitem><para>
                          Each team must have a name, but it need not be
                          unique
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>CLUB_ID</filename></term>
                        <listitem><para>
                          Each team must have a name, but it need not be
                          unique
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguedb-team-role">
                <title>ELEAGUE_TEAM_ROLE</title>
                <para>
                  Design a table that describes the
                  role played by a contact for a team. Contacts are usually
                  a manager or coach. You can have multiple contacts for a
                  specific team and they can even have the same role (e.g.,
                  someone can be coach and manager and two people can be a
                  (assistant?) coach). However, no one can have multiple roles
                  of the name for a single team (e.g., you can be manger for 
                  2 teams, but you can't manage the same team twice). Therefore
                  we have the option of forming a compound primary key out of
                  the role name, contact foreign key, and team foreign key.
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ROLE_NAME</filename></term>
                        <listitem><para>
                          Contains the type of role the contact plays 
                          for a team (e.g., manager, coach). This value is required
                          and will not change.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>CONTACT_ID</filename></term>
                        <listitem><para>
                          (N:1 to ELEAGUE_CONTACT). This reference is
                          mandatory and will not change.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>TEAM_ID</filename></term>
                        <listitem><para>
                          (N:1 to ELEAGUE_TEAM). This reference is
                          mandatory and will not change.
                         </para></listitem>
                    </varlistentry>


                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguedb-club">
                <title>ELEAGUE_CLUB</title>
                <para>
                  Design a table that represents a club for teams.
                </para>


                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          An artificial primary key value
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>CLUB_NAME</filename></term>
                        <listitem><para>
                          The textual name for the club. This value
                          must be supplied, may be changed, and must be unique.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>REP_ID</filename></term>
                        <listitem><para>
                          (N:1 to ELEAGUE_CONTACT). This reference
                          supplies the contact information for the club rep.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguedb-venue">
                <title>ELEAGUE_VENUE</title>
                <para>
                  Design a field that represents a venue 
                  for holding contests. Venues are owned by a club, but are given
                  to the league to control their scheduling. Other than
                  scheduling, the key information is to provide map, direction,
                  and other information that would be helpful for visiting teams
                  to locate the venue.
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          This is an artificial value to identify a venue.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>CLUB_ID</filename></term>
                        <listitem><para>
                          (N:1 to ELEAGUE_CLUB)
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>VENUE_NAME</filename></term>
                        <listitem><para>
                          A textual name used to identify a venue
                          (e.g., YaYa Park, field #3)
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>ADC_PAGE</filename></term>
                        <listitem><para>
                          This is a text field containing the ADC map,
                          page, and grid where the venue is located.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>DIRECTIONS</filename></term>
                        <listitem><para>
                          This is provided by the club and may be
                          updated to reflect current direction information. Some
                          clubs even add information about whether pets are allowed
                          or whether there are bathrooms are available on-site.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>ADDRESS_ID</filename></term>
                        <listitem><para>
                          (N:1 to ELEAGUE_ADDRESS) - this is required.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguedb-address">
                <title>ELEAGUE_ADDRESS</title>
                <para>
                  Design a table to hold an address.
                  Although it could be used for anything, it will primarily be
                  used for people attempting to locate a venue by address
                  information using Google Maps or their GPS Navigation.             
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          This is an artificial value to identify a specific address
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>STREET1</filename></term>
                        <listitem><para>
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>STREET2</filename></term>
                        <listitem><para>
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>CITY</filename></term>
                        <listitem><para>
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>STATE</filename></term>
                        <listitem><para>
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>ZIP</filename></term>
                        <listitem><para>
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguedb-contest">
                <title>ELEAGUE_CONTEST</title>
                <para>
                  Design a table to hold contest
                  information. Contents are scheduled at venues for a home and
                  away team. They are for a specific date, start and end time,
                  and should never overlap with another contest for the same
                  venue. Contests are always for teams in the same division.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          This is an artificial value to identify a specific
                          contest.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>START_TIME</filename></term>
                        <listitem><para>
                          Identifies the time of day the contest will
                          start. This field may not be known when the contest is 
                          first identified or post-poned, so it is not required.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>DURATION or END_TIME</filename></term>
                        <listitem><para>
                          This either can identify the amount of time allocated
                          to the contest or express the actual end time.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>VENUE_ID</filename></term>
                        <listitem><para>
                          (N:0..1 relation to ELEAGUE_VENUE) This
                          relationship may not be known when the contest is first
                          identified or post-poned, so it is not required.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>HOME_TEAM_ID</filename></term>
                        <listitem><para>
                           (N:1 relation to ELEAGUE_TEAM_SEASON) This
                          relationship is required. Note that it is related to the 
                          team's season in this database and not directly to the 
                          team's table in eClub. 
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>AWAY_TEAM_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ELEAGUE_TEAM_SEASON) This
                          relationship is required. Note that it is related to the 
                          team's season in this database and not directly to the 
                          team's table in eClub. 
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>SEASON_ID, GROUP, LEVEL</filename></term>
                        <listitem><para>
                          Used to complete the compound
                          foreign key values to the home and away teams. Since teams 
                          must be in the same division, we should be able to 
                          reuse these columns to enforce that rule.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>HOME_SCORE</filename></term>
                        <listitem><para>
                          Score for home team to be updated by the
                          division coordinator.
                         </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>AWAY_SCORE</filename></term>
                        <listitem><para>
                          Score for away team to be updated by the
                          division coordinator.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>



        <section id="esport-project1-tech-clubdb">
            <title>eClub Candidate Database Schema</title>

            <figure>
                <title>eClub Candidate Database Schema</title>
                <graphic scalefit="1" fileref="images/eclub-db-schema.jpg"/>
            </figure>
      
            <section id="esport-project1-tech-clubdb-individual">
                <title>ECLUB_INDIVIDUAL</title>
                <para>
                  Design a table to contain
                  information associated with an individual in the club.
                </para>

                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          This is an artificial value used to identify an
                          individual.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>FIRST_NAME</filename></term>
                        <listitem><para>
                          This should be required, but may be updated
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>LAST_NAME</filename></term>
                        <listitem><para>
                          This should be required, but may be updated
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>EMAIL</filename></term>
                        <listitem><para>
                          This is optional
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>LOGIN</filename></term>
                        <listitem><para>
                          This is optional. Users without a login cannot 
                          login to update their information.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
      
            <section id="esport-project1-tech-clubdb-pclink">
                <title>ECLUB_PARENT_CHILD_LINK</title>
                <para>
                  Design a table to hold
                  a many-to-many link table representing parent/child
                  relationships between individuals in the club.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>CHILD_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ECLUB_INDIVIDUAL)
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>PARENT_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ECLUB_INDIVIDUAL)
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
      
            <section id="esport-project1-tech-clubdb-player">
                <title>ECLUB_PLAYER</title>
                <para>
                  Design a table to hold information
                  specific to a player.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          (1:1 relation to ECLUB_INDIVIDUAL). This is both
                          a primary and foreign key value.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>JERSEY_NO</filename></term>
                        <listitem><para>
                          This is optional and can be updated over time. 
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>POSITION</filename></term>
                        <listitem><para>
                          This is optional and can be updated over time.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>DOB</filename></term>
                        <listitem><para>
                          This is the date of birth for the player used to
                          help assign a player to a pool of teams. It is required,
                          but may need correcting over time.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
      
            <section id="esport-project1-tech-clubdb-coach">
                <title>ECLUB_COACH</title>
                <para>
                  Design a table to hold information specific
                  to a coach.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          (1:1 relation to ECLUB_INDIVIDUAL). This is both
                          a primary and foreign key value.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>CERT_NO</filename></term>
                        <listitem><para>
                          This is optional and can be updated. It will
                          contain their coaching certification number.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>CERT_LEVEL</filename></term>
                        <listitem><para>
                          This is optional and can be updated. It will
                          have values like 1, 2, 3, etc. 
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
      
            <section id="esport-project1-tech-clubdb-team">
                <title>ECLUB_TEAM</title>
                <para>
                  Design a table to hold information specific
                  to a team within the club. Note that historical information
                  for teams is not kept from season to season. For simplicity,
                  we will only assign a single head coach (no assistant coaches).
                  Note also the information below is internal to eClub. You may 
                  want to include an indentifer the league tracks this team
                  by and store it here for querying the league about the team.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          This is an artificial value used to refer to a
                          specific team. 
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>TEAM_NAME</filename></term>
                        <listitem><para>
                          This is a required field used to hold a textual 
                          name for the team. It can be updated.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>LEAGUE</filename></term>
                        <listitem><para>
                          This is an optional field that can be updated
                          over time. It will identify which league they are playing in.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>GROUP</filename></term>
                        <listitem><para>
                          This is an optional field that can be updated 
                          over time. It will identify which grouping the team is
                          playing within a league (e.g., U11 or Bantam).
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>LEVEL</filename></term>
                          This is an optional field that can be updated 
                          over time. It will identify the level of play within a 
                          group (e.g., D1, D2).
                        <listitem><para>
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>MANAGER_ID</filename></term>
                        <listitem><para>
                          (N:0..1 relation to ECLUB_INDIVIDUAL). This
                          is optional and can be updated over time. 
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>HEAD_COACH_ID</filename></term>
                        <listitem><para>
                          (N:0..1 relation to ECLUB_COACH). This
                          is optional and can be updated over time.
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>LEAGUE_TEAM_ID</filename></term>
                        <listitem><para>
                          This is an optional field that will
                          get updated once the team is registered with the league.
                          Since the League and Club databases are separate, we
                          cannot re-use IDs between them.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
      
            <section id="esport-project1-tech-clubdb-ptlink">
                <title>ECLUB_PLAYER_TEAM_LINK</title>
                <para>
                  Design a table to hold the
                  many-to-one linkage between players and teams. Teams have
                  multiple players and we'll limit players to only one team so
                  far. If we model this as a link table, it will be easier
                  later on to allow a player to be on multiple teams.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>PLAYER_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ECLUB_PLAYER)
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>TEAM_ID</filename></term>
                        <listitem><para>
                          (N:1 relation to ECLUB_TEAM)
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
      
            <section id="esport-project1-tech-clubdb-club">
                <title>ECLUB_ECLUB</title>
                <para>
                  Design a table to hold core club information.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>ID</filename></term>
                        <listitem><para>
                          This is an artificial value used to refer to 
                          the club
                         </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>CLUB_NAME</filename></term>
                        <listitem><para>
                          This is a required field that can be updated.
                         </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>
    </section>


    <section id="esport-project1-tech-bo">
        <title>Business Objects</title>

        <section id="esport-project1-tech-leaguebo">
            <title>eLeague Candidate Business Objects</title>
    <warning>
      <title>Stick to JPA 2.1 constructs</title>
      <para>I discovered very late in the preparation for the Fall 2018 course
      that the course dependencies are set to Hibernate 5.3.x, to leverage
      JPA 2.2 in some of the examples and capabilities. However, without being 
      and to fully run Wildfly in ee8 preview mode, we will be limited to 
      Hibernate 5.1.x when deployed to the server in follow-on projects this 
      semester. That version of Hibernate is JPA 2.1.  This should not be an 
      issue unless you make use of the new Java DateTime
      API mappings or the getStream() query result.</para>
    </warning>
            <figure>
                <title>eLeague Candidate Business Objects</title>
                <graphic scalefit="1" fileref="images/eleague-business-objects.jpg"/>
            </figure>

            <section id="esport-project1-tech-leaguebo-contact">
                <title>Contact</title>
                <para>
                  Design a class that encapsulates the points
                  of contact in the system. This information will primarily
                  be used to post point of contact information for teams,
                  divisions, clubs, and the league to the web site.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>id:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>name:String</filename></term>
                        <listitem><para>
                          Textual name for individual to be known as.
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>email:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>login:String</filename></term>
                        <listitem><para>
                          May be assigned for individuals to login
                          and be able to modify team, division, and contest
                          information that they are responsible for.
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguebo-contactrole">
                <title>ContactRole</title>
                <para>
                  Design a class that can be used to wrap a
                  Contact for points of contact where their role must be
                  qualified. This is the case for team points of contact where
                  the individual can be one of manager or coach.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>roleName</filename></term>
                        <listitem><para>
                          Enum(UNKNOWN, MANAGER, COACH)
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>contact:Contact</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguebo-venue">
                <title>Venue</title>
                <para>
                  Design a class that holds information for a
                  venue. It is shown as being as being made up of an embedded
                  Address class, where the address class holds no primary key
                  of its own. You may map the 2 table in alternate ways.
                </para>
                <variablelist spacing="compact">

                    <varlistentry>
                        <term><filename>id:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>name:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>directions:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>adcPage:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>address:Address</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>club:Club</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguebo-address">
                <title>Address</title>
                <para>
                  Design a class that represents a location that
                  can be driven to. This is being depicted as an embedded class,
                  with no primary key value of its own. You may map it in other
                  ways.
                </para>
                <variablelist spacing="compact">

                    <varlistentry>
                        <term><filename>street1:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>street2:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>city:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>state:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>zip:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguebo-club">
                <title>Club</title>
                <para>
                  Design a class that represents a Club and all of 
                  its venues and teams.
                </para>
                <variablelist spacing="compact">

                    <varlistentry>
                        <term><filename>id:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>name:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>teams:Collection&lt;Team&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>venues:Collection&lt;Team&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguebo-team">
                <title>Team</title>
                <para>
                  Design a class that represents information for a team. 
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>id:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>name:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>club:Club</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>contacts:Collection&lt;ContactRole&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguebo-teamseason">
                <title>TeamSeason</title>
                <para>
                  Design a class that represents a team's
                  division play within a season. It is anticipated that this
                  class will have a compound primary key with the identifying
                  information for the team and division. You will need to
                  create an embeddable primary key to hold the information.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>team:Team</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>division:Division</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>homeGames:Collection&lt;Contest&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>awayGames:Collection&lt;Contest&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>wins:int</filename></term>
                        <listitem><para>
                          A transient, read-only property calculated by
                          contests the team has won this season.
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>losses:int</filename></term>
                        <listitem><para>
                          A transient, read-only property calculated
                          by contests the team has lost this season.
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>ties:int</filename></term>
                        <listitem><para>
                          A transient, read-only property calculated
                          by contests the team has tied this season.
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguebo-division">
                <title>Division</title>
                <para>
                  Design a class that represents divisional play
                  between teams within a season. Since group/level names cannot 
                  be relied on for any specific ordering, you may wish to add a 
                  competitive rank property (11, 21, 22, 23 might equate to 
                  U11-D1, U12-D1, U12-D2, U12-D3). This class also may have a
                  compound primary key (again, these are technical details you
                  can decide).
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>season:Season</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>group:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>level:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>ranking:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>coordinator:Contact</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>teams:Collection&lt;TeamSeason&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-leaguebo-contest">
                <title>Contest</title>
                <para>
                  Design a class that represents a contest at a
                  venue for a home and away team. Note that the start/end times
                  or date of contest information may or may not map directly to 
                  database column. Some of these values may be derived from other
                  values and therefore are "Transient" as far as O/R
                  Mapping concerned. I will list the properties that callers
                  of this class will be concerned about; whether they come
                  directly from the database or are derived.

                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>id:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>date:Date (or integrated in with startTime)</filename></term>
                        <listitem><para>
                          Callers will want something they can use to provide 
                          the user with day-of-week, month, day output.
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>startTime:Date</filename></term>
                        <listitem><para>
                          Callers will want something they can translate to a 
                          user output that represents hh:mm
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>endTime:Date</filename></term>
                        <listitem><para>
                          Callers will want something they can translate to a 
                          user output that represents hh:mm. Schedulers will 
                          also need this to determine conflict.
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>location:Venue</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>homeTeam:TeamSeason</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>awayTeam:TeamSeason</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>isComplete():boolean</filename></term>
                        <listitem><para>
                          Another field or null or negative scores can
                          indicate a contest that has not yet completed.
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>homeScore:int or Integer</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>awayScore:int or Integer</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>


        <section id="esport-project1-tech-clubbo">
            <title>eClub Candidate Business Objects</title>
            <figure>
                <title>eClub Candidate Business Objects</title>
                <graphic scalefit="1" fileref="images/eclub-business-objects.jpg"/>
            </figure>

            <section id="esport-project1-tech-clubbo-individual">
                <title>Individual</title>
                <para>
                  Design a class that encapsulates information
                  for an individual in the club.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>id:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>firstName:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>lastName:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>email:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>login:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>lastName:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>parents:Collection&lt;Individual&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>children:Collection&lt;Individual&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-clubbo-player">
                <title>Player</title>
                <para>
                  Design a class that encapsulates information for
                  a player.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>jerseyNo:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>position:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>dob:Date</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>individual:Individual</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>team:Team</filename></term>
                        <listitem><para>
                          Keep players to a single team for simplicity.
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-clubbo-coach">
                <title>Coach</title>
                <para>
                  Design a class that encapsulates information for
                  a coach.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>certLevel:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>certNo:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>individual:Individual</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>

                    <varlistentry>
                        <term><filename>team:Team</filename></term>
                        <listitem><para>
                          Keep coach to a single team for simplicity.
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-clubbo-team">
                <title>Team</title>
                <para>
                  Design a class that encapsulates information for
                  a team.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>id:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>name:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>league:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>group:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>level:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>leagueTeamId:Integer</filename></term>
                        <listitem><para>
                          A key value that identifies the team within the 
                          eLeague system.
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>manager:Individual</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>headCoach:Coach</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>players:Collection&lt;Player&gt;</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>

            <section id="esport-project1-tech-clubbo-club">
                <title>Club</title>
                <para>
                  Design a class that encapsulates information for
                  the overal club.
                </para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>id:int</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>name:String</filename></term>
                        <listitem><para>
                        </para></listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>
    </section>

    <section id="esport-project1-tech-validation">
        <title>Validation API</title>
        <para>
            Add validation API declarations to your business objects as appropriate. 
            This need not be extensive or exhaustive. Just do enough to show use of
            declarative validation as a part of your application. 
        </para>
        <orderedlist spacing="compact">
            <listitem><para>
                Determine the validation groups you wish to use in 
                your application (suggest business logic interface and persistence tier).
                </para> </listitem>
            <listitem><para>
                Add validation annotations to your business objects and assign them
                to your designed groups as appropriate.
                </para> </listitem>
            <listitem><para>
                Manually invoke validation from the your junit test and integrate
                the validation into your persistence unit.
                </para> </listitem>
        </orderedlist>
    </section>

    <section id="esport-project1-tech-ingest">
        <title>eLeague Ingest</title>
        <para>
            Design and implement a mechanism to ingest a starting state for
            eLeague based on a provided data file and parser.  You will implement
            two primary sets of classes to support this requirement; the
            DAO(s) and an Ingestor. 
        </para>
        <orderedlist spacing="compact">
            <listitem><para>
                Design and implement a set of DAOs that can be used
                to ingest eLeague business data into the database using 
                the database schema you designed as a part of a
                separate requirement. These DAOs can optionally be tuned for 
                ingest or simply reused from your CRUD-style requirements.
                </para> </listitem>
            <listitem><para>
                Design and implement an Ingestor that will use an externally
                provided parser to obtain business data for eLeague and use the 
                Ingest DAO to populate the database. 
                </para> </listitem>
        </orderedlist>

        <figure>
            <title>eLeague Ingest and DAO</title>
            <graphic scalefit="1" fileref="images/eleague-ingest-dao.jpg"/>
        </figure>
        <note>
            <para>
                Please ignore references in the diagrams that call out use of 
                JDBC. All DAOs can be implemented exclusively with JPA for this assignment.
            </para>
        </note>
    </section>

    <section id="esport-project1-tech-dao">
        <title>Data Access Objects (DAOs)</title>
        <para>
            Design and implement a DAO layer that will map the business
            objects between the object model and the database using the Java
            Persistence API (JPA). These DAOs will support all standard CRUD
            operations and can optionally implement the same interface as other
            potential DAO implementations. The implementation can make liberal use
            of JPA @Annotations, descriptor files, or a combination of both. Your 
            interface should encapsulate the fact that an EntityManager is being
            used and the same EntityManager should be shared among other DAOs in
            the same Thread. Your DAOs should not attempt to control the transaction 
            or they will <emphasis>NOT</emphasis> be portable to the EJB tier.
        </para>

        <section id="esport-project1-tech-leaguedao">
            <title>eLeague DAOs</title>
            <figure>
                <title>eLeague Candidate JPA DAOs</title>
                <graphic scalefit="1" fileref="images/eleague-daos.jpg"/>
            </figure>
            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>LeagueDAO/JPALeagueDAO</filename></term>
                    <listitem><para>
                        Encapsulates the use of JPA when
                        mapping League and closely associated business objects (Season,
                        Division, TeamSeason, Contest, and Contact) to/from the database.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>ClubDAO/JPAClubDAO</filename></term>
                    <listitem><para>
                        Encapsulates the use of JPA when
                        mapping Club and closely associated business objects (Venue,
                        Address, Team, and Contact) to/from the database.
                        </para></listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="esport-project1-tech-clubdao">
            <title>eClub DAOs</title>
            <note>
                <para>
                    Please remember the desire to keep it simple for eClub.
                    You have the option of implementing the DAO as part of 
                    the business logic in this application.
                </para>
            </note>
        </section>
    </section>

    <section id="esport-project1-tech-sqltuning">
        <title>SQL Tuning (Indexes)</title>
        <para>
            Add tuning to your database schema by augmenting the DDL files with 
            indexes for foreign keys, joins, and where clauses. This need not be extensive 
            or exhaustive. Just do enough to show that proper data model and database tuning 
            is part of the overall enterprise development process.
        </para>
    </section>

    <section id="esport-project1-tech-bl">
        <title>Business Logic</title>
        <para>
            Design an initial business interface and business logic for
            the applications. The core O/R mapping work will be done
            by the DAOs.  However, it is the ultimate responsibility of these
            business logic implementations that either it or the business objects
            enforce the business rules of the application. The DAOs only perform
            O/R mapping and do not enforce such things as business ordering.  The
            business logic is assumed to work within the context of a single,
            externally controlled transaction. Do not attempt to control the
            transaction of the EntityManager within these objects or you will
            <emphasis>NOT</emphasis> be portable to the EJB tier (without extra work). 
            You need only implement the behavior
            required to implement the end-to-end use case listed in the testing
            section. Some of the anticipated methods are listed below.
        </para>

        <section id="esport-project1-tech-leaguebl">
            <title>eLeague Business Logic</title>

            <figure>
                <title>eLeague Business Logic</title>
                <graphic scalefit="1" fileref="images/eleague-business-logic.jpg"/>
            </figure>
            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>LeagueMgmt/LeagueMgmtImpl</filename></term>
                    <listitem><para>
                      Encapsulate the actions
                      required to create Clubs and manage Seasons and Divisions.

                        </para>
                        <orderedlist spacing="compact">
                            <listitem><para>
                              createClub - league coordinators will need to create
                              new clubs for the league. Once the club has been created,
                              ClubMgmt can be used to perform management of the club
                              details.
                                </para> </listitem>
                            <listitem><para>
                              addSeason - league coordinators will need to create a
                              new season for the league. The league cannot have 2 or
                              more concurrent seasons and will know the most current
                              season, if any.
                                </para> </listitem>
                            <listitem><para>
                              addDivision - league coordinators will need to add
                              divisions for a season. Club coordinators will be
                              assigning their teams to the league's divisions for
                              a season.
                                </para> </listitem>
                            <listitem><para>
                              updateContact - leagues will need to update their primary
                              and division points of contact.
                                </para> </listitem>
                            <listitem><para>
                              getDivisions - users will need to know which divisions
                              exist for the most current season.  There will also need
                              to be the capability to get historical information for
                              previous seasons.
                                </para> </listitem>
                            <listitem><para>
                              getDivisionStandings - users will want to get divisional
                              standings information for the most current season. This
                              would normally consist of an ordered list of teams based
                              on wins (you can ignore ties) and their win, loss,
                              tie totals.  Note that this may involve the creation
                              of a transient object that is calculated on-demand
                              by business objects and may not be persisted in the
                              database.  There will also need to be the capability to
                              get historical information for previous seasons.
                                </para> </listitem>
                            <listitem><para>
                              getTeam - regular users and team/club officials will 
                              need to obtain team points of contact, schedule, and
                              contest results for the most current season.
                              There will also need to be the capability to get historical
                              information for previous seasons.
                                </para> </listitem>
                        </orderedlist>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><filename>ClubMgmt/ClubMgmtImpl</filename></term>
                    <listitem><para>
                          Encapsulate the actions
                          required to manage Venues and Teams.
                        </para>
                        <orderedlist spacing="compact">
                            <listitem><para>
                              addVenue - you will need to create one or more 
                              venues for the league to schedule contests for your club.
                              The only thing that the club manages for the venue is
                              keeping directional information up to date.
                                </para> </listitem>
                            <listitem><para>
                              addTeam - you will need to create teams that play for
                              the club. Note that clubs span multiple seasons/divisions
                              and may even sit out a season. Therefore, teams are usually
                              added first and then later assigned to divisions.
                                </para> </listitem>
                            <listitem><para>
                              assignTeamDivision - clubs will have to assign their
                              teams to divisions after the league has created them
                              for an upcoming season.
                                </para> </listitem>
                            <listitem><para>
                              updateTeam - teams will need to be able to assign
                              points of contact  
                                </para> </listitem>
                            <listitem><para>
                              updateContact - clubs and teams will need to update
                              points of contact information.
                                </para> </listitem>
                        </orderedlist>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><filename>ContestMgmt/ContestMgmtImpl</filename></term>
                    <listitem><para>
                      Encapsulate the actions
                      required to schedule and manage contests between teams within 
                      the league.
                        </para>
                        <orderedlist spacing="compact">
                            <listitem><para>
                              scheduleSeason - league officials will need to create a
                              home and away schedule for each team in the division with
                              each team playing each other at least once and possibly
                              more (for smaller divisions), up to a specified number
                              (default to 10) number of games. Your scheduling can
                              be extremely simple as long as it does not schedule
                              conflicting contests. Ideally a team would not play more
                              than once on a single day and you might want to limit
                              contests to a specific set of days of the week. However,
                              the fact that you have placed the scheduling within the
                              correct architectural area is the key point. How simple
                              you make the algorithm is totally up to you and will not
                              impact your grade. You may decide how much scheduling
                              gets done by the business object(s) and how much gets
                              done by the business logic.
                                </para> </listitem>
                            <listitem><para>
                              reportScore - division coordinators will need to be able
                              to report the results of a contest.
                                </para> </listitem>
                        </orderedlist>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><filename>LeagueTestUtil/LeagueTestUtilImpl</filename></term>
                    <listitem><para>
                        A useful tool during
                        testing that encapsulates how to get the application back into
                        a known state prior to running a test or to inspect values not
                        normally exposed through the normal business interfaces.
                        </para>
                        <orderedlist spacing="compact">
                            <listitem><para>
                                resetAll - sanely take the state of the system down to a
                                coldstart.
                                </para> </listitem>
                            <listitem><para>
                                populate - you might want the database populated with 
                                a known state prior to running a test. This may delegate
                                to the LeagueIngestor.
                                </para> </listitem>
                            <listitem><para>
                                get/doXXX - methods that are unsafe for the actual
                                business logic, but are needed for development and test.
                                </para> </listitem>
                        </orderedlist>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><filename>LeagueIngestor</filename></term>
                    <listitem><para>
                          The Ingestor written as a part of a separate
                          requirement is also logically considered part of this tier.
                        </para>

                        <orderedlist spacing="compact">
                            <listitem><para>
                                ingest - point an externally provided parser at a set of test 
                                data and use the DAOs to populate the system to a known state.
                                </para> </listitem>
                        </orderedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>



        <section id="esport-project1-tech-clubbl">
            <title>eClub Business Logic</title>

            <figure>
                <title>eClub Business Logic</title>
                <graphic scalefit="1" fileref="images/eclub-business-logic.jpg"/>
            </figure>
            <note>
              <para>
                Keep in mind that this project has two notions of a club. From 
                the league's perpective it manages schedules, scores, and high
                level contact information for teams within a club. From the club's
                perspective, there is the need to manage coaches, players, and 
                parents associated with the team. For that reason -- I am calling
                the club an organization here to avoid some confusion.
              </para>
            </note>
            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>MemberMgmt/MemberMgmtImpl</filename></term>
                    <listitem><para>
                        Encapsulates the actions
                        required to manage individuals registering with the club.
                        </para>
                        <orderedlist spacing="compact">
                            <listitem><para>
                                createParent - parents will need to be able to register
                                with the club.
                                </para> </listitem>
                            <listitem><para>
                                createPlayer - parents will need the ability to register
                                their minors as players. All players will need at least
                                one parent.
                                </para> </listitem>
                            <listitem><para>
                                addCoachRole - coaches will need to be able to register 
                                with the club. It is common that a coach is also a parent.
                                </para> </listitem>
                        </orderedlist>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><filename>OrganizationMgmt/OrganizationMgmtImpl</filename></term>
                    <listitem><para>
                        Encapsulate the 
                        actions required to create teams and get team information. Some
                        of this information will come from contacting eLeague in future
                        projects.
                        </para>
                        <orderedlist spacing="compact">
                            <listitem><para>
                                createTeam - club officials will need to create teams.
                                </para> </listitem>
                            <listitem><para>
                                assignPlayers - club officials will need to assign
                                players to teams
                                </para> </listitem>
                            <listitem><para>
                                assignCoach - club officials will need the ability to
                                assign a coach to a team
                                </para> </listitem>
                            <listitem><para>
                                assignManager - club officials will need to ability to
                                assign a manager to a team
                                </para> </listitem>
                            <listitem><para>
                                getTeamRoster - users assigned to a team will need the
                                ability to get the roster for team. Rosters contain
                                coach, manager, player, and parent information.
                                </para> </listitem>
                            <listitem><para>
                                getTeamSchedule - users will need the ability to get
                                the schedule for a team for the most current season. This
                                information will come from eLeague in a future project.
                                Team schedules should have contest dates, venue, and
                                scores.
                                </para> </listitem>
                        </orderedlist>
                    </listitem>
                </varlistentry>

                <varlistentry>
                    <term><filename>ClubTestUtil/ClubTestUtilImpl</filename></term>
                    <listitem><para>
                      A useful tool during
                      testing that encapsulates how to get the application back into
                      a known state prior to running a test or to inspect values not
                      normally exposed through the normal business interfaces.
                        </para>
                        <orderedlist spacing="compact">
                            <listitem><para>
                                resetAll - sanely take the state of the system down to a
                                coldstart.
                                </para> </listitem>
                            <listitem><para>
                                populate - it may be helpful to return the database to
                                a known populated state between tests.
                                </para> </listitem>
                            <listitem><para>
                                get/doXXX - methods that are unsafe for the actual
                                business logic, but are needed for development and test.
                                </para> </listitem>
                        </orderedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
    </section>
</chapter>
  
