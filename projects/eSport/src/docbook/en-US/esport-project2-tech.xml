<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="esport-project2-tech">
    <title>Project 2 Technical Details</title>

    <section id="esport-project2-tech-impl">
        <title>Data Tier and Business Logic Support</title>
        <para>
            Continue to provide all functionality from Project 1;
            especially the unit tests as you revise your earlier implementations
            For example, you should continue to have the ability to run the
            unit and end-to-end tests implemented in project 1. Make sure you 
            design your project 2 testing such that it does not depend on 
            database residue from project 1 tests.
        </para>
    </section>

    <section id="esport-project2-tech-modules">
        <title>Module Layout</title>
        <para>
          Create a Maven module layout that will support the additional
          architecture layers of the assignment. It is intended that eLeague
          be implemented with a multi-module approach (to mimic a complex application)
          and eClub be implemented with very few (possibly one) modules (to 
          mimic a simplistic application).
        </para>

        <section id="esport-project2-tech-modules-league">
            <title>eLeague Modules</title>
            <para>
              To implement the full project 2 assignment, you will eventually need
              your existing implementation module(s) and new modules to implement
              a remote client, EJB, WEB, EAR, and test concepts.
            </para>
            <figure>
                <title>eLeague Candidate Modules</title>
                <graphic scalefit="1" fileref="images/eleague-modules.jpg"/>
            </figure>

            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>League Implementation Module(s)</filename></term>
                    <listitem><para>
                        These are your existing implementation module(s) from project 1.
                        They are intended to remain mostly unchanged when working on project 2.
                        They represent your core data and business logic and business decisions
                        in getting this far. We want to keep project 2 focused on the technical
                        aspects of deploying this capabilty to the server-side and leave the 
                        detailed business decisions behind. 
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>LeagueClient Module</filename></term>
                    <listitem><para>
                        This new module is going to make available to external clients of eLeague. 
                        This will contain data transfer objects (DTOs) and JAX-RS client code to 
                        make implementing the client calls easier.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>LeagueEJB Module</filename></term>
                    <listitem><para>
                        This new module will host the EJB components and define a META-INF/persistence.xml
                        that is appropriate for use on the server-side. Most of the implementation
                        of these components will be based on the project 1 implementation. 
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>LeagueWAR Module</filename></term>
                    <listitem><para>
                        This new module will host the JAX-RS interface for eLeague and any 
                        Web UI that is developed.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>LeagueEAR Module</filename></term>
                    <listitem><para>
                        This new module will package the EJB(s), WAR(s), and necessary JAR(s)
                        in a single deployment to the server. It will define identity 
                        information for the EJB and WAR that will impact base JNDI and URI name
                        paths generated to access the hosted components. It will also be a 
                        location where we exclude unecessary dependency JARs to trim the EAR 
                        of unecessary artifacts.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>League Remote Test Module</filename></term>
                    <listitem><para>
                        This new module will deploy the EAR to the server and execute 
                        integration tests that use remote interfaces to verify eLeague
                        functionality.
                        </para></listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section id="esport-project2-tech-modules-club">
            <title>eClub Module(s)</title>
            <para>
              To implement the project 2 assignment, you will need a WAR module.
              You can create a WAR module that is a sibling to your existing
              implementation module or change your existing implementation
              module into a WAR. Since there are no clients of eClub (other than 
              the eClub and end-to-end eSport tests that can be hosted within the
              WAR module) there will be no need to expose a client interface.
            </para>

            <figure>
                <title>eClub Candidate Modules</title>
                <graphic scalefit="1" fileref="images/eclub-modules.jpg"/>
            </figure>

            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>Club Implementation Module</filename></term>
                    <listitem><para>
                        This is your existing implementation module from project 1.
                        It is anticipated that you will enhance your existing 
                        business logic to become EJBs and host the existing code
                        in a module that supports EJB. That module can be the WAR.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>ClubWAR Module</filename></term>
                    <listitem><para>
                        This new module will host the JAX-RS interface and Web UI
                        for eClub and any supporting components and artifacts necessary
                        to support them. It is anticipated that you will convert
                        your existing module from project 1 into a WAR. However,
                        the only core requirement is that you deploy eClub as a WAR
                        -- whether you choose to add separate EJB modules or not.
                        </para></listitem>
                </varlistentry>
            </variablelist>
        </section>
    </section>

    <section id="esport-project2-tech-ejbbase">
        <title>EJB Base Tier</title>
        <para>
            Create an EJB tier to host your eLeague persistence unit and 
            supply a set of EJB components that will provide access to your
            server-side logic.
            Each of the EJBs provided will define the necessary @Remote and/or
            @Local interfaces to expose their associated server-side logic 
            and integrate them with other EJBs they depend upon.
            Transaction scope will be added as a part of a separate
            requirement. Security will be added in the next project. The
            construction, deployment, initialization, and and initial interfaces 
            of the EJB will be the focus of this requirement.  
        </para>

        <section id="esport-project2-tech-ejbbase-league">
            <title>eLeague Base EJB Tier</title>
            <figure>
                <title>eLeague Candidate Base EJB Tier</title>
                <graphic scalefit="1" fileref="images/eleague-ejb-base.jpg"/>
            </figure>

        </section>

        <section id="esport-project2-tech-ejbbase-club">
            <title>EClub Base EJB Tier</title>
            <figure>
                <title>eClub Candidate Base EJB Tier</title>
                <graphic scalefit="1" fileref="images/eclub-ejb-base.jpg"/>
            </figure>
        </section>
    </section>

    <section id="esport-project2-tech-ejb">
        <title>EJB Tier</title>
        <para>
            Create an EJB tier to host your business logic and
            data access tiers. Each of the EJBs provided will supply the
            necessary dependency injection and initialization for the business
            objects. Transaction scope will be added as a part of a separate
            requirement. Security will be added in the next project. The main
            construction, deployment, and remote interfaces of the EJB will be
            the focus of this requirement.  
        </para>
        <para>
            The EJBs will be used to inject and initialize
            implementation objects and provide a remote interface.
            The candidate EJBs are shown with possible dependencies between them.
            @Local interfaces are meant to identify interfaces that can easily support
            pass by reference and lazily loaded entities. @Remote interfaces are 
            meant to identify interfaces where calls are likely coming in from 
            an external context (i.e., pass-by-id or pass-by-value serialization) 
            and the responses must be complete.
        </para>

        <section id="esport-project2-tech-leagueejb">
            <title>eLeague EJB Tier</title>
            <figure>
                <title>eLeague Candidate EJB Tier</title>
                <graphic scalefit="1" fileref="images/eleague-ejbtier.jpg"/>
            </figure>

            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>LeagueTestUtilEJB</filename></term>
                    <listitem><para>
                        This candidate support EJB will primarily host the LeagueTestUtilImpl 
                        business logic to support remote testing requirements. 
                        Its biggest role is to perform database initialization and
                        ingest.
                        It can be the target of early "hello world" test calls 
                        without poluting your primary application classes.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>ClubMgmtEJB</filename></term>
                    <listitem><para>
                        This candidate EJB will primarily host the ClubMgmtImpl business logic.

                        This EJB will need to support calls from LeagueMgmt to form
                        seasons for its teams as well as support remote callers using
                        its core functionality.
                        </para></listitem>
                </varlistentry>

                <varlistentry>
                    <term><filename>LeagueMgmtEJB</filename></term>
                    <listitem><para>
                        This candidate EJB will primarily host the LeagueMgmtImpl business logic. 

                        This EJB will need to support calls from ContestMgmt to manage 
                        season contests as well as support remote callers using its
                        core functionality.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>ContestMgmtEJB</filename></term>
                    <listitem><para>
                        This candidate EJB will primarily host the ContestMgmtImpl business logic. 
                        
                        This EJB will need to support remote callers accessing its core functionality.
                        </para></listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="esport-project2-tech-leaguedto">
            <title>eLeague DTOs</title>
            <para>
                Create a set of Data Transfer Objects (DTOs) to serialize the state of the
                business objects between the EJB and client when using the remote
                interface. 
            </para>
            <figure>
                <title>eLeague Candidate DTOs</title>
                <graphic scalefit="1" fileref="images/eleague-dtos.jpg"/>
            </figure>

            <para>
                Remember that there can be more than 1 DTO to represent
                the same information related to a business object. For example,
                collections might contain summary information only
                and a single result might contain full details. The following is
                only provided as a reasonable starting point.
            </para>
            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>ContactDTO</filename></term>
                    <listitem><para>
                        This class is meant to hold contact
                        information. This is primarily made up of Contact and
                        TeamContactRole business object information.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>TeamDTO</filename></term>
                    <listitem><para>
                        This class is meant to hold team information
                        relative to the current season. This is primarily made up
                        of Team and TeamSeason business object information and the
                        sum of wins/losses/ties.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>ContestDTO</filename></term>
                    <listitem><para>
                        This class is meant to hold contest
                        information relative to a specific team. This is primarily
                        made up of Contest business object information.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>DivisionStandingDTO</filename></term>
                    <listitem><para>
                        This class is meant to hold an 
                        ordered list of TeamDTOs according to the team's rank within
                        the division. This is primarily made up of Season and Division
                        business object information and the result of comparing 
                        team results within the division.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>VenueDTO</filename></term>
                    <listitem><para>
                        This class is used to represent a summary
                        of the Venue business object information. As an example of
                        this, the address is expressed as a String rather than an
                        embedded object.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>AddressDTO</filename></term>
                    <listitem><para>
                        This class is meant to represent the 
                        Addess of a Venue, but is only used when setting the address
                        of a Venue. 
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>ClubDTO</filename></term>
                    <listitem><para>
                        This class is meant to hold the Club
                        information, which includes Venues and Teams. However, team
                        schedules are not necessary when used within this context.
                        </para></listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="esport-project2-tech-leagueear">
            <title>eLeague EAR Deployment</title>
            <para>
                Create an EAR to host the eLeague server-side
                components; including the EJB component just developed.
            </para>
        </section>

        <section id="esport-project2-tech-leaguermitest">
            <title>eLeague Remote Test</title>
            <para>
                Create a Test project that will deploy the EAR to the
                application server and run through a set of JUnit test using the
                remote interface of the EJBs. 
            </para>
        </section>


        <section id="esport-project2-tech-clubbl">
            <title>eClub/eLeague Business Logic Integration</title>
            <para>
                Complete and test the eClub business logic using the remote
                interface of eLeague. The diagram below shows the business logic within
                the context of the EJB Tier implemented as a part of a separate
                requirement.
            </para>

            <figure>
                <title>eClub Candidate Business Logic and EJB Tiers</title>
                <graphic scalefit="1" fileref="images/eclub-ejbtier.jpg"/>
            </figure>

            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>OrgMgmt/OrgMgmtImpl</filename></term>
                    <listitem><para>
                        Update this 
                        business logic interface and implementation to be able to obtain
                        team schedule and divisional standings for a team from eLeague.
                        This implementation may return the eLeague DTO classes if desired.
                        </para></listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="esport-project2-tech-clubwar">
            <title>eClub WAR Deployment</title>
            <para>
                Create a WAR module to host the eClub server-side
                components and the remote tests for the WAR/EJB components.
            </para>
        </section>

        <section id="esport-project2-tech-clubejb">
            <title>eClub EJB Tier</title>
            <para>
                Create an EJB tier to host your eClub business logic and
                data access tiers. To provide practice in alternative deployments,
                it is a requirement that this EJB component either be implemented as part 
                of the implementation module, as part of the WAR module, or 
                part of a combined implementation EJB+WAR module. Either way, the
                eClub EJBs must ultimately be deployed using a WAR.
                The EJB(s) provided will have the
                necessary dependency injection and initialization for the business
                objects. Transaction scope will be added as a part of a separate
                requirement. Security will be added in the next project. The main
                construction, deployment, and remote interfaces of the EJB will be
                the focus of this requirement. 
            </para>

            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>OrgMgmtEJB</filename></term>
                    <listitem><para>
                        This EJB will primarily host the 
                        OrganizationMgmtImpl business logic. A remote interface 
                        and bean implementation will need to be designed for this EJB.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>MemberMgmtEJB</filename></term>
                    <listitem><para>
                        This EJB will primarily host the 
                        MemberMgmtImpl business logic. A remote interface and bean
                        implementation will need to be designed for this EJB.
                        </para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>ClubTestUtilEJB</filename></term>
                    <listitem><para>
                        This support EJB will primarily
                        host the ClubTestUtilImpl business logic to support
                        remote testing requirements. A remote interface and bean
                        implementation will need to be designed for this EJB.
                        </para></listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section id="esport-project2-tech-clubdto">
            <title>eClub DTOs</title>
            <para>
                The DTOs are be used to serialize the state of the
                business objects between the EJB and client when using the remote
                interface. However, with care, business objects can be directly
                used as DTOs. You are required to re-use the entity classes 
                as DTOs in this application. That means you must account for 
                serialization of the entity class and Lazy-Load issues that 
                can occur during post-transaction marshalling of the entity class.
            </para>
            <tip>
              <title>No need for remote client library for eClub</title>
              <para>The only remote client of eClub is the eClub remote test 
              and this can be implemented within the WAR module to keep things
              simple. That should mean there is no need to create a remote client 
              archive to complete this assignment. That was not the case for 
              eLeague.</para>
            </tip>
        </section>
    </section>



    <section id="esport-project2-tech-webui">
        <title>Web UI</title>
        <para>
            Add separate Web UIs (WARs) to both applications to demonstrate
            integration between the Web UI and EJB Tiers.
        </para>

        <tip>
           <para> 
                In order to save development time and better leverage the 
                work you have already performed in the remote interface testing,
                you may use the remote interfaces between your WAR and EJB 
                components even though local interfaces would be more efficient
                when deployed within the same EAR or WAR. This is being done 
                to cut down on the amount of project work for class. You would
                ideally use the local interfaces when possible. You should 
                already be using the local interfaces between EJBs.
           </para> 
        </tip>
        
        <section id="esport-project2-tech-leagueweb">
            <title>eLeague Web UI</title>
            <para>
                Add a Web UI to the eLeague application. This may use EJB local
                or remote interfaces. The WAR for the Web UI must be deployed
                as part of the eLeague EAR. The Web UI must have the following
                functionality. 
                Note that the test data will already have a current season, divisions,
                other clubs, teams, etc. We will just be adding eClub information 
                to that information prior to the season being scheduled.
            </para>

            <itemizedlist spacing="compact">
                <listitem><para>Test Admin</para>
                    <orderedlist spacing="compact">
                        <listitem><para>
                            reset All tables
                            </para></listitem>
                        <listitem><para>
                            populate tables (using Ingestor)
                            </para></listitem>
                    </orderedlist>
                    </listitem>
                <listitem><para>League Officials</para>
                    <orderedlist spacing="compact">
                        <listitem>create Club<para>
                            </para></listitem>
                        <listitem>schedule a Season<para>
                            </para></listitem>
                    </orderedlist>
                    </listitem>
                <listitem><para>Club Coordinators</para>
                    <orderedlist spacing="compact">
                        <listitem><para>
                            add Venue for Club
                            </para></listitem>
                        <listitem><para>
                            add a Team for Club
                            </para></listitem>
                        <listitem><para>
                            add a contact for a Team
                            </para></listitem>
                        <listitem><para>
                            assign a Team to a Division
                            </para></listitem>
                    </orderedlist>
                    </listitem>
                <listitem><para>Division Coordinators</para>
                    <orderedlist spacing="compact">
                        <listitem><para>
                            report a Score
                            </para></listitem>
                    </orderedlist>
                    </listitem>
                <listitem><para>Anonymous User</para>
                    <orderedlist spacing="compact">
                        <listitem><para>
                            show Division Standings
                            </para></listitem>
                    </orderedlist>
                    </listitem>
            </itemizedlist>
        </section>

        <section id="esport-project2-tech-clubwebui">
            <title>eClub WEB UI Tier</title>
            <para>
                Add a Web UI to the eClub application (i.e., to the WAR you
                have already created for the EJBs). This may use the EJB local or
                remote interfaces. The WAR for the Web UI must be deployed solo --
                containing the EJBs and Impls. The Web UI must have the following
                functionality.
            </para>

            <itemizedlist spacing="compact">
                <listitem><para>Test Admin</para>
                    <orderedlist spacing="compact">
                        <listitem><para>
                            reset All tables
                            </para></listitem>
                        <listitem><para>
                            populate tables
                            </para></listitem>
                    </orderedlist>
                    </listitem>
                <listitem><para>Members</para>
                    <orderedlist spacing="compact">
                        <listitem><para>
                            create Parent
                            </para></listitem>
                        <listitem><para>
                            create PLayer
                            </para></listitem>
                        <listitem><para>
                            add Coach Role
                            </para></listitem>
                        <listitem><para>
                            get Team Roster for their team
                            </para></listitem>
                        <listitem><para>
                            get Team Schedule for their team
                            </para></listitem>
                    </orderedlist>
                    </listitem>
                <listitem><para>Organization Officials</para>
                    <orderedlist spacing="compact">
                        <listitem><para>
                            create Team
                            </para></listitem>
                        <listitem><para>
                            assign Players to Team
                            </para></listitem>
                        <listitem><para>
                            assign Coach to Team
                            </para></listitem>
                        <listitem><para>
                            assign Manager to Team
                            </para></listitem>
                    </orderedlist>
                    </listitem>
            </itemizedlist>
        </section>
    </section>

    <section id="esport-project2-tech-tx">
        <title>Transactions</title>
        <para>
            Add transaction properties to the EJBs. 
        </para>

        <orderedlist spacing="compact">
            <listitem><para>
                Transaction Scope - all session bean methods in these two
                applications should require a transaction unless otherwise justified.
                </para></listitem>
            <listitem><para>
                Transaction Integrity - Create a demonstration of
                transactions integrity and the capability of rollback by implementing a
                scenario that adds something to the database and then a *follow-on*
                rollback causes the changes to be undone. The state of the database
                must remain consistent once complete.
                </para></listitem>
        </orderedlist>

        <note>
            <para>
                To satisfy the transaction demonstration requirement, you
                must actually store something in the database and then later in
                the transaction roll it back based on some decision. If you make
                the decision before you store the information -- you are not
                satisfying the requirement. It is common for students to
                implement a wrapper around an existing method that takes a
                collection and populate the collection with good data up front
                and bad data at the end. The good data that got successfully
                processed should get rolled back once the bad data is
                processed. Create remote methods that can tell your remote test
                client that this actually occured.
            </para>
        </note>
    </section>
</chapter>
  
