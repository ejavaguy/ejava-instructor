<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="edatashare-project1-testing">
    <title>Project 1 Testing</title>

    <note>
        <para>
            The end-to-end scenario will test your business logic, DAO, and BOs in a 
            "happy path" scenario. Any white-box or black-box testing of alternate
            and error paths would be appropriate to put in the separate unit tests.
        </para>
    </note>
    <orderedlist spacing="compact">
        <listitem><para>
            Provide a JUnit test for your business objects (BOs) that test
            the manipulation of the data. An example test might be to try
            adding a residence to a Person without a start date.  These tests
            should be packaged with the BOs. It is anticipated that these 
            tests will be a minimal demonstration of understanding.
            </para> </listitem>
        <listitem><para>
            Provide a JUnit test for your eDmv and eMayberry JPA DAOs. This
            should test the implementation for the required CRUD operations
            for each type of object. It is understood that some of the objects
            will be handled by cascades, so you might not have a set of methods
            handling each type of business object.  This test should be packaged
            with the DAOs.
            </para> </listitem>
        <listitem><para>
            Provide a JUnit test for your business logic to test the
            basic functionality of your business logic design, including ingest.
            The ingestor test should be able to reference a known data file and
            ingest records into the database using the DAOs. These tests
            should be packaged with the business logic implementation.
            </para> </listitem>
        <listitem><para>
            Provide a set of JUnit test programs to verify the following
            end-to-end scenario in eDmv.  This test should be implemented as
            a JUnit test and packaged with the business logic implementation.
            </para>
            <orderedlist spacing="compact">
                <listitem><para>
                    reset (using DmvTestUtilImpl)
                    </para> </listitem>
                <listitem><para>
                    populate (using DmvIngestor)
                    </para> </listitem>
                <listitem><para>
                    addDriver (using DriverMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    moveResidence (using DriverMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    addRegistration (using VehicleMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    getRegistrationByMakeModel (using VehicleMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    getPeopleByName (using PeopleMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    getPerson (using PeopleMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    getRegistrationByOwner (using VehicleMgmtImpl)
                    </para> </listitem>
            </orderedlist>
        </listitem>
        <listitem><para>
            Provide a set of JUnit test programs to verify the following
            end-to-end scenario in eMayberry.  This test should be implemented as
            a JUnit test and packaged with the business logic implementation.
            </para> 
            <orderedlist spacing="compact">
                <listitem><para>
                    reset (using MayberryTestUtilImpl)
                    </para> </listitem>
                <listitem><para>
                    addPoi (PoiMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    addActivity (PoiMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    getPoi (PoiMgmtImpl)
                    </para> </listitem>
                <listitem><para>
                    isDangerous (PoiMgmtImpl)
                    </para> </listitem>
            </orderedlist>
            </listitem>
    </orderedlist>
</chapter>
  
