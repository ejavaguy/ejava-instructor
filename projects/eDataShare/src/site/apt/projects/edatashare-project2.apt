Project2: eDataShare N-Tier Application

    2013-01-26 - DRAFT

* Goals

    * Continue to re-use and update the implementations from the previously
    implemented data access tier and initial business logic.

    * Deploy data access tier and business logic as an EJB component
    
    * Deploy EJBs using EAR and WAR approaches

    * Provide a remote interface and client to business logic

    * Provide a Web tier 

* Objectives

    * Expand the current project development architecture to include EJB,
    WAR, EAR, and remote Test sub-projects for eDmv. For eDmv you will have 
    separate EJB, WAR, EAR, and rmi Test modules. This is being done to 
    simulate a complex project option.

    * Expand the current project development architecture to include EJB,
    WAR, and remote Tests for eMayberry. For eMayberry you will have a
    single WAR for deployment. You may merge all architectural levels
    into a single WAR module. This is being done to simulate a simple
    project option.

    * Re-host the data access tiers and initial business logic from 
    Project 1 within the new EJB and WEB tiers at component/runtime.

    * Design the data transfer objects (DTOs) to be used to communicate
    with clients using the remote interface.

    * Create the EAR and WAR sub-projects to host/deploy the Java EE components.

    * Create the remote Test sub-project(s) to deploy and run tests using the
    remote EJB interface.

    * Create and test the WAR sub-project to host the user interface.
    This component will ultimately be deployed the application server 
    and may use local interfaces of the EJB to access business logic. 

* Technical Overview

    [Note:] This project and the final project rely heavily on the
    components from Project 1. You are encouraged to make sure your
    implementation of Project 1 is sound and well tested prior to doing too
    much work on Project 2. You should continue to maintain your JUnit
    tests for the earlier components while working on these higher level
    tiers.

    []

    The project will continue along two parallel paths; eDmv and eMayberry.
    However, this time we will add several new project types; EJB, EAR,
    WAR, and Test. We will add all new project types to eDmv. We will add
    (or migrate to) the WAR type to eMayberry. 
    These new sub-projects will become siblings to your
    existing Dmv Impl -or- BO, DAO, and BLImpl sub-projects. 
    For eMayberry, you have the option of making the WAR a sibling project
    or migrating the existing Impl project to be a WAR project (and remain with
    a single module for eMayberry).    
    The new projects will depend on your legacy work. The remote interface of the EJB
    will also require specific design of what gets externalized to the
    client. The remote clients do not share the same address space we had
    in Project 1 and we cannot afford to serialize the entire contents
    of a database full of related information. Data Transfer Objects
    (DTOs) will be part of the EJB remote interface design.

    You have finished a significant amount of eDmv during Project 1; the
    O/R mapping and core business logic of a non-trivial business model.
    You will now host the data access tier and business logic within an
    EJB component.  This EJB component will supply the EntityManager,
    control transaction boundaries, provide local interaction for the
    Web Tier, and a RMI interface for remote clients. Security will be
    addressed in the next project. To limit the scope of the project, the
    Web UI requirements will be constrained to a limited number of
    use cases. You are to deploy eDmv using an EAR and eMayberry using
    only a WAR. 

    eMayberry will require additional work as well. With a remote interface
    for eDmv in hand and the ability to either simulate or operate with a
    live instance, we can now complete the rest of the the business logic
    that will also be hosted within an EJB tier. We'll try to keep the Web-UI
    minimal. 

    You may develop your Web tier in an alternate environment, such as
    Jetty. However, it must be submitted as part of the application that
    runs within JBoss.

    [Note:] As with the previous project, the use of the name eDataShare,
    eDmv, and eMayberry within the project specification are to be taken as
    placeholders. Please make an effort to uniquely name your directories,
    components, Java packages, JNDI names, etc. to help logically separate
    the parallel project implementations.

    [Note:] There should be no use of System.out.println() in the code
    and all implementations must use the jakarta commons logging API
    with the log4j logging provider.  You may leave debug in your code,
    but this should be able to be turned on/off with the proper logging
    priority changes in the log4j.xml configuration.

* Technical Details

    [[1]] Continue to provide all functionality from Project 1;
    especially the unit tests as you revise your earlier implementations
    For example, you should continue to have the ability to run the
    unit and end-to-end tests implemented in project 1. Make sure you 
    design your project 2 testing such that it does not depend on residue
    from project 1 tests.

===

    [[1]] Create an EJB tier to host your eDmv business logic and
    data access tiers. Each of the EJBs provided will supply the
    necessary dependency injection and initialization for the business
    objects. Transaction scope will be added as a part of a separate
    requirement. Security will be added in the next project. The main
    construction, deployment, and remote interfaces of the EJB will be
    the focus of this requirement.  You will have to address the data
    that gets serialized to the client in a set of Data Transfer Objects
    (DTOs).

        [[A]] EJBs - The EJBs will be used to inject and initialize
        implementation objects and provide a remote interface.

[../images/eDmv_ejbtier.jpg] eDmv Candidate EJB Tier

            [[a]] DriverMgmtEJB - this EJB will primarily host the 
            DriverMgmtImpl business logic. A remote interface 
            and bean implementation will need to be designed for this EJB.

            [[a]] VehicleMgmtEJB - this EJB will primarily host the 
            VehicleMgmtImpl business logic. A remote interface and
            bean implementation will need to be designed for this EJB.

            [[a]] PersonMgmtEJB - this EJB will primarily host the 
            PersonMgmtImpl business logic. A remote interface and bean 
            implementation will need to be designed for this EJB.

            [[a]] DmvTestUtilEJB - this support EJB will primarily
            host the DmvTestUtilImpl business logic to support
            remote testing requirements. A remote interface and bean
            implementation will need to be designed for this EJB.

        [[A]] DTOs - The DTOs will be used to serialize the state of the
        business objects between the EJB and client when using the remote
        interface. Remember that there can be more than 1 DTO to represent
        the same information related to a business object. For example,
        collections might contain summary information only
        and a single result might contain full details. The following is
        only provided as a reasonable starting point.

[../images/eDmv_dtos.jpg] eDmv Candidate DTOs

            [[a]] PersonDTO - This class is meant to hold the name
            of the Person. It will also have optional references to
            physical details and residence information. Note that the DTO
            might want to be limited to only the current residence as
            an example of how DTO and BO classes are different.

            [[a]] ResidenceDTO - This class is meant to hold start/end
            date and addressing information for a person.

            [[a]] PhysicalDetailsDTO - This class contains the physical
            description for a person.

            [[a]] VehicleRegistrationDTO - This class is meant to hold a
            vehicle registration information, including vehicle
            and owner information.

        [[A]] EAR - Create an EAR to host the eDmv server-side
        components; including the EJB component just developed.

        [[A]] Test - Create a Test project that will deploy the EAR to the
        application server and run through a set of JUnit test using the
        remote interface of the EJBs. 

===
    
    [[1]] Complete and test the eMayberry business logic using the remote
    interface of eDmv. The diagram below shows the business logic within
    the context of the EJB Tier implemented as a part of a separate
    requirement.

[../images/eMayberry_ejbtier.jpg] eMayberry Candidate Business Logic and EJB Tiers

        [[A]] PoiMgmt/PoiMgmtImpl - update this business logic
        interface and implementation to be able to obtain person
        description and residence information for persons of interest.
        This implementation may return the eDmv DTO classes if desired.

===

    [[1]] Create an EJB tier to host your eMayberry business logic and
    data access tiers. However, host this EJB tier within your eMayberry WAR. 
    The EJB(s) provided will have the
    necessary dependency injection and initialization for the business
    objects. Transaction scope will be added as a part of a separate
    requirement. Security will be added in the next project. The main
    construction, deployment, and remote interfaces of the EJB will be
    the focus of this requirement.  You will have to address the data
    that gets serialized to the client in a set of Data Transfer Objects
    (DTOs).

        [[A]] WAR - Create a WAR module to host the eMayberry server-side
        components and the remote tests for the WAR/EJB components.

        [[A]] EJBs - The EJBs will be used to inject and initialize
        implementation objects and provide a remote interface. Refer to
        the previous diagram for a view of the EJBs within the context
        of the business logic, DAOs, and eDmv remote interface. These 
        EJB classes should be hosted in the WAR module.

            [[a]] PoiMgmtEJB - this EJB will primarily host the
            PoiMgmtImpl business logic. A remote interface, local
            interface and bean implementation will need to be designed
            for this EJB.

            [[a]] MayberryTestUtilEJB - this support EJB will primarily
            host the MayberryTestUtilImpl business logic to support remote
            testing requirements. A remote interface, local interface
            and bean implementation will need to be designed for this EJB.

        [[A]] DTOs - The DTOs are be used to serialize the state of the
        business objects between the EJB and client when using the remote
        interface. However, with care, business objects can be directly
        used as DTOs. This specification shows us using this approach
        for eMayberry.  This is a design option and not a requirement.
        The EJB Tier will create new instances of the classes to clear
        them of any persistence provider classes before serializing them
        to the client. 

===

    [[1]] Add a Web UI to the eDmv application. This may use EJB local
    or remote interfaces. The WAR for the Web UI must be deployed
    as part of the eDmv EAR. The Web UI must have the following
    functionality. 

        * Test Admin

            * reset All tables

            * populate tables

        * DMV Tactical

            * add Driver

            * get Driver

            * move Residence

            * add Vehicle Registration

            * get Vehicle Registration

        * DMV Federated

            * get Driver By ID

            * get Driver By Name

            * get Vehicle Registration By Make/Model

            * get Vehicle Registration By Owner

===

    [[1]] Add a Web UI to the eMayberry application (i.e., to the WAR you
    have already created for the EJBs). This may use the EJB local or
    remote interfaces. The WAR for the Web UI must be deployed solo --
    containing the EJBs and Impls. The Web UI must have the following
    functionality.

        * Test Admin

            * reset All tables

            * populate tables

        * Mayberry Tactical

            * create Person of Interest

            * add Activity

            * get Person of Interest Information

            * check if Person of Interest is Dangerous

        * Mayberry Analytical

            * get Person of Interest Information

            * check if Person of Interest is Dangerous

===

    [[1]] Add transaction properties to the EJBs. 

        [[A]] Transaction Scope - all session bean methods in these two
        applications should require a transaction.

        [[A]] Transaction Integrity - add transaction rollback logic to
        EJBs that detect a move date for a residence is prior to the move-in 
        date.

        [[A]] Create a demonstration of
        transactions and the capability of rollback by implementing a
        scenario that adds something to the database and then a *follow-on*
        rollback causes the changes to be undone.

        [Note] To satisfy the transaction demonstration requirement, you
        must actually store something in the database and then later in
        the transaction roll it back based on some decision. If you make
        the decision before you store the information -- you are not
        satisfying the requirement. It is common for students to
        implement a wrapper around an existing method that takes a
        collection and populate the collection with good data up front
        and bad data at the end. The good data that got successfully
        processed should get rolled back once the bad data is
        processed. Create remote methods that can tell your RMI client
        that this actually occured.

        []

===
* Testing

    [[1]] Provide JUnit tests that verify the EJB functionality of
    eDmv accessed through its remote interface. This will also test the
    DTOs. These tests should be packaged in the eDmv RMI Test project.

    [[1]] Provide JUnit tests that verify the extra business logic
    functionality of eMayberry interfacing with eDmv. These tests may
    be placed either with the business logic project or where you 
    test the remote interfaces.

    [[1]] Provide JUnit tests that verify the EJB functionality of
    eMayberry accessed through its remote interface. This will also test
    its use of DTOs. Theses tests should be packaged in the eMayberry
    WAR (or optional RMI Test) project.

    [[1]] Perform an end-to-end use case to do the following. This must be 
    demonstrated in an automated JUnit test and then be manually
    implementable using the Web UI.
    
        [[a]] reset all eDmv tables (using the DmvTestUtilEJB)

        [[a]] populate the eDmv tables (using the DmvIngestor)

        [[a]] create a new Driver in eDmv (using the DriverMgmtEJB)

        [[a]] list Drivers, including the newly added Driver in eDmv (using
        the DriverMgmtEJB)

        [[a]] move Residence for a Driver in eDmv (using DriverMgmtEJB)

        [[a]] add a Vehicle Registration in eDmv (using VehcileMgmtEJB)

        [[a]] list Vehicle Registrations, including the newly created
        Vehicle Registration, in eDmv (using DriverMgmtEJB)

        [[a]] create a Person of Interest in eMayberry that matches
        someone in eDmv (using PoiMgmtEJB)

        [[a]] add an Activity for the Person of Interest in eMayberry
        (using PoiMgmtEJB)

        [[a]] search for the Person of Interest in eDmv (using
        PersonMgmtEJB). Optionally associate the identity of the
        correct information in eMayberry (using PoiMgmtEJB)

        [[a]] add a dangerous Activity for the Person of Interest in
        eMayberry (using PoiMgmtEJB)

    [Note:] To be clear. The above scenario should be both automated with a
    single JUnit test and then repeated with interactive Web UI actions. 
    It is suggested that you start by implementing the JUnit version
    first and then begin the Web UI in backwards sequence order 
    (i.e., implement the Web UI for "add dangerous activity" first),
    using a copy of the full JUnit implementation that you remove one
    step at a time.

* Getting Started

    The following sketch of directory structure can be used as a starting
    point for your overall application. It assumes you already have either
    a consolidated Impl -or- a BO, DAO, and BLImpl set of projects in
    place from Project 1. You will not have the option of consolidating
    the EJB, WAR, EAR, and RMI Test into a single project. They must be
    implemented as separate projects with proper dependencies between
    them declared.  Note that all "e"DataShare, "e"Dmv, and "e"Mayberry names
    should be changed to your specific name mangler. The same type of
    modification needs to occur for the java package names.

---
`-- eDataShare
    |-- eDmv
    |   |-- eDmvBO
    |   |-- eDmvDAO
    |   |-- eDmvBLImpl
    |   |-- eDmvEJB
    |   |   |-- pom.xml
    |   |   `-- src
    |   |       `-- main
    |   |           |-- java
    |   |           |   `-- emdv
    |   |           |       `-- ejb
    |   |           `-- resources
    |   |               `-- META-INF
    |   |                   |-- beans.xml
    |   |                   |-- persistence.xml
    |   |                   |-- (ejb-jar.xml)
    |   |                   `-- (jboss-ejb3.xml)
    |   |-- eDmvWAR
    |   |   |-- pom.xml
    |   |   `-- src
    |   |       `-- main
    |   |           |-- java
    |   |           |   `-- emdv
    |   |           |       `-- web
    |   |           |-- resources
    |   |           `-- webapp
    |   |               |-- WEB-INF
    |   |               |   |-- beans.xml
    |   |               |   |-- web.xml
    |   |               |   |-- (jboss-web.xml)
    |   |               |   `-- content
    |   |               `-- index.jsp
    |   |-- eDmvEAR
    |   |   `-- pom.xml
    |   |-- eDmvTest
    |   |   |-- pom.xml
    |   |   `-- src
    |   |       `-- test
    |   |           |-- java
    |   |           |   `-- emdv
    |   |           |       `-- ejbclient
    |   |           `-- resources
    |   |               `-- jndi.properties
    |   `-- pom.xml
    |-- eMayberry
    |   |-- (eMayberryImpl -- could be merged with WAR)
    |   |-- eMayberryWAR
    |   |   |-- pom.xml
    |   |   `-- src
    |   |       +-- main
    |   |       |   |-- java
    |   |       |   |   `-- emayberry
    |   |       |   |       +-- ejb
    |   |       |   |       `-- web
    |   |       |   |-- resources
    |   |       |   |   `-- META-INF
    |   |       |   |       |-- persistence.xml
    |   |       |   |       `-- (ejb-jar.xml)
    |   |       |   `-- webapp
    |   |       |       |-- WEB-INF
    |   |       |       |   |-- beans.xml
    |   |       |       |   |-- web.xml
    |   |       |       |   |-- (jboss-web.xml)
    |   |       |       |   |-- (jboss-ejb3.xml)
    |   |       |       |   `-- content
    |   |       |       `-- index.jsp
    |   |       `-- test
    |   |           |-- java
    |   |           |   `-- emayberry
    |   |           |       `-- ejbclient (*IT.java)
    |   |           `-- resources
    |   |               `-- jndi.properties
    |   `-- pom.xml
    `-- pom.xml
---


* Grading

    Your project will be graded on completeness and quality of product. In
    order for you to receive full credit in each area, it must be a)
    complete, b) done well, and c) tested.  The breakdown of grading 
    will be as follows:

        * README provided that describes where each requirement satisfied: 10pts

        * projects cleanly builds with Maven: 15pts

        * Project 1 functionality: 10pts

        * EJB Tier, remote interface, and EAR deployment: 25pts

        * WAR/EJB deployment: 15pts

        * Web UI integration: 15pts

        * Transactions: 10pts

    Each area will be judged according to the following breakdown. For
    areas where testing does not apply (e.g., README and build), those 
    points will be assigned to quality:

        * complete: 60%

        * quality of implementation supplied: 30%

        * testing: 10%

* Submission Guidelines

    Please follow the 
    {{{../../../coursedocs/projects.html#Submission_Guidelines}
    project submission guidelines}}
    posted in the course overview.
