<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-methods-membership">
    <title>Entity Manager Membership Methods</title>
    

    <section id="jpa-membership-contains">
        <title>contains()</title>
        <programlisting language="java"><![CDATA[
boolean contains(Object entity);
]]></programlisting>
        <itemizedlist spacing="compact">
            <listitem><para>Returns true if object is managed in the persistence context</para></listitem>
        </itemizedlist>                   
    </section>

    <section id="jpa-membership-clear">
        <title>clear()</title>
        <programlisting language="java"><![CDATA[
void clear();
]]></programlisting>
        <itemizedlist spacing="compact">
            <listitem><para>Clears all entities and queued changes from the persistence context</para></listitem>
            <listitem><para>All entities become detached</para></listitem>
        </itemizedlist>                   
    </section>

    <section id="jpa-membership-detach">
        <title>detach()</title>
        <programlisting language="java"><![CDATA[
em.persist(author);

//callers can detach entity from persistence context
log.debug("em.contains(author)="+em.contains(author));
log.debug("detaching author");
em.getTransaction().begin();
em.flush();
em.detach(author);
log.debug("em.contains(author)="+em.contains(author));
em.getTransaction().commit();

//changes to detached entities do not change database
author.setFirstName("foo");
em.getTransaction().begin();
em.getTransaction().commit();
Author author2 = em.find(Author.class, author.getId());
log.debug("author.firstName=" + author.getFirstName());
log.debug("author2.firstName=" + author2.getFirstName());
assertFalse("unexpected name change", 
        author.getFirstName().equals(author2.getFirstName()));
]]></programlisting>
        <programlisting language=""><![CDATA[
-em.contains(author)=true
-detaching author
-em.contains(author)=false
-author.firstName=foo
-author2.firstName=dr
]]></programlisting>
        <itemizedlist spacing="compact">
            <listitem><para>Detaches existing entity from persistence context</para></listitem>
            <listitem><para>Detach cascaded to CascadeType.DETACH and ALL relationships</para></listitem>
            <listitem><para>Subsequent changes to entity will not change database</para></listitem>
            <listitem><para>Portable use requires call to flush() prior to detach()</para></listitem>
            <listitem><para>New entities are ignored</para>
        <programlisting language="java"><![CDATA[
Author author = new Author();

log.debug("em.contains(author)="+em.contains(author));
log.debug("detaching author");
em.detach(author);
log.debug("em.contains(author)="+em.contains(author));
]]></programlisting>
        <programlisting language=""><![CDATA[
-em.contains(author)=false
-detaching author
-em.contains(author)=false
]]></programlisting>
            </listitem>
            <listitem><para>Detached entities are ignored</para>
        <programlisting language="java"><![CDATA[
Author author = new Author();
...
em.persist(author);
em.getTransaction().begin();
em.getTransaction().commit();

//detaching detached entity will be ignored
Author detached = new Author(author.getId());
log.debug("em.contains(author)="+em.contains(detached));
log.debug("detaching detached author");
em.detach(detached);
log.debug("em.contains(author)="+em.contains(detached));
]]></programlisting>
        <programlisting language=""><![CDATA[
-em.contains(author)=false
-detaching detached author
-em.contains(author)=false
]]></programlisting>
            </listitem>
        </itemizedlist>                   
    </section>
</chapter>
