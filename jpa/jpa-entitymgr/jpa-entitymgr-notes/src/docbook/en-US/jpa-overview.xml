<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-overview">
    <title>JPA Overview</title>
 
    
     <section id="jpa-overview-background">
        <title>Background</title>
        <itemizedlist spacing="compact">
            <listitem><para>Earlier versions of EJB Spec defined persistence as part of <code>javax.ejb.EntityBean</code></para></listitem>

            <listitem><para>JavaEE 5 moved persistence to its own specification</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Java Persistence API (JPA) version 1.0</para></listitem>
                    <listitem><para>javax.persistence</para></listitem>
                    <listitem><para>Ease of use API above JDBC</para></listitem>
                    <listitem><para>Fueled by the addition of @Annotations to the JavaSE language</para></listitem>
                    <listitem><para>Provides</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Object/Relational Mapping (ORM) Engine</para></listitem>
                            <listitem><para>Query Language (JPA-QL) - SQL-like - main carryover from EJB 2.x</para></listitem>
                        </itemizedlist>                   
                    </listitem>
                </itemizedlist>                   
            </listitem>

            <listitem><para>JavaEE 6 advanced specification</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Java Persistence API (JPA) version 2.0</para></listitem>
                    <listitem><para>More mapping capabilities</para></listitem>
                    <listitem><para>More entity manager capabilities</para></listitem>
                    <listitem><para>Standardization of properties</para></listitem>
                    <listitem><para>Criteria API</para></listitem>
                </itemizedlist>
            </listitem>

            <listitem><para>JavaEE 7 enhanced specification</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Java Persistence API (JPA) version 2.1</para></listitem>
                    <listitem><para>Converters - to convert attributes to/from DB types</para></listitem>
                    <listitem><para>Criteria API Bulk Updates - no longer tied to just queries</para></listitem>
                    <listitem><para>Stored Procedure Query support</para></listitem>
                    <listitem><para>Partial fetching of objects</para></listitem>
                    <listitem><para>...</para></listitem>
                </itemizedlist>
            </listitem>
            
            <listitem><para>JavaEE 8</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Java Persistence API (JPA) version 2.2</para></listitem>
                    <listitem><para>Streams - to fetch data from database in a stream versus batch</para></listitem>
                    <listitem><para>Date and Time API Support - eliminates need for converter</para></listitem>
                    <listitem><para>@Repeatable - no longer have to wrap repeated annotations within single wrapper</para></listitem>
                    <listitem><para>...</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>                   
    </section>

    <section id="jpa-overview-em">
        <title>EntityManager</title>
        <itemizedlist spacing="compact">
            <listitem><para>Replaced EJB 2.x Home Functionality</para></listitem>
            <listitem><para>Handles O/R Mapping to the database</para></listitem>
            <listitem><para>Provides APIs for</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Inserting into database</para></listitem>
                    <listitem><para>Updating entities in database</para></listitem>
                    <listitem><para>Finding and querying for entities in database</para></listitem>
                    <listitem><para>Removing entities from database</para></listitem>
                </itemizedlist>                   
            </listitem>
            <listitem><para>Provides caching</para></listitem>
            <listitem><para>Integrates with JTA transactions when on server-side</para></listitem>
            <listitem><para>Tightly integrated with JavaEE and EJB, but not coupled to it</para></listitem>
        </itemizedlist>                   
    </section>

    <section id="jpa-overview-entity">
        <title>Entity</title>
        <itemizedlist spacing="compact">
        
            <listitem><para>Plain Old Java Objects (POJOs)</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Nothing special happens when calling new()</para>
<programlisting language="java"><![CDATA[Author author = new Author();
]]></programlisting>
                    </listitem>
                    <listitem><para>From JPA perspective the above is a new/unmanaged entity</para></listitem>
                </itemizedlist>                   
            </listitem>

            <listitem>
                <para>Entity minimum requirements:</para>
        <programlisting language="java"><![CDATA[@javax.persistence.Entity
public class Author {
    @javax.persistence.Id
    private long id;

    private String firstName;
    private String lastName;
    private String subject;
    private Date publishDate;
    
    public Author() {
    }
    ...
}]]></programlisting>
                <itemizedlist spacing="compact">
                    <listitem><para>Annotated as an Entity or declared in an orm.xml</para></listitem>
                    <listitem><para>Unique identity (form primary key(s))</para></listitem>
                    <listitem><para>Public default constructor</para></listitem>
                </itemizedlist>                   
            </listitem>            
            
            <listitem><para>Persistent when associated with an entity manager/persistence context</para>
        <programlisting language="java"><![CDATA[em.persist(author);        
]]></programlisting>
            </listitem>
        </itemizedlist>                   
    </section>
    
    <section id="jpa-overview-example">
        <title>JPA Example</title>
        <programlisting language="java"><![CDATA[
Author author = new Author();
author.setFirstName("dr");
author.setLastName("seuss");
author.setSubject("children");
author.setPublishDate(new Date());
logger.debug("creating author: {}", author);
assertEquals("unexpected initialized id", 0, author.getId());

logger.debug("em.contains(author)={}", em.contains(author));
assertFalse("author managed", em.contains(author));

em.persist(author);
logger.debug("created author: {}", author);        
logger.debug("em.contains(author)={}", em.contains(author));
assertNotEquals("missing id", 0, author.getId());
assertTrue("author not managed", em.contains(author));
]]></programlisting>

        <programlisting language=""><![CDATA[
-creating author:ejava.examples.daoex.bo.Author@1d8e9e, id=0, 
    fn=dr, ln=seuss, subject=children, pdate=Mon Sep 17 00:22:25 EDT 2012, version=0
-em.contains(author)=false
-created author:ejava.examples.daoex.bo.Author@1d8e9e, id=50, 
    fn=dr, ln=seuss, subject=children, pdate=Mon Sep 17 00:22:25 EDT 2012, version=0
-em.contains(author)=true
]]></programlisting>
    </section>


    <section id="jpa-overview-entity-state">
        <title>Entity States</title>
        
        <section id="jpa-entity-state-attached">
            <title>Managed</title>
            <itemizedlist spacing="compact">
                <listitem><para>Associated with persistence context</para></listitem>
                <listitem><para>Has identity</para></listitem>
                <listitem><para>Changes to the entity will impact the database</para></listitem>
                <listitem><para>Method <code>em.contains(entity)</code> returns true</para></listitem>
            </itemizedlist>                   
        </section>

        <section id="jpa-entity-state-detached">
            <title>Detached</title>
            <itemizedlist spacing="compact">
                <listitem><para>Has identity but not associated with persistence context</para></listitem>
                <listitem><para>Changes to entity will not impact the database</para></listitem>
                <listitem><para>Method <code>em.contains(entity)</code> returns false</para></listitem>
                <listitem><para>An entity becomes detached when:</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>Has not yet been persisted</para></listitem>
                        <listitem><para>After a transaction-scoped transaction is committed</para></listitem>
                        <listitem><para>After a transaction rollback &lt;-- remember this in your error logic</para></listitem>
                        <listitem><para>Manually detaching entity from persistence context thru <code>em.detach()</code></para></listitem>
                        <listitem><para>Manually clearing the persistence context thru <code>em.clear()</code></para></listitem>
                        <listitem><para>Closing EntityManager</para></listitem>
                        <listitem><para>Serializing entity thru a remote interface</para></listitem>
                    </itemizedlist>                   
                </listitem>
            </itemizedlist>                   
        </section>
    </section>



 
     <section id="jpa-overview-persistencecontext">
        <title>Persistence Context</title>
        <itemizedlist spacing="compact">
            <listitem><para>A set of managed instances managed by an EntityManager</para></listitem>
            <listitem><para>All entities become detached once closed</para></listitem>
            <listitem><para>Two types:</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Extended</para>
                                <programlisting language="java"><![CDATA[
Author author = new Author();
...
em.persist(author);
em.getTransaction().begin();
em.getTransaction().commit();

author.setFirstName("foo");
em.getTransaction().begin();
em.getTransaction().commit();

em.getTransaction().begin();
author.setFirstName("bar");
em.getTransaction().commit();
]]></programlisting>
                        <itemizedlist spacing="compact">
                            <listitem><para>Live beyond a single transaction</para></listitem>
                            <listitem><para>Allow long-lived algorithms to process without tying up a database transaction</para></listitem>
                        </itemizedlist>

                    
                    </listitem>
                    <listitem><para>Transaction-Scoped</para>
                        <programlisting language="java"><![CDATA[
@TransactionAttribute(TransactionAttributeType.REQUIRED)
public Author createAuthor(...) {
    Author author = new Author();
    ...
    em.persist(author);
    return author;
}
]]></programlisting>
                        <itemizedlist spacing="compact">
                            <listitem><para>Begin/end at transaction boundaries</para></listitem>
                            <listitem><para>Injected by containers</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>                   
            </listitem>
        </itemizedlist>                   
    </section>


    <section id="jpa-overview-pu">
        <title>Persistence Unit</title>
        <itemizedlist spacing="compact">
            <listitem><para>A set of classes that are mapped to the database</para></listitem>
            <listitem><para>Defined in META-INF/persistence.xml</para></listitem>
            <listitem><para>Entity classes may be named in persistence.xml or searched for</para></listitem>
            <listitem><para>Entity mapping may be provided, augmented, or overridden with <code>orm.xml</code> mapping file</para></listitem>
        </itemizedlist>                   
    </section>

    <section id="jpa-overview-layout">
        <title>Example Layout</title>
        <programlisting language=""><![CDATA[
|-- ejava
|   `-- examples
|       `-- daoex
|           |-- bo
|           |   `-- Author.class
|           |-- dao
|           |   |-- AuthorDAO.class
|           |   `-- DAOException.class
|           `-- jpa
|               `-- JPAAuthorDAO.class
`-- META-INF
    |-- orm.xml
    `-- persistence.xml
]]></programlisting>
    </section>

    <section id="jpa-overview-persistencexml">
        <title>Persistence.xml</title>
        
        
        <section id="jpa-overview-persistencexml-app">
                <title>Application Example</title>
            <programlisting language="xml"><![CDATA[<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence 
                      http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd" 
  version="2.1">

    <persistence-unit name="jpaDemo">
        <provider>org.hibernate.ejb.HibernatePersistence</provider>
        <mapping-file>META-INF/orm.xml</mapping-file>
        <properties>
            <!-- standard properties -->
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:./target/h2db/ejava"/>
            <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/>

            <!-- hibernate-specific properties -->
            <property name="hibernate.dialect" value="org.hibernate.dialect.H2Dialect"/>
            <property name="hibernate.show_sql" value="true"/>
            <property name="hibernate.format_sql" value="true"/>
            <!-- set to 0 to improve error messages when needed
            <property name="hibernate.jdbc.batch_size" value="0"/>            
             -->
        </properties>
    </persistence-unit>
</persistence>
]]></programlisting>
            <para>The above example:</para>
            <itemizedlist spacing="compact">
                <listitem><para>defines properties for EntityManager to establish physical connections to database</para></listitem>
                <listitem><para>this form of connection management only occurs for 2-tier thin clients (e.g., unit tests)</para></listitem>
                <listitem><para>not a good place for potentially changing or sensitive property values</para></listitem>
            </itemizedlist>

            <note>
                <title>Persistence Unit properties can be supplied at runtime</title>
                <para>We can alternatively supply and override all the properties from 
                the META-INF/persistence.xml at runtime if we control the creation 
                of the EntityManagerFactory</para>
            </note>
        </section>

        <section id="jpa-overview-persistencexml-server">
                <title>Server Example</title>
            <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence 
                      http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"
  version="2.1">

    <persistence-unit name="ejbsessionbank">
        <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
        <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
        <jar-file>lib/info.ejava.examples.ejb-ejbsessionBankImpl-5.0.0-SNAPSHOT.jar</jar-file>
        <properties>
            <property name="hibernate.dialect"
                value="org.hibernate.dialect.H2Dialect"/>
            <property name="hibernate.show_sql" value="false"/>
            <!-- create is used here for demo project only -->
            <property name="hibernate.hbm2ddl.auto" value="create"/>
            <!--
            <property name="hibernate.jdbc.batch_size" value="0"/>
            -->
        </properties>
    </persistence-unit>
</persistence>

]]></programlisting>
            <para>The above example:</para>
            <itemizedlist spacing="compact">
                <listitem><para>uses a DataSource from JNDI tree to obtain connections to database</para></listitem>
                <listitem><para>references entity classes in a separate archive through a relative path using <code>jar-file</code></para></listitem>
                <listitem><para>supplies references to resources that are fairly stable in value and non-sensitive</para></listitem>
            </itemizedlist>
        </section>


        <section id="jpa-overview-hibernate-properties">
            <title>Optional hibernate.properties</title>
            <itemizedlist spacing="compact">
                <listitem><para>Can be used to specify connection properties outside of persistence.xml</para></listitem>
                <listitem><para>Useful in separating production mapping information from runtime connection properties</para></listitem>
            </itemizedlist>                   
            <programlisting language=""><![CDATA[#hibernate-specific alternate source of persistence.xml properties 
hibernate.connection.url=jdbc:h2:./target/h2db/ejava
hibernate.connection.driver_class=org.h2.Driver
hibernate.connection.password=
hibernate.connection.username=sa

hibernate.dialect=org.hibernate.dialect.H2Dialect
hibernate.show_sql=true
hibernate.format_sql=true
#hibernate.jdbc.batch_size=0
            ]]></programlisting>
            
        <tip>
            <title>Use the hibernate form of properties in hibernate.properties</title>
            <para>
                Even though one can specify properties within the persistence.xml#persistence-unit
                or hibernate.properties file, they are not always the same. If you use the 
                hibernate.properties file to specify the url, driver, and credentials -- always
                use the hibernate form of the name to avoid stumbling on the cases where hibernate
                fails to look for the javax.persitence form of the name for 
                properties coming from the hibernate.properties file.
            </para>
        </tip>
        </section>
        
        <section id="jpa-overview-ormxml">
            <title>Sample orm.xml</title>
            <itemizedlist spacing="compact">
                <listitem><para>referenced by the persistence.xml</para></listitem>
                <listitem><para>supplies mapping metadata for the entities that are either not annotated or overriding the annotations</para></listitem>
                <listitem><para>each entity or group of entities within the same persistence unit can be defined in separate files</para></listitem>
            </itemizedlist>
            
            <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd" 
    version="2.1">
    
    <entity class="ejava.examples.daoex.bo.Author" 
            access="FIELD"
            metadata-complete="false"
            name="jpaAuthor">
        <table name="DAO_AUTHOR"/>
        <attributes>
            <id name="id">
                <generated-value strategy="SEQUENCE" 
                    generator="AUTHOR_SEQUENCE"/>                
            </id>
        </attributes>
    </entity>
</entity-mappings>
]]></programlisting>
        </section>

        
        <section id="jpa-overview-persistencexml-elements">
            <title>persistence.xml Elements</title>

            <variablelist>
                <varlistentry>
                    <term><filename>name</filename></term>
                    <listitem><para>Identity used to reference persistence unit</para></listitem>
                </varlistentry>
                
                <varlistentry>
                    <term><filename>provider</filename></term>
                    <listitem><para>Fully qualified name of javax.persistence.PersistenceProvider</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Not needed if provider is in classpath</para></listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                
                <varlistentry>
                    <term><filename>mapping-file</filename></term>
                    <listitem><para>Path reference to an <code>orm.xml</code> mapping file</para></listitem>
                </varlistentry>
                
                <varlistentry>
                    <term><filename>jta-data-source</filename></term>
                    <listitem><para>JNDI path of a JTA javax.sql.DataSource</para></listitem>
                </varlistentry>
                
                <varlistentry>
                    <term><filename>non-jta-datasource</filename></term>
                    <listitem><para>JNDI path of a RESOURCE_LOCAL javax.sql.DataSource</para></listitem>
                </varlistentry>
                
                <varlistentry>
                    <term><filename>jarfile</filename></term>
                    <listitem><para>Reference to an archive with entity classes</para></listitem>
                </varlistentry>
                
                <varlistentry>
                    <term><filename>class</filename></term>
                    <listitem><para>Fully qualified package name of entity class</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>One source of entity information</para></listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
                
                <varlistentry>
                    <term><filename>exclude-unlisted-classes</filename></term>
                    <listitem><para>If set, provider will not scan to discover entity classes</para></listitem>
                </varlistentry>
                
                <varlistentry>
                    <term><filename>properties</filename></term>
                    <listitem><para>name/value property pairs to express additional configuration info</para></listitem>
                </varlistentry>
            </variablelist>
        </section>
        
        
        <section id="jpa-overview-entity-discover">
            <title>Entity Discovery</title>
            <itemizedlist spacing="compact">
                <listitem><para>Classes with @Entity annotation</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>In persistence.xml's JAR file</para></listitem>
                        <listitem><para>Contained in any JAR listed in persistence.xml#jar-file element</para></listitem>
                    </itemizedlist>                   
                </listitem>
                                
                <listitem><para>Classes mapped</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>With a META-INF/orm.xml file</para></listitem>
                        <listitem><para>With custom mapping files</para></listitem>
                    </itemizedlist>                   
                </listitem>
                
                <listitem><para>Classes listed in persistence.xml#class element</para></listitem>
            </itemizedlist>                   
        </section>
        
    </section>
    
    <section id="jpa-overview-schemagen">
        <title>Schema Generation</title>
        <variablelist spacing="compact">
            <varlistentry>
                <term><filename>Database schema generation</filename></term>
                <listitem><para>Live database used by EntityManager has been prepared for persistence at runtime</para></listitem>
                <listitem><para>Useful for demos and tutorials</para></listitem>
                <listitem><para>Not an option for production</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>Script schema generation</filename></term>
                <listitem><para>Database schema commands written without changing the database</para></listitem>
                <listitem><para>Useful in debugging "what does the provider think I am modeling?"</para></listitem>
                <listitem><para>Good starting source script to author database migration scripts from</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>Vendor-specific option</filename></term>
                <listitem><para>Persistence provider is required to provide schema-generation capability</para></listitem>
                <listitem><para>Likely has for years through a proprietary interface</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>javax.perisistance option</filename></term>
                <listitem><para>Standard interface added in JPA 2.1 for requesting schema generation</para></listitem>
            </varlistentry>
      </variablelist>

        <section id="jpa-overview-schemagen-hbm2ddl-database">
            <title>Hibernate DDL Generation Example
              <footnote id="jpa-overview-schemagen-hbm2ddl-ref"><para>
                  <ulink url="https://docs.jboss.org/hibernate/orm/5.0/manual/en-US/html/ch03.html#configuration-optional">HBM2DDL Docs</ulink></para>
              </footnote>
            </title>            
            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>hibernate.hbm2ddl.auto</filename></term>
                    <listitem><para>Controls hibernate schema generation</para></listitem>                    
                    <listitem><para>create, drop, create-drop, update, validate, and none</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>hibernate.hbm2ddl.import_files</filename></term>
                    <listitem><para>Allows for self-authored files to be used as well</para></listitem>
                </varlistentry>
            </variablelist>

            <itemizedlist spacing="compact">
                <listitem><para>Expressed thru hibernate.properties using hibernate.hbm2ddl properties</para>
<programlisting language="java"><![CDATA[hibernate.hbm2ddl.auto=create-drop

hibernate.hbm2ddl.import_files=/ddl/mydb-tuningdrop.ddl,/ddl/mydb-tuning.ddl
hibernate.connection.url=${jdbc.url}
hibernate.connection.driver_class=${jdbc.driver}
hibernate.connection.username=${jdbc.user}
hibernate.connection.password=${jdbc.password}
#hibernate.show_sql=true
#hibernate.format_sql=true
]]></programlisting>
                </listitem>
                <listitem><para>Can be expressed thru persistence.xml but use standard properties instead to avoid confusion</para>
                </listitem>                
            </itemizedlist>
        </section>
                
        <section id="jpa-overview-schemagen-javaxp-database">
            <title>javax.persistence Schema Generation
              <footnote id="jpa-overview-schemagen-javaxp-database"><para>
                  <ulink url="https://docs.oracle.com/javaee/7/tutorial/persistence-intro005.htm">javax.persistence schema generation docs</ulink></para>
              </footnote>            
            </title>

            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>javax.persistence.schema-generation.database.action</filename></term>
                    <listitem><para>Values: drop-and-create, drop, create, none</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>javax.persistence.schema-generation.create-source</filename></term>
                    <listitem><para>Values: metadata (default), script, metadata-then-script, script-then-metadata</para></listitem>
                    <listitem><para>javax.persistence.schema-generation.create-script-source - provides reference to create source</para></listitem>
                    <listitem><para>javax.persistence.schema-generation.drop-script-source - provides reference to drop source</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>javax.persistence.sql-load-script-source</filename></term>
                    <listitem><para>Provides reference to script to execute after schema initialized</para></listitem>
                    <listitem><para>Useful in Pre-populating sample database tables with content</para></listitem>
                </varlistentry>
            </variablelist>


            <itemizedlist spacing="compact">
                <listitem><para>Database schema generation example</para>
<programlisting language="xml"><![CDATA[<persistence-unit name="jpa-schemagen-test">
    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
    <properties>
        <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
        
        <!-- a database connection definition is required for database actions -->
        <property name="javax.persistence.jdbc.url" value="${jdbc.url}"/>
        <property name="javax.persistence.jdbc.driver" value="${jdbc.driver}"/>
        <property name="javax.persistence.jdbc.user" value="${jdbc.user}"/>
        <property name="javax.persistence.jdbc.password" value="${jdbc.password}"/>
    </properties>
</persistence-unit>]]></programlisting>
                </listitem>
                
                <listitem><para>Script schema generation example</para>
<programlisting language="xml"><![CDATA[<persistence-unit name="jpa-schemagen-test">
    <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider>
    <properties>
        <!-- a script file containing create and drop commands will be generated without interacting with database --> 
        <property name="javax.persistence.schema-generation.scripts.action" value="drop-and-create"/>
        <property name="javax.persistence.schema-generation.scripts.create-target" value="${project.build.outputDirectory}/ddl/${project.artifactId}-create.ddl"/>
        <property name="javax.persistence.schema-generation.scripts.drop-target" value="${project.build.outputDirectory}/ddl/${project.artifactId}-drop.ddl"/>

        <!-- otherwise we would get 1 line per statement without standard delimiter character -->
        <property name="hibernate.format_sql" value="true"/>
        <property name="hibernate.hbm2ddl.delimiter" value=";"/>
        <!-- required when no database connection specified -->
        <property name="hibernate.dialect" value="${hibernate.dialect}"/>
    </properties>    
</persistence-unit>]]></programlisting>

                  <itemizedlist spacing="compact">
                      <listitem><para>Scripts written to target files</para>
<programlisting language=""><![CDATA[target/classes/ddl/
|-- jpa-schemagen-create.ddl
`-- jpa-schemagen-drop.ddl
]]></programlisting>
                      </listitem>
                      <listitem><para>Create script contains commands to create schema</para>
<programlisting language="java"><![CDATA[create sequence hibernate_sequence start with 1 increment by 1;

create table JPAUTIL_TABLET (
   id integer not null,
    maker varchar(255),
    primary key (id)
);]]></programlisting>
                      </listitem>
                      <listitem><para>Drop script contains commands to drop schema</para>
<programlisting language="java"><![CDATA[drop table JPAUTIL_TABLET if exists;

drop sequence if exists hibernate_sequence;
]]></programlisting>
                      </listitem>
                  </itemizedlist>


                </listitem>
            </itemizedlist>
        </section>

    </section>


    <section id="jpa-overview-steps">
        <title>Basic Testing Usage Steps</title>
        <itemizedlist spacing="compact">
            <listitem><para>Test Setup -- These actions occur outside of the individual @Test methods
            and normally not within the business and DAO logic. This is the kind of activity the 
            server-side container will primarily take care of.</para>
            
            
                <itemizedlist spacing="compact">
                    <listitem><para>Create single EntityManagerFactory to share across multiple EntityManagers</para>
                    <programlisting language="java"><![CDATA[
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class MyJPATest {
    private static EntityManagerFactory emf;
    private EntityManager em;

	@BeforeClass
	public static void setUpClass() {
	    emf = Persistence.createEntityManagerFactory("jpaDemo");
    }]]></programlisting>
                    </listitem>

                    <listitem><para>Create EntityManager before each test</para>
                    <programlisting language="java"><![CDATA[	@Before
	public void setUp() throws Exception {
	    em = emf.createEntityManager();
    }]]></programlisting>
                    </listitem>
                </itemizedlist>                   
            </listitem>

            <listitem><para>Runtime -- These actions occur either within the @Test or in
            the DAO under test. However, business and DAO logic rarely 
            interact with the transaction calls. Transaction control is the job of the 
            container and under the configuration of the server-side EJB. Think of 
            a JUnit TestCase and @Test as being a simulated replacement for the 
            container and EJB configuration so that we can test the business and DAO logic.</para>
            
                <itemizedlist spacing="compact">
                    <listitem><para>Start Transaction - this is the role of the container</para>
                    <programlisting language="java"><![CDATA[em.getTransaction().begin();
]]></programlisting>
                    </listitem>

                    <listitem><para>Interact with EntityManager - this is the role of the DAO</para>
                    <programlisting language="java"><![CDATA[em.persist(author);
]]></programlisting>
                    </listitem>

                    <listitem><para>Commit or Rollback Transaction - this is the role of the container</para>
                    <programlisting language="java"><![CDATA[em.getTransaction().commit();
-or-
em.getTransaction().rollback();
]]></programlisting>
                    </listitem>
                </itemizedlist>                   
            </listitem>
            
            <listitem><para>Clean up</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Close EntityManager after each test</para>
                    <programlisting language="java"><![CDATA[    @After
    public void tearDown() throws Exception {
	    if (em != null) { 
	        em.close(); 
	        em=null;
	    }
    }]]></programlisting>
                    </listitem>

                    <listitem><para>Close EntityManagerFactory after all tests</para>
                    <programlisting language="java"><![CDATA[	@AfterClass
	public static void tearDownClass() {
	    if (emf != null) {
	        emf.close();
	        emf=null;
	    }
	}]]></programlisting>
                    </listitem>
                </itemizedlist>                   
            </listitem>
        </itemizedlist>
        <tip>
            <title>Check for initialization in @After/@AfterClass before closing</title>
            <para>It is always good to try to keep @After or @AfterClass lifecycle methods
            from throwing sloppy exceptions (e.g., NullPointerException). These lifecycle methods
            get called whether the test is passing, failing, or even failed to fully initialize.
            If the @After or @AfterClass lifecycle methods throw an exception during cleanup
            after an exception -- their error will mask the real error and add confusion
            to the test results. Start each of these methods with a check of whether the 
            sibling @BeforeClass or @Before lifecycle methods initialized what this method
            is trying to shutdown. 
            </para>
        </tip>            
    </section>
    
    
 
    
    <section id="jpa-overview-methods">
        <title>Entity Manager Methods</title>
        <programlisting language=""><![CDATA[
public interface javax.persistence.EntityManager{
...
}
        ]]></programlisting>

        <section id="jpa-overview-methods-crud">
            <title>Basic CRUD Operations</title>
           <programlisting language="java"><![CDATA[
void persist(Object entity);
<T> T find(Class<T> entityClass, Object primaryKey);
<T> T find(Class<T> entityClass, Object primaryKey, Map<String, Object> properties);
<T> T merge(T entity);
void remove(Object entity);
<T> T getReference(Class<T> entityClass, Object primaryKey);
            ]]></programlisting>
        </section>

        <section id="jpa-overview-methods-membership">
            <title>Membership Operations</title>
           <programlisting language="java"><![CDATA[
void clear();
void detach(Object entity);
boolean contains(Object entity);
            ]]></programlisting>
        </section>

        <section id="jpa-overview-methods-sync">
            <title>State Synchronization Operations</title>
           <programlisting language="java"><![CDATA[
void flush();
void setFlushMode(javax.persistence.FlushModeType);
javax.persistence.FlushModeType getFlushMode();
void refresh(Object);
void refresh(Object, java.util.Map);
            ]]></programlisting>
        </section>

        <section id="jpa-overview-methods-locking">
            <title>Locking Operations</title>
           <programlisting language="java"><![CDATA[
void lock(Object entity, javax.persistence.LockModeType);
void lock(Object entity, javax.persistence.LockModeType, Map<String, Object> properties);
<T> T find(Class<T> entityClass, Object primaryKey, javax.persistence.LockModeType);
<T> T find(Class<T> entityClass, Object primaryKey, javax.persistence.LockModeType, Map<String, Object> properties);
void refresh(Object, javax.persistence.LockModeType);
void refresh(Object, javax.persistence.LockModeType, Map<String, Object> properties);
javax.persistence.LockModeType getLockMode(Object entity);
            ]]></programlisting>
        </section>
        
        <section id="jpa-overview-methods-query">
            <title> Query Operations</title>
           <programlisting language="java"><![CDATA[
javax.persistence.Query createQuery(String jpaql);
<T> javax.persistence.TypedQuery<T> createQuery(String jpaql, Class<T> resultClass);
javax.persistence.Query createNamedQuery(String name);
<T> javax.persistence.TypedQuery<T> createNamedQuery(String name, Class<T> resultClass);
javax.persistence.Query createNativeQuery(String sql);
javax.persistence.Query createNativeQuery(String sql, Class resultClass);
javax.persistence.Query createNativeQuery(String sql, String resultMapping);
<T> javax.persistence.TypedQuery<T> createQuery(javax.persistence.criteria.CriteriaQuery<T> criteria);
javax.persistence.criteria.CriteriaBuilder getCriteriaBuilder();
            ]]></programlisting>
        </section>

        <section id="jpa-overview-methods-other">
            <title>Other Operations</title>
           <programlisting language="java"><![CDATA[
void close();
boolean isOpen();
javax.persistence.EntityTransaction getTransaction();
void joinTransaction();
void setProperty(String key, Object value);
java.util.Map getProperties();
<T> T unwrap(Class<T> clazz);
Object getDelegate();
javax.persistence.metamodel.Metamodel getMetamodel();
javax.persistence.EntityManagerFactory getEntityManagerFactory();
            ]]></programlisting>
        </section>
    </section>

</chapter>
  
