<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-relationex-setup">
    <title>JPA Entity Exercise Setup</title>
        
    <section id="jpa-relationex-setup-maven">
        <title>Setup Maven Project</title>
        <para>The setup for this exercise will use a maven archetype process to build you the 
           shell of a JPA module to perform these exercises. The module can be created
           anywhere, but if you create it within a directory that already has a pom.xml,
           the archetype will attempt to integrate the new module as a sub-module of the 
           existing parent.</para>

            <para>
                <ulink type="video" url="https://www.youtube.com/watch?v=Yv2xctJxE-w&amp;list=PL4AFF701184976B25">TEST YOUTUBE LINK</ulink>
            </para>
          

        <itemizedlist spacing="compact">
            <listitem><para>Add the following to your .m2/settings.xml file. This will allow you to 
                resolve the exercise archetype and set a default database for the exercise.</para>
                
<programlisting language=""><![CDATA[
    <profiles>
       <profile>
            <id>webdev-repositories</id>
            <repositories>
                <repository>
                    <id>webdev-baseline</id>
                    <name>webdev.apl.jhu.edu baseline</name>
                    <url>http://webdev.apl.jhu.edu/~jcs/maven2</url>
                </repository>
                <repository>
                    <id>webdev-snapshot</id>
                    <name>webdev.apl.jhu.edu SNAPSHOT</name>
                    <url>http://webdev.apl.jhu.edu/~jcs/maven2-snapshot</url>
                    <snapshots>
                        <enabled>true</enabled>
                        <updatePolicy>daily</updatePolicy>
                    </snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>webdev-plugins</id>
                    <name>ejava webdev repository</name>
                    <url>http://webdev.apl.jhu.edu/~jcs/maven2</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>
    </profiles>
    <activeProfiles>
        <activeProfile>h2db</activeProfile>
        <!--
        <activeProfile>h2srv</activeProfile>
        -->
    </activeProfiles>
]]></programlisting>                        
            </listitem>
        
            <listitem><para>Use the ejava.jpa:jpa-archetype to setup a new Maven project for this exercise.
                Activate the webdev-repositories profile (-Pwebdev-repositories) so that you can resolve
                the archetype off the Internet.</para>
 <programlisting language=""><![CDATA[
$ mvn archetype:generate -B \
-DarchetypeGroupId=ejava.jpa -DarchetypeArtifactId=jpa-archetype \
-DgroupId=myorg.relex -DartifactId=relationEx \
-Pwebdev-repositories

...
[INFO] Scanning for projects...
...
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Archetype: jpa-archetype:3.0.2013.1-SNAPSHOT
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: myorg.relex
[INFO] Parameter: artifactId, Value: relationEx
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: package, Value: myorg.relex
[INFO] Parameter: packageInPathFormat, Value: myorg/relex
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] Parameter: package, Value: myorg.relex
[INFO] Parameter: groupId, Value: myorg.relex
[INFO] Parameter: artifactId, Value: relationEx
[INFO] Parent element not overwritten in /home/jcstaff/workspaces/ejava-javaee/git/jpa/jpa-relation/relationEx/pom.xml
[INFO] project created from Archetype in dir: /home/jcstaff/workspaces/ejava-javaee/git/jpa/jpa-relation/relationEx
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
]]></programlisting>
            </listitem>
            <listitem><para>You should now have an instantiated template for a JPA project</para>
<programlisting language=""><![CDATA[
relationEx/
├── pom.xml
└── src
    ├── main
    │   └── java
    │       └── myorg
    │           └── relex
    │               └── Auto.java
    └── test
        ├── java
        │   └── myorg
        │       └── relex
        │           └── AutoTest.java
        └── resources
            ├── hibernate.properties
            ├── log4j.xml
            └── META-INF
                └── persistence.xml
]]></programlisting>                        
            </listitem>        
            <listitem><para>Verify the instantiated template builds in your environment</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Activate the h2db profile (and deactivate the h2srv profile) to use an embedded file as your database.
                        This option does not require a server but is harder to inspect database state in between tests.</para>
<programlisting language=""><![CDATA[
relationEx]$ mvn clean test -Ph2db -P\!h2srv
...
 -HHH000401: using driver [org.h2.Driver] at URL [jdbc:h2:/home/jcstaff/workspaces/ejava-javaee/git/jpa/jpa-relation/relationEx/target/h2db/ejava]
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
]]></programlisting>                        
                    </listitem>

                    <listitem><para>Start your database server</para>
<programlisting language=""><![CDATA[
$ java -jar M2_REPO/com/h2database/h2/1.3.168/h2-1.3.168.jar
]]></programlisting>                        
                    </listitem>

                    <listitem><para>Activate the h2srv profile (and deactivate the h2db profile) to use a running H2 database server.
                        This option provides more interaction with your database but does require the server to be running.</para>
<programlisting language=""><![CDATA[
relationEx]$ mvn clean test -P\!h2db -Ph2srv
...
 -HHH000401: using driver [org.h2.Driver] at URL [jdbc:h2:tcp://127.0.0.1:9092/h2db/ejava]
...
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
]]></programlisting>                        
                    </listitem>

                </itemizedlist>
            </listitem>
            <listitem><para>You may now import the instantiated template into Eclipse as an "Existing Maven Project"</para>
            </listitem>

                <listitem><para>Put the following Junit test case in your src/test tree</para>
<programlisting language="java"><![CDATA[
package myorg.relex;

import javax.persistence.*;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.*;

public class JPATestBase {
    private static Log log = LogFactory.getLog(JPATestBase.class);
    private static final String PERSISTENCE_UNIT = "relationEx-test";
    private static EntityManagerFactory emf;
    protected EntityManager em;    

    @BeforeClass
    public static void setUpClass() {
        log.debug("creating entity manager factory");
        emf = Persistence.createEntityManagerFactory(PERSISTENCE_UNIT);
    }
    
    @Before
    public void setUp() throws Exception {
        log.debug("creating entity manager");
        em = emf.createEntityManager();
        cleanup();
        em.getTransaction().begin();
    }

    @After
    public void tearDown() throws Exception {
        try {
            log.debug("tearDown() started, em=" + em);
            if (!em.getTransaction().isActive()) {
                em.getTransaction().begin();
                em.getTransaction().commit();            
            } else if (!em.getTransaction().getRollbackOnly()) {
                em.getTransaction().commit();                           
            } else {
                em.getTransaction().rollback();
            }
            em.close();
            log.debug("tearDown() complete, em=" + em);
        }
        catch (Exception ex) {
            log.fatal("tearDown failed", ex);
            throw ex;
        }
     }
    
    @AfterClass
    public static void tearDownClass() {
        log.debug("closing entity manager factory");
        if (emf!=null) { emf.close(); }
    }
    
    public void cleanup() {
        em.getTransaction().begin();
        em.getTransaction().commit();
    }

    protected EntityManager createEm() {
        return emf.createEntityManager();
    }
}
]]></programlisting>                        
                </listitem>
            
        </itemizedlist>

    </section>
</chapter>
  
