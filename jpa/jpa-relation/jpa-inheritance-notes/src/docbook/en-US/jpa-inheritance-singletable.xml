<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-inheritance-singletable">
    <title>Inheritance Strategy: Single Table</title>

    <section id="jpa-inheritance-singletable-overview">
        <title>Single Table Strategy Overview</title>
        <figure>
            <title>Single Table Inheritance Strategy</title>
            <graphic scale="100" fileref="images/jpa-inheritance-singletable.png"/>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Advantages</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Simplest to implement</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Single table to administer</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Performs better than other inheritance strategies</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>No complex joins</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Disadvantages</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Unused fields when sub-types have unique properties</para></listitem>
                    <listitem><para>Sub-type columns must be nullable</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Harder to enforce constraints within database</para></listitem>
                            <listitem><para>SQL "check" constraint can help</para>
<programlisting language=""><![CDATA[check(TYPE != 'BREAD_TYPE' or (BAKEDON is not null and SLICES is not null))
check(TYPE != 'Soup' or (SOUPTYPE is not null and EXPIRATION is not null)]]></programlisting>                        
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Not normalized</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>More suitable for hierarchies with sub-types that...</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Differ primarily in behavior only</para></listitem>
                    <listitem><para>Do not have unique data requirements</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="jpa-inheritance-singletable-schema">
        <title>Single Table Example Database Schema</title>

        <figure>
            <title>Single Table Example Database Schema</title>
<programlisting language=""><![CDATA[create table ORMINH_PRODUCT (
    PTYPE varchar(32) not null,
    id bigint generated by default as identity,
    cost double not null,
    expiration date,
    SOUPTYPE varchar(16),
    bakedOn date,
    slices integer,
    primary key (id)
)]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Single table</para></listitem>
            <listitem><para>No joins</para></listitem>
            <listitem><para>Unused columns</para></listitem>
        </itemizedlist>
    </section>

    <section id="jpa-inheritance-singletable-mapping">
        <title>Single Table Example Java Mapping</title>

        <figure>
            <title>Single Table Example Java Mapping (Parent Class)</title>
<programlisting language="java"><![CDATA[@Entity @Table(name="ORMINH_PRODUCT")
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
@DiscriminatorColumn(name="PTYPE", //column in root table indicating type
    discriminatorType=DiscriminatorType.STRING,//data type of column
    length=32) //length of discriminator string
public abstract class Product {
    @Id @GeneratedValue
    private long id;
    private double cost;
...
    @Transient
    public abstract String getName();]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Parent defines default mapping for all derived types</para></listitem>
        </itemizedlist>

        <figure>
            <title>Single Table Example Java Mapping (Annotated Derived)</title>
<programlisting language="java"><![CDATA[@Entity
@DiscriminatorValue("BREAD_TYPE") //value placed in root table to indicate type
public class Bread extends Product {
    private int slices;
    @Temporal(TemporalType.DATE)
    private Date bakedOn;
...
    @Transient
    public String getName() { return "Bread"; }]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Supplies type-specific column value</para></listitem>
        </itemizedlist>
        
        
        <figure>
            <title>Single Table Example Java Mapping (Default Derived)</title>
<programlisting language="java"><![CDATA[@Entity
public class Soup extends Product {
    public enum SoupType {
        UNKNOWN("Unknown"),
        CHICKEN_NOODLE("Chicken Noodle"), 
        NEW_ENGLAND_CLAM_CHOWDER("New England Clam Chowder"), 
        TOMATO("Tomato");
        private String text;
        private SoupType(String text) { this.text = text; }
        public String text() { return text; }
    };

    @Enumerated(EnumType.STRING)
    @Column(name="SOUPTYPE", length=16)
    private SoupType type = SoupType.UNKNOWN;
    @Temporal(TemporalType.DATE)
    private Date expiration;
...    
    @Transient
    public String getName() { return type.text() + "Soup"; }]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Accepts default type-specific column value</para></listitem>
        </itemizedlist>
    </section>

    <section id="jpa-inheritance-singletable-usage">
        <title>Single Table Example Usage</title>
        <figure>
            <title>Single Table Example Usage (Persist)</title>
<programlisting language="java"><![CDATA[ejava.examples.orm.inheritance.annotated.Soup soup = new Soup();
soup.setCost(2.12);
final long lifetime = 365L*24*60*60*1000; 
soup.setExpiration(new Date(System.currentTimeMillis() + lifetime)); 
soup.setSoupType(Soup.SoupType.CHICKEN_NOODLE);
em.persist(soup);

ejava.examples.orm.inheritance.annotated.Bread bread = new Bread();
bread.setBakedOn(new Date());
bread.setCost(2.25);
bread.setSlices(24);
em.persist(bread);]]></programlisting>                        

<programlisting language=""><![CDATA[Hibernate:
    insert into ORMINH_PRODUCT (id, cost, expiration, SOUPTYPE, PTYPE) 
    values (null, ?, ?, ?, 'Soup')
Hibernate:    
    insert into ORMINH_PRODUCT(id, cost, bakedOn, slices, PTYPE) 
    values (null, ?, ?, ?, 'BREAD_TYPE')]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Two rows inserted into single base table with discriminator type supplied</para></listitem>
        </itemizedlist>


        <figure>
            <title>Single Table Example Usage (Get Entities)</title>
<programlisting language="java"><![CDATA[List<Product> products = em.createQuery(
    "select p from Product p", Product.class)
    .getResultList();
assertTrue("unexpected number of products:" + products.size(),
        products.size() == 2);
for(Product p: products) {
    log.info("product found:" + p);
}]]></programlisting>

<programlisting language=""><![CDATA[Hibernate:
select
    product0_.id as id2_9_,
    product0_.cost as cost3_9_,
    product0_.expiration as expirati4_9_,
    product0_.SOUPTYPE as SOUPTYPE5_9_,
    product0_.bakedOn as bakedOn6_9_,
    product0_.slices as slices7_9_,
    product0_.PTYPE as PTYPE1_9_ 
from
    ORMINH_PRODUCT product0_
-product found:Soup, id=1, cost=2.12, type=CHICKEN_NOODLE, expiration=2014-10-05
-product found:Bread, id=2, cost=2.25, slices=24, baked=2013-10-05]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Single table queried for objects</para></listitem>
        </itemizedlist>

        <figure>
            <title>Single Table Example Usage (Verify DB Schema)</title>
<programlisting language="java"><![CDATA[//query specific tables for columns
int rows = em.createNativeQuery(
        "select ID, TYPE, COST, SOUPTYPE, EXPIRATION, BAKEDON, SLICES " +
        " from ORMINH_PRODUCT")
        .getResultList().size();
assertEquals("unexpected number of product rows:" + rows, 2, rows);]]></programlisting>                        

<programlisting language=""><![CDATA[select * from ORMINH_PRODUCT
PTYPE      ID COST BAKEDON    SLICES EXPIRATION SOUPTYPE
---------- -- ---- ---------- ------ ---------- --------------
Soup       1  2.12 (null)     (null) 2007-10-08 CHICKEN_NOODLE
BREAD_TYPE 2  2.25 2006-10-08 24     (null)     (null)]]></programlisting>                        

        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Single table "sparsely" filled based on type</para></listitem>
        </itemizedlist>


    </section>


    <section id="jpa-inheritance-singletable-discriminatorcol-annotation">
        <title>@DiscriminatorColumn Annotation</title>
        <para>@DiscriminatorColumn defines column to hold type-specific value</para>
        
        <variablelist spacing="compact">
            <varlistentry>
                <term><filename>name (default="DTYPE")</filename></term>
                <listitem><para>Column name</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>discriminatorType</filename></term>
                <listitem>
                    <variablelist spacing="compact">
                        <varlistentry>
                            <term><filename>STRING (defaults to Entity.name)</filename></term>
                            <listitem><para>Only portable technique when accepting default</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><filename>CHAR</filename></term>
                            <listitem><para>Vendor-specific value when accepting default</para></listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><filename>INTEGER</filename></term>
                            <listitem><para>Vendor-specific value when accepting default</para></listitem>
                        </varlistentry>
                    </variablelist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>columnDefinition</filename></term>
                <listitem><para>Database-specific definition for when generating schema</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>length</filename></term>
                <listitem><para>Size of STRING</para></listitem>
            </varlistentry>
        </variablelist>
    </section>    
        
    <section id="jpa-inheritance-singletable-summary">
        <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>Single table represents all sub-classes</para></listitem>
            <listitem><para>Discriminator columns used to distinguish between types</para></listitem>
            <listitem><para>No joins</para></listitem>
            <listitem><para>Good choice when no/minor differences in subclass properties</para></listitem>
            <listitem><para>Bad choice when subclasses differ greatly in subclass properties</para></listitem>
        </itemizedlist>
        
    </section>
</chapter>
  
