<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-relation-o2m">
    <title>One-to-Many Relationships</title>
        
    <figure>
        <title>One-to-Many Uni-directional </title>
        <graphic scale="110" fileref="images/jpa-relation-one-to-many-uni.png"/>
    </figure>
    <figure>
        <title>One-to-Many Bi-directional </title>
        <graphic scale="110" fileref="images/jpa-relation-one-to-many-bi.png"/>
    </figure>

    <variablelist spacing="compact">
        <varlistentry>
            <term><filename>Uni-directional</filename></term>
            <listitem><para>Only one side ("owner") knows of the relationship</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Uses the @OneToMany annotation</para></listitem>
                    <listitem><para>Defines mapping to database</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Uses either @JoinColumn or @JoinTable</para></listitem>
                        </itemizedlist>
                        <note>
                            <para>@JoinTable adds the foreign key to the child table and not to the owning entity class table in this uni-directional case</para>
                        </note>
                    </listitem>
                </itemizedlist>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>Bi-directional</filename></term>
            <listitem><para>Both classes know of the relationship</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Many side required to be owning side and maps relation to the database</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Uses the @ManyToOne annotation</para></listitem>
                            <listitem><para>Uses either @JoinColumn or @JoinTable</para></listitem>
                            <listitem><para>Changes here change the database</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>One side required to be inverse and names the other entity's property</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>@OneToMany(mappedBy="owning-property")</para></listitem>
                            <listitem><para>Changes here do *not* change database</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
        </varlistentry>
    </variablelist>
        
        
    <section id="jpa-relation-o2m-uni">
        <title>One-to-Many: Uni-directional</title>
        <itemizedlist spacing="compact">
            <listitem><para>This example uses the @JoinColumn technique of inserting foreign key into child table of inverse entity class</para></listitem>
            <listitem><para>No construct in child/inverse side to map to foreign key</para></listitem>
        </itemizedlist>
        
        
        <figure>
            <title>One-to-Many Uni-directional Database Schema</title>
<programlisting language=""><![CDATA[    create table ORMREL_INVENTORY (
/---->  id bigint generated by default as identity,
|       name varchar(255),
|       primary key (id)
|   )
|   create table ORMREL_MEDIA (
|       MEDIA_ID bigint generated by default as identity,
|       title varchar(255),
`-----  INVENTORY_ID bigint,
        primary key (MEDIA_ID)
    )
    alter table ORMREL_MEDIA 
        add constraint FK639A68F4BCF517CD 
        foreign key (INVENTORY_ID) 
        references ORMREL_INVENTORY]]></programlisting>                        
        </figure>
            
        <figure>
            <title>One-to-Many Uni-directional Database Java Mapping</title>
<programlisting language="java"><![CDATA[    @Entity @Table(name="ORMREL_INVENTORY")
    public class Inventory {
        @Id @GeneratedValue
        private long id;
        private String name;
    
        @OneToMany(cascade={CascadeType.ALL})
/-----  @JoinColumn(name="INVENTORY_ID")
|       private Collection<Media> media = new ArrayList<Media>();
|   
|   @Entity @Table(name="ORMREL_MEDIA")
|   public class Media  {
|       @Id @GeneratedValue @Column(name="MEDIA_ID")
`----> private long id;]]></programlisting>                        
        </figure>
            
        <figure>
            <title>One-to-Many Uni-directional Database Usage</title>
<programlisting language="java"><![CDATA[ejava.examples.orm.rel.annotated.Inventory inventory = new Inventory();
inventory.setName("testLinkCreate");

em.persist(inventory);

for(int i=0; i<5; i++) {
    ejava.examples.orm.rel.annotated.Media media = new Media();
    em.persist(media);
    log.info("created media:" + media);
    inventory.getMedia().add(media);
}
log.info("created inventory:" + inventory);]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Relationship formed when inverse side added to owning collection</para></listitem>
        </itemizedlist>
        
        <figure>
            <title>One-to-Many Uni-directional Database Usage</title>
<programlisting language=""><![CDATA[Hibernate:
    insert into ORMREL_INVENTORY (id, name) 
    values (null, ?)
Hibernate:
    insert into ORMREL_MEDIA (MEDIA_ID, title) 
    values (null, ?)
-created media:ejava.examples.orm.rel.annotated.Media@5ae9fa73, id=1, title=null, authors(0)={}
...
Hibernate:
    insert into ORMREL_MEDIA (MEDIA_ID, title) 
    values (null, ?)
-created media:Media@433a3459, id=5, title=null, authors(0)={}
-created inventory:Inventory@5b9e6638, id=1, name=testLinkCreate, media(5)={1,2,3,4,5,}
Hibernate:
    update ORMREL_MEDIA 
    set INVENTORY_ID=? 
    where MEDIA_ID=?
...
Hibernate:
    update ORMREL_MEDIA 
    set INVENTORY_ID=? 
    where MEDIA_ID=?]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>The foreign key is in the inverse entity class table</para></listitem>
            <listitem><para>No construct in inverse class maps to this foreign key column</para></listitem>
        </itemizedlist>

    </section>

    <section id="jpa-relation-o2m-annotation">
       <title>@OneToMany Annotation</title>
       <para>Identical properties to <link linkend="jpa-relation-o2o-annotation">@OneToOne annotation</link> with the exception of no "optional" property</para>
    </section>    


    <section id="jpa-relation-o2m-bi">
        <title>One-to-Many: Bi-directional</title>
        <para/>
        
        <figure>
            <title>One-to-Many Bi-directional Example Database Schema</title>
<programlisting language=""><![CDATA[    create table ORMREL_BORROWER (
+---->  BORROWER_ID bigint not null,
|       endDate date,
|       startDate date,
|       primary key (BORROWER_ID)
|   )
|   create table ORMREL_CHECKOUT (
|       CHECKOUT_ID bigint generated by default as identity,
|       outDate date,
|       returnDate date,
`-----  CHECKOUT_BID bigint not null,
        primary key (CHECKOUT_ID)
    )
    alter table ORMREL_CHECKOUT 
        add constraint FK7F287E16C07B41F3 
        foreign key (CHECKOUT_BID) 
        references ORMREL_BORROWER]]></programlisting>                        
        </figure>
        
        <figure>
            <title>One-to-Many Bi-directional Example Java Mapping</title>
<programlisting language="java"><![CDATA[    @Entity @Table(name="ORMREL_CHECKOUT")
    public class Checkout {
        @Id @GeneratedValue @Column(name="CHECKOUT_ID")
        private long id;
    
  +-->  @ManyToOne(optional=false)
  |     @JoinColumn(name="CHECKOUT_BID")
+-----  private Borrower borrower;
| | 
| | @Entity @Table(name="ORMREL_BORROWER")
| | public class Borrower  {
| |     private static Log log = LogFactory.getLog(Borrower.class);
| |     @Id @Column(name="BORROWER_ID")
`---->  private long id;
  |     
  |     @OneToMany(mappedBy="borrower", //this relationship is owned by Checkout
  |             fetch=FetchType.LAZY)   //try to limit what we get back
  `---  private Collection<Checkout> checkouts = new ArrayList<Checkout>();
]]></programlisting>                        
        </figure>
        
        <figure>
            <title>One-to-Many Bi-directional Example Usage (Create)</title>
<programlisting language="java"><![CDATA[//get a borrower
Borrower borrower = em.find(Borrower.class, borrowerId);
assertNotNull(borrower);
assertTrue(borrower.getCheckouts().size() == 0);

//create 1st checkout
Checkout checkout = new Checkout(new Date());
checkout.setBorrower(borrower); //set owning side of the relation
borrower.addCheckout(checkout); //set inverse side of relation
    //wrapper around - borower.getCheckouts().add(checkout)
em.persist(checkout);   //persist owning side of the relation
]]></programlisting>

<programlisting language=""><![CDATA[
Hibernate: -- query for the parent object, lazily loads child objects
    select
        borrower0_.BORROWER_ID as BORROWER1_15_0_,
        borrower0_.endDate as endDate2_15_0_,
        borrower0_.startDate as startDat3_15_0_ 
    from ORMREL_BORROWER borrower0_ 
    where borrower0_.BORROWER_ID=?
]]></programlisting>                        

<programlisting language="java"><![CDATA[//get a borrower
//create a couple more
for(int i=0; i<5; i++) {
    Checkout co = new Checkout(new Date());
    co.setBorrower(borrower);   //set owning side of the relation
    borrower.addCheckout(co);   //set inverse side of relation
    em.persist(co);  //persist owning side of the relation
}]]></programlisting>                        

<programlisting language=""><![CDATA[Hibernate:
    insert into ORMREL_CHECKOUT (CHECKOUT_ID, CHECKOUT_BID, outDate, returnDate) 
    values (null, ?, ?, ?)]]></programlisting>                        
        </figure>
        
        <figure>
            <title>One-to-Many Bi-directional Example Usage (Verify)</title>
<programlisting language="java"><![CDATA[//check the DB
em.flush(); em.clear();
Borrower borrower2 = em.find(Borrower.class, borrower.getId());
assertEquals(6, borrower2.getCheckouts().size());]]></programlisting>                        
        </figure>
        
    </section>
    
    <section id="jpa-relation-o2m-m2o-annotation">
       <title>@ManyToOne Annotation</title>
       <para>Many of the familiar properties</para>
        <itemizedlist spacing="compact">
            <listitem><para>optional</para></listitem>
            <listitem><para>fetch</para></listitem>
            <listitem><para>cascade</para></listitem>
            <listitem><para>targetEntity</para></listitem>
        </itemizedlist>
    </section>    
    

    <section id="jpa-relation-o2m-elemcol">
        <title>One-to-Many: Element Collection</title>
        <itemizedlist spacing="compact">
            <listitem><para>Maps collection of simple data types to child table</para></listitem>
            <listitem><para>Uses orphanRemoval for child values</para></listitem>
        </itemizedlist>
        
        <figure>
            <title>Element Collection Example Database Schema</title>
<programlisting language=""><![CDATA[    create table RELATIONEX_SUSPECT (
+---->  id integer generated by default as identity,
|       name varchar(32),
|       primary key (id)
|   )
|   create table RELATIONEX_SUSPECT_ALIASES (
`-----  SUSPECT_ID integer not null,
        ALIAS varchar(32),
        unique (SUSPECT_ID, ALIAS)
    )
    alter table RELATIONEX_SUSPECT_ALIASES 
        add constraint FK3FD160E6DE29C9CF 
        foreign key (SUSPECT_ID) 
        references RELATIONEX_SUSPECT]]></programlisting>                        
        </figure>

        <figure>
            <title>Element Collection Example Database Java Mapping</title>
<programlisting language="java"><![CDATA[@Entity
@Table(name="RELATIONEX_SUSPECT")
public class Suspect {
    @Id @GeneratedValue
    private int id;
    @Column(length=32)
    private String name;
        
    @ElementCollection
    @CollectionTable(
            name="RELATIONEX_SUSPECT_ALIASES",
            joinColumns=@JoinColumn(name="SUSPECT_ID"), 
            uniqueConstraints=@UniqueConstraint(columnNames={"SUSPECT_ID", "ALIAS"}))
    @Column(name="ALIAS", length=32)
    private Set<String> aliases;
]]></programlisting>                        
        </figure>

        <figure>
            <title>Element Collection Example Database Usage</title>
<programlisting language=""><![CDATA[Suspect suspect = new Suspect();
suspect.setName("william");
em.persist(suspect);
suspect.getAliases().add("bill");
suspect.getAliases().add("billy");]]></programlisting>                        
        </figure>
    </section>

    <section id="jpa-relation-o2m-elemcol-annotation">
       <title>@ElementCollection Annotation</title>
       <para>Many of the familiar properties</para>
        <itemizedlist spacing="compact">
            <listitem><para>fetch</para></listitem>
            <listitem><para>targetEntity</para></listitem>
        </itemizedlist>
    </section>    


    <section id="jpa-relation-o2m-other">
        <title>Other Topics</title>
        <itemizedlist spacing="compact">
            <listitem><para>Link Table</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Foreign key not placed in child table</para></listitem>
                    <listitem><para>Separate table used to realize relationship</para></listitem>
                    <listitem><para>Discussed in <link linkend="jpa-relation-fkey-jointable">Join Tables</link> section</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="jpa-relation-o2m-">
        <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>Maps a single parent object to many child objects</para></listitem>
            <listitem><para>Parent is owner for one-to-many case</para></listitem>
            <listitem><para>Child must be owner in many-to-one case</para></listitem>
            <listitem><para>Child objects can be entities or values</para></listitem>
        </itemizedlist>
    </section>
</chapter>
  
