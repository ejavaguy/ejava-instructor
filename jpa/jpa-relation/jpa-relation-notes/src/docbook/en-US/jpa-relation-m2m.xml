<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-relation-m2m">
    <title>Many-to-Many Relationships</title>
        
    <figure>
        <title>Many-to-Many Uni-directional</title>
        <graphic scale="110" fileref="images/jpa-relation-many-to-many-uni.png"/>
    </figure>
        
    <figure>
        <title>Many-to-Many Bi-directional</title>
        <graphic scale="110" fileref="images/jpa-relation-many-to-many-bi.png"/>
    </figure>
        

    <variablelist spacing="compact">
        <varlistentry>
            <term><filename>Uni-directional</filename></term>
            <listitem><para>Only one side ("owner") knows of the relationship</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Uses the @ManyToMany annotation</para></listitem>
                    <listitem><para>Defines mapping to database</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Must use @JoinTable</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>Bi-directional</filename></term>
            <listitem><para>Both classes know of the relationship</para>
                <itemizedlist spacing="compact">
                    <listitem><para>One side required to be owning side and maps relation to the database</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Uses the @ManyToMany annotation</para></listitem>
                            <listitem><para>Must use @JoinTable</para></listitem>
                            <listitem><para>Changes here change the database</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>One side required to be inverse and names the other entity's property</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>@ManyToMany(mappedBy="owning-property")</para></listitem>
                            <listitem><para>Changes here do *not* change database</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
        </varlistentry>
    </variablelist>
        
        
    <section id="jpa-m2m-uni">
        <title>Many-to-Many: Uni-directional</title>
        <figure>
            <title>Many-to-Many Uni-directional Database Schema</title>
<programlisting language=""><![CDATA[    create table ORMREL_WANTED (
+---->  id bigint generated by default as identity,
|       primary key (id)
|   )
|   create table ORMREL_WANTED_MEDIA (
`-----  ORMREL_WANTED_id bigint not null,
+-----  media_MEDIA_ID bigint not null
|   )
|   create table ORMREL_MEDIA (
`---->  MEDIA_ID bigint generated by default as identity,
        title varchar(255),
        primary key (MEDIA_ID)
    )
    alter table ORMREL_WANTED_MEDIA 
        add constraint FKEE528304A70D4E48 
        foreign key (media_MEDIA_ID) 
        references ORMREL_MEDIA
    alter table ORMREL_WANTED_MEDIA 
        add constraint FKEE52830486AFC6B6 
        foreign key (ORMREL_WANTED_id) 
        references ORMREL_WANTED    
]]></programlisting>                        
        </figure>
            
        <figure>
            <title>Many-to-Many Uni-directional Database Java Mapping</title>
<programlisting language="java"><![CDATA[    @Entity @Table(name="ORMREL_WANTED")
    public class WantList {
        @Id @GeneratedValue
        private long id;
        @ManyToMany
        @JoinTable(name="ORMREL_WANTED_MEDIA") //define table, let columns use default names
+-----  private Collection<Media> media = new ArrayList<Media>();
|      ...
|   @Entity @Table(name="ORMREL_MEDIA")
|   public class Media  {
|       @Id @GeneratedValue @Column(name="MEDIA_ID")
`---->  private long id;
        private String title;    
]]></programlisting>                        
        </figure>
            
        <figure>
            <title>Many-to-Many Uni-directional Example Usage</title>
<programlisting language="java"><![CDATA[for(WantList w: wantLists) {
    for(Media m: media) {
        //we can only navigate this in one direction
        w.getMedia().add(m);
        log.info("added media(" + m.getId() + 
                ") to want list (" + w.getId() +")");
    }
}]]></programlisting>                        
        </figure>
        
        <figure>
            <title>Many-to-Many Uni-directional Database Output</title>
<programlisting language=""><![CDATA[ -added media(1) to want list (1)
-added media(2) to want list (1)
-added media(1) to want list (2)
-added media(2) to want list (2)
-added media(1) to want list (3)
-added media(2) to want list (3)
Hibernate: 
    insert into ORMREL_WANTED_MEDIA (ORMREL_WANTED_id, media_MEDIA_ID) 
    values (?, ?)
...]]></programlisting>                        
        </figure>
        <orderedlist spacing="compact">
            <listitem><para>Rows added to join table rather than updating entity class tables with foreign key</para></listitem>
        </orderedlist>
        
    </section>

    <section id="jpa-m2m-bi">
        <title>Many-to-Many: Bi-directional</title>
        <figure>
            <title>Many-to-Many Bi-directional Database Schema</title>
<programlisting language=""><![CDATA[    create table ORMREL_AUTHOR (
+-----> id bigint generated by default as identity,
|       name varchar(255),
|       primary key (id)
|   )
|   create table ORMREL_AUTHOR_MEDIA (
`-----  LINK_AUTHOR_ID bigint not null,
+-----  LINK_MEDIA_ID bigint not null
|   )
|   create table ORMREL_MEDIA (
`---->  MEDIA_ID bigint generated by default as identity,
        title varchar(255),
        primary key (MEDIA_ID)
    )
    alter table ORMREL_AUTHOR_MEDIA 
        add constraint FKA0D2B4E09B01C6F2 
        foreign key (LINK_MEDIA_ID) 
        references ORMREL_MEDIA
    alter table ORMREL_AUTHOR_MEDIA 
        add constraint FKA0D2B4E089FFE922 
        foreign key (LINK_AUTHOR_ID) 
        references ORMREL_AUTHOR
]]></programlisting>                        
        </figure>
            
        <figure>
            <title>Many-to-Many Bi-directional Database Java Mapping</title>
<programlisting language="java"><![CDATA[    @Entity @Table(name="ORMREL_AUTHOR")
    public class Author {
        @Id @GeneratedValue
        private long id;
        private String name;
    
        @ManyToMany
        @JoinTable(name="ORMREL_AUTHOR_MEDIA", //defines the link table
                    //defines the column in the link table for author FK
                joinColumns={@JoinColumn(name="LINK_AUTHOR_ID")},
                    //defines the column in the link table for the media FK
                inverseJoinColumns={@JoinColumn(name="LINK_MEDIA_ID")})
  +-->  @OrderBy("title DESC") //order the list returned from database
+-----  private List<Media> media = new ArrayList<Media>();
| | 
| | @Entity @Table(name="ORMREL_MEDIA")
| | public class Media  {
| |     @Id @GeneratedValue @Column(name="MEDIA_ID")
| |     private long id;
| |     private String title;    
| `---- @ManyToMany(mappedBy="media")  //names property in Author that points to us
`-----> private Collection<Author> authors = new ArrayList<Author>();]]></programlisting>                        
        </figure>
            
        <figure>
            <title>Many-to-Many Bi-directional Example Usage</title>
<programlisting language="java"><![CDATA[for(Author a: authors) {
    for(Media m: media) {
        a.getMedia().add(m);
        log.info("added media(" + m.getId() + 
                ") to author (" + a.getId() +")");
        m.getAuthors().add(a);
        log.info("added author(" + a.getId() + 
                ") to media (" + m.getId() +")");
    }
}]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Owning and inverse sides now both need to be set</para></listitem>
        </itemizedlist>
        
        
        <figure>
            <title>Many-to-Many Bi-directional Database Output</title>
<programlisting language=""><![CDATA[ -added media(3) to author (1)
-added author(1) to media (3)
...
-added media(5) to author (5)
-added author(5) to media (5)
Hibernate: 
    insert into ORMREL_AUTHOR_MEDIA (LINK_AUTHOR_ID, LINK_MEDIA_ID) 
    values (?, ?)
...
Hibernate: 
    insert into ORMREL_AUTHOR_MEDIA (LINK_AUTHOR_ID, LINK_MEDIA_ID) 
    values (?, ?)
]]></programlisting>                        
        </figure>
    </section>

    <section id="jpa-m2m-summary">
        <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>Many-to-many commonly implemented as two many-to-one/one-to-many relationships when relationship properties involved</para></listitem>
            <listitem><para>Many-to-many requires the associations have no relationship properties</para></listitem>
            <listitem><para>Modeled as a relationship and not a separate entity class</para></listitem>
        </itemizedlist>
    </section>
</chapter>
  
