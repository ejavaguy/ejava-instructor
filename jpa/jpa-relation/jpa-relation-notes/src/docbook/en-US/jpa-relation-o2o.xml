<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-relation-o2o">
    <title>One-to-One Relationships</title>
    
    <figure>
        <title>One-to-One Uni-directional</title>
        <graphic scale="110" fileref="images/jpa-relation-one-to-one-uni.png"/>
    </figure>
    <figure>
        <title>One-to-One Bi-directional</title>
        <graphic scale="110" fileref="images/jpa-relation-one-to-one-bi.png"/>
    </figure>
    
    <variablelist spacing="compact">
        <varlistentry>
            <term><filename>Uni-directional</filename></term>
            <listitem><para>Only one class ("owner") knows of the relationship</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Uses the @OneToOne annotation</para></listitem>
                    <listitem><para>Defines mapping to database</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Uses either @JoinColumn or @JoinTable</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
        </varlistentry>
        <varlistentry>
            <term><filename>Bi-directional</filename></term>
            <listitem><para>Both classes know of the relationship</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Both classes use the @OneToOne annotation</para></listitem>
                    <listitem><para>One class is considered the owner and maps relation to the database</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Uses either @JoinColumn or @JoinTable</para></listitem>
                            <listitem><para>Changes here change the database</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>One class is considered the inverse and names the other entity's property</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>@OneToOne(mappedBy="owning-property")</para></listitem>
                            <listitem><para>Changes here do *not* change database</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
        </varlistentry>
    </variablelist>

    <section id="jpa-relation-o2o-uni">
        <title>One-to-One: Uni-directional</title>
        
        <figure>
              <title>One-to-One Uni-directional Example Database Schema</title>
<programlisting language=""><![CDATA[    create table ORMREL_PERSON (
        PERSON_ID bigint generated by default as identity,
        firstName varchar(255),
        lastName varchar(255),
        phone varchar(255),
+-----  PERSON_PHOTO bigint,
|       primary key (PERSON_ID)
|   )
|   create table ORMREL_PHOTO (
+-----> PHOTO_ID bigint generated by default as identity,
        image blob,
        primary key (PHOTO_ID)
    )
    alter table ORMREL_PERSON 
        add constraint FK14D7C425DCCB1C0D 
        foreign key (PERSON_PHOTO) 
        references ORMREL_PHOTO]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Relation realized through a foreign key</para></listitem>
            <listitem><para>Foreign key represented by a separate column</para></listitem>
            <listitem><para>Foreign key from owning entity table references primary key of inverse entity table</para></listitem>
        </itemizedlist>

        <figure>
              <title>One-to-One Uni-directional Example Java Mapping</title>
<programlisting language="java"><![CDATA[
    @Entity
    @Table(name="ORMREL_PERSON")
    public class Person  {
        @Id @GeneratedValue @Column(name="PERSON_ID")
        private long id;
    
        @OneToOne(cascade={ 
                CascadeType.ALL},  //have creates, deletes, etc. cascade to photo
                fetch=FetchType.LAZY)       //a hint that we don't need this
        @JoinColumn(name="PERSON_PHOTO")    //define local foreign key column
+-----  private Photo photo;
|   
|   @Entity
|   @Table(name="ORMREL_PHOTO")
|   public class Photo {
|       @Id @GeneratedValue @Column(name="PHOTO_ID")
+---->  private long id;
]]></programlisting>                        
        </figure>
        

        <figure>
           <title>One-to-One Uni-directional Usage</title>
<programlisting language="java"><![CDATA[//create the owning side 
ejava.examples.orm.rel.annotated.Person person = new Person();
person.setFirstName("john");
person.setLastName("doe");
person.setPhone("410-555-1212");

//create the inverse side 
ejava.examples.orm.rel.annotated.Photo photo = new Photo();        
photo.setImage(image);        

//add photo to person and persist object tree
person.setPhoto(photo); //this sets the FK in person
log.info("added photo to person:" + person);
em.persist(person);        
assertTrue("personId not set", person.getId() != 0);
assertTrue("photoId not set", photo.getId() != 0);
log.info("created person:" + person);]]></programlisting>                        

<programlisting language=""><![CDATA[-added photo to person:Person@1201f5bc, id=0, name=john doe, phone=410-555-1212, 
    photo=Photo@130b5045, id=0. image=46080 bytes
Hibernate:
    insert into ORMREL_PHOTO (PHOTO_ID, image) 
    values (null, ?)
Hibernate:
    insert into ORMREL_PERSON (PERSON_ID, firstName, lastName, phone, PERSON_PHOTO) 
    values (null, ?, ?, ?, ?)
-created person:Person@1201f5bc, id=1, name=john doe, phone=410-555-1212, 
        photo=Photo@130b5045, id=1. image=46080 bytes]]></programlisting>                        


<programlisting language="java"><![CDATA[//verify what we can get from DB
em.flush(); em.clear();
Person person2 = em.find(Person.class, person.getId());
assertNotNull(person2);
assertNotNull(person2.getPhoto());
log.info("found person:" + person2);]]></programlisting>                        

<programlisting language=""><![CDATA[
Hibernate:
    select
        person0_.PERSON_ID as PERSON1_24_0_,
        person0_.firstName as firstNam2_24_0_,
        person0_.lastName as lastName3_24_0_,
        person0_.phone as phone4_24_0_,
        person0_.PERSON_PHOTO as PERSON5_24_0_ 
    from ORMREL_PERSON person0_ 
    where person0_.PERSON_ID=?
Hibernate:
    select
        photo0_.PHOTO_ID as PHOTO1_25_0_,
        photo0_.image as image2_25_0_ 
    from ORMREL_PHOTO photo0_ 
    where photo0_.PHOTO_ID=?
-found person:Person@29564bb9, id=1, name=john doe, phone=410-555-1212, 
    photo=Photo@785e7845, id=1. image=46080 bytes]]></programlisting>                        
        </figure>

    </section>

    <section id="jpa-relation-o2o-annotation">
       <title>@OneToOne Annotation</title>
        <variablelist spacing="compact">
            <varlistentry>
                <term><filename>optional:boolean (default=false)</filename></term>
                <listitem><para>Designates whether relation is required. Default is true.</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>fetch:FetchType (default=EAGER)</filename></term>
                <listitem><para>Use EAGER or LAZY fetching of relationship when loading this entity. 
                    More of coverage of fetch in <link linkend="jpa-relation-fetch">Fetching</link> section</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>orphanRemoval:boolean (default=false)</filename></term>
                <listitem><para>Remote entity only exists for use by this relation. Automatically delete when relation terminated.</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>cascade:CascadeType[] (default=none)</filename></term>
                <listitem><para>Perform actions taken on this entity on related entity</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>targetEntity:Class</filename></term>
                <listitem><para>Define type for related class (if related Java type over-generalized)</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>mappedBy:String</filename></term>
                <listitem><para>Used by inverse side to specify owning entity property that maps relation to DB</para></listitem>
            </varlistentry>
        </variablelist>
    </section>
    
    <section id="jpa-relation-o2o-column-annotation">
       <title>@JoinColumn Annotation</title>
       <para>Defines a foreign key mapping</para>
        <variablelist spacing="compact">
            <varlistentry>
                <term><filename>name</filename></term>
                <listitem><para>Database column name</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>referencedColumnName (default=primary key)</filename></term>
                <listitem><para>Primarily used during composite key mappings to signify which property goes with which primary key member</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>unique (default=false)</filename></term>
                <listitem><para>Foreign key is unique within entity table</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>nullable (default=true)</filename></term>
                <listitem><para>Foreign key is optional within entity table. Used for 0..1 relationships</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>insertable (default=true)</filename></term>
                <listitem><para>Foreign key is part of SQL INSERT for entity</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>updatable (default=true)</filename></term>
                <listitem><para>Foreign key is part of SQL UPDATEs for the entity</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>table</filename></term>
                <listitem><para>Used in multi-table mappings to identify source table for column</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>columnDefinition</filename></term>
                <listitem><para>Customized DDL for column definition when generating schema</para></listitem>
            </varlistentry>
        </variablelist>
    </section>
    
    <section id="jpa-relation-o2o-columns-annotation">
       <title>@JoinColumns Annotation</title>
       <para>Used to define multiple @JoinColumns when using composite foreign keys</para>
<programlisting language="java"><![CDATA[@OneToOne
@JoinColumns({ //defines an array of @JoinColumns
    @JoinColumn(...),
    @JoinColumn(...)    
})]]></programlisting>                                   
    </section>    



    
    <section id="jpa-relation-o2o-bi">
        <title>One-to-One: Bi-directional</title>
        <itemizedlist spacing="compact">
            <listitem><para>Navigate relationship from both sides of the Java relationship</para></listitem>
        </itemizedlist>
        

        <figure>
            <title>One-to-One Uni-directional Example Database Schema</title>
<programlisting language=""><![CDATA[
    create table ORMREL_APPLICANT (
        id bigint generated by default as identity,
+-----  APP_BORROWER bigint,
|       APP_PERSON bigint not null,
|       primary key (id)
|   )
|   create table ORMREL_BORROWER (
+---->  BORROWER_ID bigint not null,
        endDate date,
        startDate date,
        primary key (BORROWER_ID)
    )
    alter table ORMREL_APPLICANT 
        add constraint FKD1860812DA35F52F 
        foreign key (APP_BORROWER) 
        references ORMREL_BORROWER
]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>No additional foreign key used to satisfy the bi-directional aspect of relation</para></listitem>
        </itemizedlist>


        <figure>
            <title>One-to-One Uni-directional Example Database Java Mapping</title>
<programlisting language="java"><![CDATA[
    @Entity @Table(name="ORMREL_APPLICANT")
    public class Applicant  {
        @Id @GeneratedValue
        private long id;
        
  +-->  @OneToOne(optional=true)        //we may exist without Borrower 
  |     @JoinColumn(name="APP_BORROWER")//we own relationship to Borrower
+-----  private Borrower borrower;
| |
| | @Entity @Table(name="ORMREL_BORROWER")
| | public class Borrower  {
| |     @Id @Column(name="BORROWER_ID")
`---->  private long id;
  |    
  |     @OneToOne(fetch=FetchType.LAZY, 
  |             optional=true,       //lets make this optional for demo 
  |             mappedBy="borrower") //the other side owns foreign key column
  +--   private Applicant application;
]]></programlisting>                        
        </figure>


        <figure>
            <title>One-to-One Uni-directional Example Usage</title>
<programlisting language="java"><![CDATA[
        //locate them from DB
        Applicant applicant2 = em.find(Applicant.class, applicant.getId());
        Borrower borrower2 = em.find(Borrower.class, borrower.getId());
        
        //form relationship
        borrower2.setApplication(applicant2); //set inverse side
        applicant2.setBorrower(borrower2);    //set owning side
]]></programlisting>                        

<programlisting language=""><![CDATA[
    update
        ORMREL_APPLICANT 
    set
        APP_BORROWER=?,
        APP_PERSON=? 
    where
        id=?
]]></programlisting>
            </figure>
            <note>
                <para>Notice only owning entity table is updated when relationship formed.</para>
            </note>
                        
            <figure>
                <title>One-to-One Uni-directional Example Usage (cont.)</title>
<programlisting language="java"><![CDATA[        
        //locate them from DB
        em.flush(); em.clear();
        Applicant applicant3 = em.find(Applicant.class, applicant.getId());
        Borrower borrower3 = em.find(Borrower.class, borrower.getId());
        assertEquals(applicant.getId(), borrower3.getApplication().getId());
        assertEquals(borrower.getId(), applicant3.getBorrower().getId());
]]></programlisting>         

<programlisting language=""><![CDATA[
Hibernate:
   select
        applicant0_.id as id1_12_2_,
        applicant0_.APP_BORROWER as APP2_12_2_,
        applicant0_.APP_PERSON as APP3_12_2_,
        borrower1_.BORROWER_ID as BORROWER1_15_0_,
        borrower1_.endDate as endDate2_15_0_,
        borrower1_.startDate as startDat3_15_0_,
        person2_.PERSON_ID as PERSON1_24_1_,
        ...
    from ORMREL_APPLICANT applicant0_ 
    left outer join ORMREL_BORROWER borrower1_ 
            on applicant0_.APP_BORROWER=borrower1_.BORROWER_ID 
    inner join ORMREL_PERSON person2_ 
            on applicant0_.APP_PERSON=person2_.PERSON_ID 
    where applicant0_.id=?
Hibernate:
    select
        applicant0_.id as id1_12_2_,
        applicant0_.APP_BORROWER as APP2_12_2_,
        applicant0_.APP_PERSON as APP3_12_2_,
        borrower1_.BORROWER_ID as BORROWER1_15_0_,
        borrower1_.endDate as endDate2_15_0_,
        borrower1_.startDate as startDat3_15_0_,
        person2_.PERSON_ID as PERSON1_24_1_,
        ...
    from ORMREL_APPLICANT applicant0_ 
    left outer join ORMREL_BORROWER borrower1_ 
            on applicant0_.APP_BORROWER=borrower1_.BORROWER_ID 
    inner join ORMREL_PERSON person2_ 
            on applicant0_.APP_PERSON=person2_.PERSON_ID 
    where applicant0_.APP_BORROWER=?
        -]]></programlisting>
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Notice the extra joins that occur with default fetch mode=EAGER</para></listitem>
                <listitem><para>inner joins used for optional=false relationships</para></listitem>
                <listitem><para>left outer joins used for optional=true relationships</para></listitem>
            </itemizedlist>
    </section>
    
    <section id="jpa-relation-o2o-bi-ownership">
        <title>Bi-directional Relationships and Ownership</title>
        <itemizedlist spacing="compact">
            <listitem><para>Only changes made to owning side impact database</para>
                <itemizedlist spacing="compact">
                    <listitem><para>persist (set)</para></listitem>
                    <listitem><para>update (change)</para></listitem>
                    <listitem><para>remove (null out)</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Actions taken on owning side not automatically propagated to inverse side</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Inverse reference to owning side not changed (for persist, update, or remove)</para></listitem>
                    <listitem><para>Must either</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Manually update inverse side</para></listitem>
                            <listitem><para>Refresh object if proper state in database</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

        <figure>
            <title>Update Inverse-side Only Example (Setup)</title>
            <programlistingco>
                <areaspec units="linecolumn">
                    <area id="jpa-relation-o2o-bi-ownership-area-setting" coords="12"/>
                    <area id="jpa-relation-o2o-bi-ownership-area-notsetting" coords="15"/>
                </areaspec>
<programlisting language="java"><![CDATA[Borrower borrower = em.find(Borrower.class, borrowerId);
Applicant applicant = em.find(Applicant.class, applicantId);

assertNull("borrower has unexpected applicant:" + 
        borrower.getApplication(), 
        borrower.getApplication());
assertNull("applicant has unexpected borrower:" + 
        applicant.getBorrower(), 
        applicant.getBorrower());

//set ONLY the inverse side of the relationship
borrower.setApplication(applicant);
assertNotNull("borrower does not have applicant", 
        borrower.getApplication());
assertNull("applicant has unexpected borrower:" + 
        applicant.getBorrower(), 
        applicant.getBorrower());  

log.info("writing rel owner (application) to DB:" + applicant);
log.info("writing rel inverse (borrower) to DB:" + borrower);]]></programlisting>
                <calloutlist>
                    <callout arearefs="jpa-relation-o2o-bi-ownership-area-setting"><para>Only inverse side being set</para></callout>
                    <callout arearefs="jpa-relation-o2o-bi-ownership-area-notsetting"><para>Setter does not automatically propagate to other side in cache</para></callout>
                </calloutlist>                        
            </programlistingco>            
        </figure>

        <figure>
            <title>Update Inverse-side Only Example (Verify)</title>
            <programlistingco>
                <areaspec units="linerange">
                    <area id="jpa-relation-o2o-bi-ownership-area-lost" coords="11"/>
                </areaspec>
<programlisting language="java"><![CDATA[//commit changes to the DB, but since only inserse side of relationship
//was set, no FK data gets written
em.getTransaction().commit(); em.clear();
assertFalse("borrower was managed", em.contains(borrower));
assertFalse("application was managed", em.contains(applicant));

borrower = em.find(Borrower.class, borrowerId);
applicant = em.find(Applicant.class, applicantId);

//verify that relationship from cache never written to DB
assertNull("borrower has unexpected applicant:" + 
        borrower.getApplication(), 
        borrower.getApplication());
assertNull("applicant has unexpected borrower:" + 
        applicant.getBorrower(), 
        applicant.getBorrower());
]]></programlisting>
                <calloutlist>
                    <callout arearefs="jpa-relation-o2o-bi-ownership-area-lost"><para>Not setting owning side caused relationship to *not* be written to database -- 
                        thus lost when read back in from database</para></callout>
                </calloutlist>                        
            </programlistingco>            
        </figure>

        <figure>
            <title>Update Owning-side Only Example (Setup)</title>
            <programlistingco>
                <areaspec units="linecolumn">
                    <area id="jpa-relation-o2o-bi-ownership-area-setting2" coords="12"/>
                    <area id="jpa-relation-o2o-bi-ownership-area-notsetting2" coords="16"/>
                </areaspec>
<programlisting language="java"><![CDATA[Borrower borrower = em.find(Borrower.class, borrowerId);
Applicant applicant = em.find(Applicant.class, applicantId);

assertNull("borrower has unexpected applicant:" + 
        borrower.getApplication(), 
        borrower.getApplication());
assertNull("applicant has unexpected borrower:" + 
        applicant.getBorrower(), 
        applicant.getBorrower());

//set ONLY the owning side of the relationship
applicant.setBorrower(borrower);
assertNull("borrower has unexpected applicant:" + 
        borrower.getApplication(), 
        borrower.getApplication());
assertNotNull("applicant does not have borrower", 
        applicant.getBorrower());]]></programlisting>
                <calloutlist>
                    <callout arearefs="jpa-relation-o2o-bi-ownership-area-setting2"><para>Updating only the owning side</para></callout>
                    <callout arearefs="jpa-relation-o2o-bi-ownership-area-notsetting2"><para>Change does *not* automatically propagate to other side</para></callout>
                </calloutlist>                        
            </programlistingco>            
        </figure>

        <figure>
            <title>Update Owning-side Only Example (Verify)</title>
            <programlistingco>
                <areaspec units="linecolumn">
                    <area id="jpa-relation-o2o-bi-ownership-area-retained" coords="8"/>
                </areaspec>
<programlisting language="java"><![CDATA[//commit changes to the DB, since the owning side was set, we do
//get changes made to DB
em.getTransaction().commit(); em.clear();
borrower = em.find(Borrower.class, borrowerId);
applicant = em.find(Applicant.class, applicantId);

//verify that relationship from cache written to DB
assertNotNull("borrower was not updated with applicant:" + 
        borrower.getApplication(), 
        borrower.getApplication());
assertNotNull("applicant was not updated with borrower", 
        applicant.getBorrower());]]></programlisting>
                <calloutlist>
                    <callout arearefs="jpa-relation-o2o-bi-ownership-area-retained"><para>Relationship retained because owning side written to database</para></callout>
                </calloutlist>                        
            </programlistingco>            
        </figure>

    </section>

    
    <section id="jpa-relation-o2o-other">
        <title>Other Topics</title>
        <itemizedlist spacing="compact">
            <listitem><para>Primary Key Join</para>
                <itemizedlist spacing="compact">
                    <listitem><para>No separate foreign key column</para></listitem>
                    <listitem><para>Primary key column used to also represent the foreign key</para></listitem>
                    <listitem><para>Discussed in <link linkend="jpa-relation-fkey-pkjoin">Foreign Key</link> section</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Link Table</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Neither entity class table directly references to other</para></listitem>
                    <listitem><para>Separate table used to realize relationship</para></listitem>
                    <listitem><para>Discussed in <link linkend="jpa-relation-fkey-jointable">Join Tables</link> section</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="jpa-relation-o2o-summary">
        <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>Represents two classes that reference the other using a Java reference</para></listitem>
            <listitem><para>Relationship realized through either a foreign key or join table</para></listitem>
            <listitem><para>May be represented at the entity level as either a uni-directional or bi-directional relationship</para></listitem>
            <listitem><para>Only the owning side is mapped to the database</para></listitem>
            <listitem><para>Inverse side is populated from database but does not change the database</para></listitem>
        </itemizedlist>

    </section>
</chapter>
  
