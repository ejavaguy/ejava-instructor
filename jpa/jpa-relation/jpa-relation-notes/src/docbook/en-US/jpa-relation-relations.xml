<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-relation-chapter">
    <title>Relationship Capabilities</title>
        
    <section id="jpa-relation-fetch">
        <title>Fetching</title>
        <itemizedlist spacing="compact">
            <listitem><para>Determines how when related objects are retrieved</para>
                <variablelist spacing="compact">
                    <varlistentry>
                        <term><filename>LAZY</filename></term>
                        <listitem><para>Only parent object immediately retrieved -- child objects retrieved on demand</para>
                            <itemizedlist spacing="compact">
                                <listitem><para>Can result in better performance when child data is not needed - unused objects not retrieved</para></listitem>
                                <listitem><para>Can result in poor performance when all child data is needed - retrieves objects one at a time rather than in bulk</para></listitem>
                                <listitem><para>Can result in lazy load exception if unloaded data accessed after it can no longer be retrieved from database</para></listitem>
                                <listitem><para>Can be simulated, on demand, using value or result class queries with JPA-QL</para></listitem>
                            </itemizedlist>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><filename>EAGER (the default)</filename></term>
                        <listitem><para>Provider required to have loaded prior to transaction committing</para>
                            <itemizedlist spacing="compact">
                                <listitem><para>Can result in better performance when all child data is needed</para></listitem>
                                <listitem><para>Can result in poor performance when no child data or limited child data is needed</para></listitem>
                                <listitem><para>Can result in poor performance when parent has multiple collections and equivalent
                                    of an "EAGER LAZY load" is performed before returning control back to the caller
                                </para></listitem>
                                <listitem><para>Should never result in a lazy load exception</para></listitem>
                                <listitem><para>Can be simulated, on-demand, using "join fetch" queries with JPA-QL</para></listitem>
                            </itemizedlist>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </listitem>
        </itemizedlist>
        

        <section id="jpa-relation-fetch-lazy">
            <title>fetch=LAZY</title>
            
            <figure>
                <title>fetch=LAZY Example Declaration</title>
<programlisting language="java"><![CDATA[@OneToMany(mappedBy="borrower", //this relationship is owned by Checkout
        fetch=FetchType.LAZY)
private Collection<Checkout> checkouts = new ArrayList<Checkout>();]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>@XxxToXxx Relationship annotated with fetch=LAZY property</para></listitem>
            </itemizedlist>
            
            <figure>
                <title>fetch=LAZY Example Use</title>
<programlisting language="java"><![CDATA[Borrower borrower2 = em.find(Borrower.class, borrower.getId());
logger.info("found borrower: {}", borrower.getName());
assertEquals(6, borrower2.getCheckouts().size());]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Parent accessed, debug printed, and then child collection accessed</para></listitem>
            </itemizedlist>
            
            <figure>
                <title>fetch=LAZY SQL Output</title>
<programlisting language=""><![CDATA[-
    select
        borrower0_.BORROWER_ID as BORROWER1_15_0_,
        borrower0_.endDate as endDate2_15_0_,
        borrower0_.startDate as startDat3_15_0_
    from
        ORMREL_BORROWER borrower0_
    where
        borrower0_.BORROWER_ID=?
-Borrower@7cfb0c4c, ctor()
...
-found borrower: john smith
-
    select
        checkouts0_.CHECKOUT_BID as CHECKOUT4_16_0_,
        checkouts0_.CHECKOUT_ID as CHECKOUT1_16_0_,
        checkouts0_.CHECKOUT_ID as CHECKOUT1_16_1_,
        checkouts0_.CHECKOUT_BID as CHECKOUT4_16_1_,
        checkouts0_.outDate as outDate2_16_1_,
        checkouts0_.returnDate as returnDa3_16_1_
    from
        ORMREL_CHECKOUT checkouts0_
    where
        checkouts0_.CHECKOUT_BID=?
]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Debug for parent printed before child rows retrieved</para></listitem>
                <listitem><para>Child rows retrieved when parent collection accessed</para></listitem>
                <listitem><para>Other SQL details of Borrower left out of example</para></listitem>
            </itemizedlist>
            
            
        </section>
        
        <section id="jpa-relation-fetch-eager">
            <title>fetch=EAGER</title>

            <figure>
                <title>fetch=EAGER Example Declaration</title>
<programlisting language="java"><![CDATA[@OneToMany(mappedBy="borrower", //this relationship is owned by Checkout
        fetch=FetchType.EAGER)
private Collection<Checkout> checkouts = new ArrayList<Checkout>();]]></programlisting>                        
            </figure>


            <figure>
                <title>fetch=EAGER Example Use</title>
<programlisting language="java"><![CDATA[Borrower borrower3 = em.find(Borrower.class, borrowerId);
logger.info("found borrower: {}", borrower.getName());
assertEquals(0,borrower3.getCheckouts().size());        
]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Same as fetch=LAZY case</para></listitem>
            </itemizedlist>
                

            
            <figure>
                <title>fetch=EAGER SQL Output</title>
<programlisting language=""><![CDATA[-
    select
        borrower0_.BORROWER_ID as BORROWER1_15_0_,
        borrower0_.endDate as endDate2_15_0_,
        borrower0_.startDate as startDat3_15_0_,
        checkouts1_.CHECKOUT_BID as CHECKOUT4_16_1_,
        checkouts1_.CHECKOUT_ID as CHECKOUT1_16_1_,
        checkouts1_.CHECKOUT_ID as CHECKOUT1_16_2_,
        checkouts1_.CHECKOUT_BID as CHECKOUT4_16_2_,
        checkouts1_.outDate as outDate2_16_2_,
        checkouts1_.returnDate as returnDa3_16_2_
    from
        ORMREL_BORROWER borrower0_
    left outer join
        ORMREL_CHECKOUT checkouts1_
            on borrower0_.BORROWER_ID=checkouts1_.CHECKOUT_BID
    where
        borrower0_.BORROWER_ID=?
-found borrower: john smith
]]></programlisting>                        

            <itemizedlist spacing="compact">
                <listitem><para>Child objects fetched with parent</para></listitem>
                <listitem><para>Access to child collection occurs after all children fetched</para></listitem>
            </itemizedlist>
            </figure>
            
            <tip>
                <title>fetch=EAGER does not always mean "done "efficiently"</title>
                <para>fetch=EAGER is only a promise to fetch the related object before returning from the 
                call. It does not always mean that a SQL JOIN was performed. There are times (e.g., fetch=EAGER
                on multiple collections within parent) when the provider will perform a SQL JOIN for some of the 
                relationships and the functional equivalent of a fetch=LAZY for the remaining relationships.</para>
            </tip>
            <tip>
                <title>Don't over user fetch=EAGER</title>
                <para>Although useful at times, avoid haphazard use of fetch=EAGER when defining relationships
                and look to rely on custom queries to do this behavior instead. It is very easy to turn a 
                fetch=LAZY into EAGER at query time. It is very difficult to do the opposite. Custom queries
                also allow us to incrementally build a complex parent object tree an optimized query at a time.
                fetch=EAGER will do the same, but may perform 10s, 100s, 1000s of more unoptimized queries
                of child rows we may never need.</para>
            </tip>
        </section>
    </section>
    
    
    <section id="jpa-relation-cascade">
        <title>Cascades</title>
        <itemizedlist spacing="compact">
            <listitem><para>Automatically cause persistence commands to be repeated on related objects</para></listitem>
        </itemizedlist>
        
        <figure>
            <title></title>
<programlisting language="java"><![CDATA[@Entity
@Table(name="RELATIONEX_LICAPP")
public class LicenseApplication {
    @Id @GeneratedValue
    private int id;
    @Temporal(TemporalType.TIMESTAMP)
    private Date updated;
    
    @OneToOne(optional=false, fetch=FetchType.EAGER, 
            cascade={
                CascadeType.PERSIST,
                CascadeType.DETACH,
                CascadeType.REMOVE,
                CascadeType.REFRESH,
                CascadeType.MERGE
            })
    private License license;
]]></programlisting>                        
        </figure>
        
        <variablelist spacing="compact">
            <varlistentry>
                <term><filename>PERSIST</filename></term>
                <listitem><para>Related entities persisted when this entity is passed to em.persist()</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>DETACH</filename></term>
                <listitem><para>Related entities detached from persistence unit when this entity passed to em.detach()</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>REMOVE</filename></term>
                <listitem><para>Related entities deleted from database when this entity passed to em.remove()</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>REFRESH</filename></term>
                <listitem><para>Related entities refreshed with state of database when this entity passed to em.refresh()</para></listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>MERGE</filename></term>
                <listitem><para>Related entities update state of database when this entity is passed to em.merge()</para></listitem>
            </varlistentry>
        </variablelist>
    </section>
    
    <section id="jpa-relation-orphan">
        <title>Orphan Removal</title>
        <itemizedlist spacing="compact">
            <listitem><para>Automatic removal of an object who's sole purpose is to support a related object that may dereference it</para></listitem>
            <listitem><para>Related to cascade=REMOVE but the triggering object is not being deleted</para></listitem>
            <listitem><para>Supported in the following relationships</para>
                <itemizedlist spacing="compact">
                    <listitem><para>@OneToOne</para></listitem>
                    <listitem><para>@OneToMany</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
        
        
        <figure>
            <title>OrphanRemoval Example Declaration</title>
<programlisting language="java"><![CDATA[
@Entity
@Table(name="RELATIONEX_ATTENDEE")
public class Attendee {
    @Id @GeneratedValue
    private int id;
    
    //orphanRemoval will take care of dereference and DELETE from dependent Attendee 
    @OneToOne(cascade=CascadeType.PERSIST, orphanRemoval=true)
    private Residence residence;
]]></programlisting>                        
        </figure>

        <figure>
            <title>Triggering OrphanRemoval</title>
<programlisting language="java"><![CDATA[attendee.setResidence(null);
em.flush();]]></programlisting>                        
        </figure>

        <figure>
            <title>OrphanRemoval Database Interaction</title>
<programlisting language=""><![CDATA[Hibernate: 
    update RELATIONEX_ATTENDEE 
    set name=?, residence_id=? 
    where id=?
Hibernate: 
    delete from RELATIONEX_RESIDENCE 
    where id=?]]></programlisting>                        
        </figure>
       <orderedlist spacing="compact">
            <listitem><para>Attendee.residence_id set to null</para></listitem>
            <listitem><para>Orphaned residence deleted</para></listitem>
       </orderedlist>
    </section>
    
    
    <section id="jpa-relation-summary">
        <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>Use fetch=EAGER when always accessing related objects together</para></listitem>
            <listitem><para>Use fetch=LAZY when commonly access one object without accessing related objects</para></listitem>
            <listitem><para>Use JPA-QL when encountering corner cases that violate default mapping</para></listitem>
            <listitem><para>Cascades can be used to automate persistence actions on an entire object graph</para></listitem>
            <listitem><para>OrphanRemoval can used to automatically delete dereferenced objects that have no use outside the scope of its owning relation</para></listitem>
        </itemizedlist>
    </section>
</chapter>
  
