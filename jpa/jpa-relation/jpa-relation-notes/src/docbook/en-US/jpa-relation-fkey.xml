<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-relation-fkey">
    <title>Foreign Keys</title>
        
    <section id="jpa-relation-fkey-pkjoin">
        <title>Primary Key Join</title>
        <itemizedlist spacing="compact">
            <listitem><para>Special case of <link linkend="jpa-relation-o2o">one-to-one mapping</link></para></listitem>
            <listitem><para>Uses primary key as the foreign key</para></listitem>
            <listitem><para>No additional column for foreign key</para></listitem>
            <listitem><para>Primary keys must match</para></listitem>
        </itemizedlist>
        
        <figure>
            <title>Primary Key Join</title>
            <graphic scale="110" fileref="images/jpa-relation-fkey-pkjoin.png"/>
        </figure>
        
        <figure>
            <title>Primary Key Join Example Database Schema</title>
<programlisting language=""><![CDATA[
    create table ORMREL_BORROWER (
+-----  BORROWER_ID bigint not null,
|       endDate date,
|       startDate date,
|       primary key (BORROWER_ID)
|   )
|   create table ORMREL_PERSON (
+---->  PERSON_ID bigint generated by default as identity,
        firstName varchar(255),
        lastName varchar(255),
        phone varchar(255),
        PERSON_PHOTO bigint,
        primary key (PERSON_ID)
    )
    alter table ORMREL_BORROWER 
        add constraint FKA0973E32F113D9BA 
        foreign key (BORROWER_ID) 
        references ORMREL_PERSON
]]></programlisting>                        
        </figure>

        <figure>
            <title>Primary Key Join Example Java Mapping</title>
<programlisting language="java"><![CDATA[
    @Entity @Table(name="ORMREL_BORROWER")
    public class Borrower  {
        @Id @Column(name="BORROWER_ID")
+-----  private long id;
|       
|       @OneToOne(fetch=FetchType.LAZY, optional=false, 
|               cascade={CascadeType.PERSIST, 
|                        CascadeType.REFRESH,
|                        CascadeType.MERGE})
|       @PrimaryKeyJoinColumn  //the two tables will be joined by PKs
+-----  private Person identity;
|       
|   @Entity
|   @Table(name="ORMREL_PERSON")
|   public class Person  {
|       @Id @GeneratedValue @Column(name="PERSON_ID")
+---->  private long id;]]></programlisting>

<programlisting language="java"><![CDATA[    public Borrower(Person identity) {
        this.id = identity.getId();
        this.identity = identity;
    }]]></programlisting>                        
        </figure>

    <note>
        <para>In this case, the primary key is used as the foreign key and must be set.
            To use the foreign key as the primary key -- use @MapsId</para>
<programlisting language=""><![CDATA[    //@PrimaryKeyJoinColumn  //the two tables will be joined by PKs
    @MapsId
    private Person identity;
    public Borrower(Person identity) {
        this.identity = identity;
    }]]></programlisting>                        
    </note>                        


        <figure>
            <title>Primary Key Join Example Usage</title>
<programlisting language="java"><![CDATA[
//create the person we'll use in the relationship
ejava.examples.orm.rel.annotated.Person person = new Person();
...
//create the Borrower, who requires a Person for its identity
ejava.examples.orm.rel.annotated.Borrower borrower = new Borrower(person);
borrower.setStartDate(new Date());

//persist the borrower, creating the relationship to person
em.persist(borrower);
log.info("created borrower:" + borrower);
assertEquals(person.getId(), borrower.getId()); //ctor copies PK         
]]></programlisting>                        
        </figure>
        
        
        <section id="jpa-relation-fkey-pkjoin-annotation">
           <title>@PrimaryKeyJoinAnnotation</title>
           <para>Signals primary key column used as foreign key -- no separate foreign key column</para>
            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>name (default=primary key column of this entity)</filename></term>
                    <listitem><para>Names column in this entity's table this property maps to when using composite keys</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>referencedColumnName (default=primary key column of joined entity)</filename></term>
                    <listitem><para>Names column in joined entity table this property maps to when using composite keys</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>columnDefinition</filename></term>
                    <listitem><para>Custom DDL definition for column when generating database schema</para></listitem>
                </varlistentry>
            </variablelist>
           
        </section>    
    </section>
    
    
    <section id="jpa-relation-fkey-pkreuse">
        <title>Using Composite Primary Key Property as Foreign Key</title>
        <itemizedlist spacing="compact">
            <listitem><para>Child object on many side, using a composite primary key may reference parent with a property from that key</para></listitem>
            <listitem><para>Primary keys cannot be changed</para></listitem>
            <listitem><para>If primary key used -- database manipulation for foreign keys reasons must be turned off</para></listitem>
        </itemizedlist>
        

        <section id="jpa-relation-fkey-pkreuse-idclass">
            <title>Using @IdClass Composite Primary Key Property as Foreign Key</title>
            <itemizedlist spacing="compact">
                <listitem><para>Primary key used to represent foreign key</para></listitem>
                <listitem><para>Primary key must be known -- cannot be derived from generated value</para></listitem>
            </itemizedlist>

            <figure>
                <title>Composite @IdClass Property Reused for Foreign Key</title>
<programlisting language="java"><![CDATA[@Entity @Table(name="ORMREL_ROOM")
@IdClass(RoomPK.class)
@AttributeOverrides({
    @AttributeOverride(name = "houseId", column=@Column(name="HOUSE_ID")),
    @AttributeOverride(name = "roomId", column=@Column(name="ROOM_ID"))
})
public class Room {
    @Id 
    private int houseId;
    @Id
    private int roomId;
    
    @ManyToOne(fetch=FetchType.LAZY, optional=false)
    //assign join column to primary key value and turn off inserts/updates here
    @JoinColumn(name="HOUSE_ID", insertable=false, updatable=false)
    private House house;

    public Room() {}
    public Room(House house, int roomId) {
        this.houseId=house.getId();
        this.house=house;
        this.roomId=roomId;
    }]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Setting primary key prior to persisting</para></listitem>
                <listitem><para>Foreign key used twice -- once for relation and once for primary key</para></listitem>
            </itemizedlist>


            <figure>
                <title>Referenced Parent Object -- Source of Foreign Key/Primary Key Value</title>
<programlisting language="java"><![CDATA[@Entity @Table(name="ORMREL_HOUSE")
public class House {
    @Id @GeneratedValue
    private int id;
    
    @OneToMany(cascade={CascadeType.PERSIST, CascadeType.REMOVE}, 
            fetch=FetchType.LAZY, mappedBy="house")
    private Collection<Room> rooms=new ArrayList<Room>();]]></programlisting>                        
            </figure>

            <figure>
                <title>Composite @IdClass</title>
<programlisting language="java"><![CDATA[public class RoomPK implements Serializable {
    @Column(name="PK_HOUSE_ID") //overridden
    private int houseId;
    @Column(name="PK_ROOM_ID") //overridden
    private int roomId;]]></programlisting>                        
            </figure>

            <figure>
                <title>Database Schema</title>
<programlisting language=""><![CDATA[create table ORMREL_HOUSE (
    id integer generated by default as identity,
    primary key (id)
)
create table ORMREL_ROOM (
    HOUSE_ID integer not null,
    ROOM_ID integer not null,
    primary key (HOUSE_ID, ROOM_ID)
)
alter table ORMREL_ROOM 
    add constraint FKD9EEA1ABC0069D7C 
    foreign key (HOUSE_ID) 
    references ORMREL_HOUSE]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>HOUSE_ID is both primary and foreign key for ROOM</para></listitem>
            </itemizedlist>
            
            <figure>
                <title>Example Use</title>
<programlisting language="java"><![CDATA[House house = new House();
em.persist(house); //generate a PK for parent
house.getRooms().add(new Room(house,0));
house.getRooms().add(new Room(house,1));
house.getRooms().add(new Room(house,2));
em.persist(house); //cascade persists to children

//get a new copy of house
em.flush(); em.clear();
House house2 = em.find(House.class, house.getId());]]></programlisting>                        
            </figure>

            <figure>
                <title>Example Output</title>
<programlisting language=""><![CDATA[Hibernate: 
    insert into ORMREL_HOUSE (id) 
    values (null)
Hibernate: 
    insert into ORMREL_ROOM (HOUSE_ID, ROOM_ID) 
    values (?, ?)
...
Hibernate: 
    select house0_.id as id1_18_0_ 
    from ORMREL_HOUSE house0_ 
    where house0_.id=?
Hibernate: 
    select
        rooms0_.HOUSE_ID as HOUSE1_18_1_,
        rooms0_.HOUSE_ID as HOUSE1_30_1_,
        rooms0_.ROOM_ID as ROOM2_30_1_,
        rooms0_.HOUSE_ID as HOUSE1_30_0_,
        rooms0_.ROOM_ID as ROOM2_30_0_ 
    from ORMREL_ROOM rooms0_ 
    where rooms0_.HOUSE_ID=?]]></programlisting>                        
            </figure>
        </section>



        <section id="jpa-relation-fkey-pkreuse-embeddedid">
            <title>Using @EmbeddedId Composite Primary Key Property as Foreign Key</title>
            <itemizedlist spacing="compact">
                <listitem><para>Primary key used to represent foreign key</para></listitem>
                <listitem><para>Primary key must be known -- cannot be derived from generated value</para></listitem>
            </itemizedlist>
            
            <figure>
                <title>Composite @EmbeddedId Property Reused for Foreign Key</title>
<programlisting language="java"><![CDATA[@Entity @Table(name="ORMREL_DOOR")
public class Door {
    @EmbeddedId
    @AttributeOverrides({
        @AttributeOverride(name="houseId", column=@Column(name="HOUSE_ID")),
        @AttributeOverride(name="doorId", column=@Column(name="DOOR_ID"))
    })
    private DoorPK pk;
    
    @ManyToOne(fetch=FetchType.LAZY, optional=false)
    //assign join column to primary key value and turn off inserts/updates here
    @JoinColumn(name="HOUSE_ID", insertable=false, updatable=false)
    private House house;
    
    public Door() {}
    public Door(House house, int doorId) {
        pk=new DoorPK(house.getId(), doorId);
        this.house=house;
    }]]></programlisting>                        
            </figure>

            <figure>
                <title>Composite @Embeddable Class</title>
<programlisting language="java"><![CDATA[@Embeddable
public class DoorPK implements Serializable {
    @Column(name="PK_HOUSE_ID") //overridden
    private int houseId;
    @Column(name="PK_DOOR_ID") //overridden
    private int doorId;]]></programlisting>                        
            </figure>

            <figure>
                <title>Database Schema</title>
<programlisting language=""><![CDATA[create table ORMREL_DOOR (
    DOOR_ID integer not null,
    HOUSE_ID integer not null,
    primary key (DOOR_ID, HOUSE_ID)
)
alter table ORMREL_DOOR 
    add constraint FKD9E8447EC0069D7C 
    foreign key (HOUSE_ID) 
    references ORMREL_HOUSE]]></programlisting>                        
            </figure>

            <figure>
                <title>Example Use</title>
<programlisting language="java"><![CDATA[House house = new House();
em.persist(house); //generate a PK for parent
house.getDoors().add(new Door(house,0));
house.getDoors().add(new Door(house,1));
house.getDoors().add(new Door(house,2));
em.persist(house); //cascade persists to children

//get a new copy of house
em.flush(); em.clear();
House house2 = em.find(House.class, house.getId());]]></programlisting>                        
            </figure>

            <figure>
                <title>Example Output</title>
<programlisting language=""><![CDATA[Hibernate: 
    insert into ORMREL_HOUSE (id) 
    values (null)
Hibernate: 
    insert into ORMREL_DOOR (DOOR_ID, HOUSE_ID) 
    values (?, ?)
...
Hibernate: 
    select house0_.id as id1_18_0_ 
    from ORMREL_HOUSE house0_ 
    where house0_.id=?
Hibernate: 
    select
        doors0_.HOUSE_ID as HOUSE2_18_1_,
        doors0_.DOOR_ID as DOOR1_17_1_,
        doors0_.HOUSE_ID as HOUSE2_17_1_,
        doors0_.DOOR_ID as DOOR1_17_0_,
        doors0_.HOUSE_ID as HOUSE2_17_0_ 
    from ORMREL_DOOR doors0_ 
    where doors0_.HOUSE_ID=?]]></programlisting>                        
            </figure>
            
        </section>

    </section>




    <section id="jpa-relation-fkey-mapsid">
        <title>Using Foreign Key in Composite Primary Key</title>
        <itemizedlist spacing="compact">
            <listitem><para>Primary key value is derived from foreign key value</para></listitem>
            <listitem><para>Value can be dynamically generated</para></listitem>
        </itemizedlist>
        
        
        <section id="jpa-relation-fkey-mapsid-idclass">
            <title>Using Foreign Key in @IdClass Composite Primary Key</title>
            
            <figure>
                <title>Composite @IdClass Property Derived from Foreign Key</title>
<programlisting language="java"><![CDATA[@Entity @Table(name="ORMREL_RESIDENT")
@IdClass(ResidentPK.class)
@AttributeOverrides({
    @AttributeOverride(name = "residentId", column=@Column(name="RESIDENT_ID"))
})
public class Resident {
    @Id 
    @ManyToOne(fetch=FetchType.LAZY, optional=false)
    @JoinColumn(name="HOUSE_ID", nullable=false)
    private House house;
    
    @Id
    private int residentId; 
    
    public Resident() {}
    public Resident(House house, int residentId) {
        this.house=house;
        this.residentId=residentId;
    }]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>No longer modeling separate primary key - derived from foreign key</para></listitem>
            </itemizedlist>

            <figure>
                <title>Composite @IdClass Class</title>
<programlisting language="java"><![CDATA[public class ResidentPK implements Serializable {
    private int house;
    private int residentId;]]></programlisting>                        
            </figure>

            <figure>
                <title>Database Schema</title>
<programlisting language=""><![CDATA[create table ORMREL_RESIDENT (
    HOUSE_ID integer not null,
    RESIDENT_ID integer not null,
    primary key (HOUSE_ID, RESIDENT_ID)
)
alter table ORMREL_RESIDENT 
    add constraint FKEDC7E20C0069D7C 
    foreign key (HOUSE_ID) 
    references ORMREL_HOUSE]]></programlisting>                        
            </figure>

            <figure>
                <title>Example Use</title>
<programlisting language="java"><![CDATA[House house = new House();
em.persist(house); //generate a PK for parent
house.getResidents().add(new Resident(house,0));
house.getResidents().add(new Resident(house,1));
house.getResidents().add(new Resident(house,2));
em.persist(house); //cascade persists to children

//get a new copy of house
em.flush(); em.clear();
House house2 = em.find(House.class, house.getId());]]></programlisting>                        
            </figure>

            <figure>
                <title>Example Output</title>
<programlisting language=""><![CDATA[Hibernate: 
    insert into ORMREL_HOUSE (id) 
    values (null)
Hibernate: 
    insert into ORMREL_RESIDENT (HOUSE_ID, RESIDENT_ID) 
    values (?, ?)
...
Hibernate: 
    select house0_.id as id1_18_0_ 
    from ORMREL_HOUSE house0_ 
    where house0_.id=?
Hibernate: 
    select
        residents0_.HOUSE_ID as HOUSE1_18_1_,
        residents0_.HOUSE_ID as HOUSE1_29_1_,
        residents0_.RESIDENT_ID as RESIDENT2_29_1_,
        residents0_.HOUSE_ID as HOUSE1_29_0_,
        residents0_.RESIDENT_ID as RESIDENT2_29_0_ 
    from ORMREL_RESIDENT residents0_ 
    where residents0_.HOUSE_ID=?]]></programlisting>                        
            </figure>
        </section>



        <section id="jpa-relation-fkey-mapsid-embeddedid">
            <title>Using Foreign Key in @EmbeddedId Composite Primary Key (@MapsId)</title>

            <figure>
                <title>Composite @EmbeddedId Property Derived from Foreign Key</title>
<programlisting language="java"><![CDATA[@Entity @Table(name="ORMREL_MORTGAGE")
public class Mortgage {
    @EmbeddedId
    @AttributeOverrides({
        @AttributeOverride(name="mortgageId", column=@Column(name="MORTGAGE_ID"))
    })
    private MortgagePK pk;
    
    @ManyToOne(fetch=FetchType.LAZY, optional=false)
    @JoinColumn(name="HOUSE_ID", nullable=false)
    @MapsId("houseId")
    private House house;
    
    public Mortgage() {}
    public Mortgage(House house, int mortgageId) {
        pk=new MortgagePK(house.getId(), mortgageId);
        this.house=house;
    }]]></programlisting>                        
            </figure>

            <figure>
                <title>Composite @Embeddable Class</title>
<programlisting language="java"><![CDATA[@Embeddable
public class MortgagePK implements Serializable {
    @Column(name="PK_HOUSE_ID") //overridden
    private int houseId;
    @Column(name="PK_MORTGAGE_ID") //overridden
    private int mortgageId;]]></programlisting>                        
            </figure>

            <figure>
                <title>Database Schema</title>
<programlisting language=""><![CDATA[create table ORMREL_MORTGAGE (
    HOUSE_ID integer not null,
    MORTGAGE_ID integer not null,
    primary key (HOUSE_ID, MORTGAGE_ID)
)
alter table ORMREL_MORTGAGE 
    add constraint FK175C656CC0069D7C 
    foreign key (HOUSE_ID) 
    references ORMREL_HOUSE]]></programlisting>                        
            </figure>

            <figure>
                <title>Example Use</title>
<programlisting language="java"><![CDATA[House house = new House();
em.persist(house); //generate a PK for parent
house.getMortgages().add(new Mortgage(house,0));
house.getMortgages().add(new Mortgage(house,1));
house.getMortgages().add(new Mortgage(house,2));
em.persist(house); //cascade persists to children

//get a new copy of house
em.flush(); em.clear();
House house2 = em.find(House.class, house.getId());]]></programlisting>                        
            </figure>

            <figure>
                <title>Example Output</title>
<programlisting language=""><![CDATA[Hibernate: 
    insert into ORMREL_HOUSE (id) 
    values (null)
Hibernate: 
    insert into ORMREL_MORTGAGE (HOUSE_ID, MORTGAGE_ID) 
    values (?, ?)
...
Hibernate: 
    select house0_.id as id1_18_0_ 
    from ORMREL_HOUSE house0_ 
    where house0_.id=?
Hibernate: 
    select
        mortgages0_.HOUSE_ID as HOUSE1_18_1_,
        mortgages0_.HOUSE_ID as HOUSE1_26_1_,
        mortgages0_.MORTGAGE_ID as MORTGAGE2_26_1_,
        mortgages0_.HOUSE_ID as HOUSE1_26_0_,
        mortgages0_.MORTGAGE_ID as MORTGAGE2_26_0_ 
    from ORMREL_MORTGAGE mortgages0_ 
    where mortgages0_.HOUSE_ID=?]]></programlisting>                        
            </figure>
        </section>
    </section>





    <section id="jpa-relation-fkey-jointable">
        <title>Join Tables</title>
        
        <figure>
            <title>Join/Link Table</title>
            <graphic scale="100" fileref="images/jpa-relation-one-to-many-uni-jointable.png"/>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Separate table created to hold foreign keys</para></listitem>
            <listitem><para>Can be used for all relationship enumatations and directions</para></listitem>
        </itemizedlist>
        
        <figure>
            <title>Join/Link Table Database Table Schema</title>
<programlisting language="java"><![CDATA[    create table ORMREL_INVENTORY (
/---->  id bigint generated by default as identity,
|       name varchar(255),
|       primary key (id)
|   )
|   create table ORMREL_INVENTORY_MEDIA (
`-----  ORMREL_INVENTORY_id bigint not null,
/-----  media_MEDIA_ID bigint not null
|   )
|   create table ORMREL_MEDIA (
`---->  MEDIA_ID bigint generated by default as identity,
        title varchar(255),
        primary key (MEDIA_ID)
    )]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Join table name either derived from associated tables or explicitly named</para></listitem>
            <listitem><para>Join table columns either derived from referenced table column or explicitly named</para></listitem>
        </itemizedlist>
                                
        <figure>
            <title>Join/Link Table Database Constraint Schema</title>
<programlisting language=""><![CDATA[    alter table ORMREL_INVENTORY_MEDIA 
        add constraint UK_F6FA5C31B7DAA951 unique (media_MEDIA_ID)
    alter table ORMREL_INVENTORY_MEDIA 
        add constraint FKF6FA5C31A70D4E48 
        foreign key (media_MEDIA_ID) 
        references ORMREL_MEDIA
    alter table ORMREL_INVENTORY_MEDIA 
        add constraint FKF6FA5C317DD5E49D 
        foreign key (ORMREL_INVENTORY_id) 
        references ORMREL_INVENTORY]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Unique constraint enforces the (1)-to-Many aspect of relationship</para></listitem>
        </itemizedlist>

        <figure>
            <title>Join/Link Table Database Java Mapping</title>
<programlisting language="java"><![CDATA[
    @Entity @Table(name="ORMREL_INVENTORY")
    public class Inventory {
        @Id @GeneratedValue
        private long id;
        private String name;
    
        @OneToMany(cascade={CascadeType.ALL})
        @JoinTable(name="ORMREL_INVENTORY_MEDIA")
/-----  private Collection<Media> media = new ArrayList<Media>();
|   
|   @Entity @Table(name="ORMREL_MEDIA")
|   public class Media  {    
|       @Id @GeneratedValue @Column(name="MEDIA_ID")
`---->  private long id;
]]></programlisting>                        
        </figure>

        <section id="jpa-relation-fkey-jointable-annotation">
           <title>@JoinTable Annotation</title>
            <variablelist spacing="compact">
                <varlistentry>
                    <term><filename>name</filename></term>
                    <listitem><para>Database table name for join table</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>catalog</filename></term>
                    <listitem><para>Database catalog for join table</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>schema</filename></term>
                    <listitem><para>Database schema for join table</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>joinColumns</filename></term>
                    <listitem><para>List of @JoinColumn definitions from join table back to owning entity class table</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>inverseJoinColumns</filename></term>
                    <listitem><para>List of @JoinColumn definitions from join table to inverse entity class table</para></listitem>
                </varlistentry>
                <varlistentry>
                    <term><filename>uniqueConstraints</filename></term>
                    <listitem><para>Uniqueness constraints to be added to join table</para></listitem>
                </varlistentry>
            </variablelist>
        </section>    
    </section>

    <section id="jpa-relation-fkey-">
        <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>Joining by primary keys (Primary Key Join)</para></listitem>
            <listitem><para>Reusing primary key as foreign key (insert=false, update=false)</para></listitem>
            <listitem><para>Deriving primary key from foreign key (@MapsId for @EmbeddedId)</para></listitem>
            <listitem><para>Indirect joins using a separate table (Join Table)</para></listitem>
        </itemizedlist>
    </section>
</chapter>
  
