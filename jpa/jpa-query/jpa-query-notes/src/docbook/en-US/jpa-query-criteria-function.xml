<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-query-criteria-function">
    <title>Criteria Functions</title>
    <para></para>
        
    <section id="jpa-query-criteria-function-string">
        <title>String Functions</title>
  
        <section id="jpa-query-criteria-function-string-base">
            <title>Base Query</title>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select c from Customer c where c.firstName='CAT']]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[CriteriaQuery qdef = cb.createQuery();
Root<Customer> c = qdef.from(Customer.class);

qdef.select(c)
    .where(cb.equal(c.get("firstName"),"CAT"));]]></programlisting>
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Using an untyped CriteriaQuery to be able to switch
                     between different query output types within example</para></listitem>
            </itemizedlist>
                        
            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where customer0_.FIRST_NAME=?]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>No rows found because 'CAT' does not match anything because of case</para></listitem>
            </itemizedlist>
        </section>

        <section id="jpa-query-criteria-function-string-lower">
            <title>LOWER</title>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select c from Customer c where c.firstName=LOWER('CAT')]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.select(c)
    .where(cb.equal(c.get("firstName"),cb.lower(cb.literal("CAT"))));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where customer0_.FIRST_NAME=lower(?)

 -found result:firstName=cat, lastName=inhat]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>One customer found because case-sensitive compare now correct</para></listitem>
            </itemizedlist>
        </section>

        <section id="jpa-query-criteria-function-string-upper">
            <title>UPPER</title>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select UPPER(c.firstName) from Customer c where c.firstName=LOWER('CAT')]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.select(cb.upper(c.<String>get("firstName")))
    .where(cb.equal(c.get("firstName"),cb.lower(cb.literal("CAT"))));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select upper(customer0_.FIRST_NAME) as col_0_0_ 
    from JPAQL_CUSTOMER customer0_ 
    where customer0_.FIRST_NAME=lower(?)

 -found result:CAT]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>First name of customer located returned in upper case</para></listitem>
            </itemizedlist>
        </section>          

        <section id="jpa-query-criteria-function-string-trim">
            <title>TRIM</title>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select TRIM(LEADING 'c' FROM c.firstName) from Customer c where c.firstName='cat')]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.select(cb.trim(Trimspec.LEADING, 'c', c.<String>get("firstName")))
    .where(cb.equal(c.get("firstName"),"cat"));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select trim(LEADING ? 
    from customer0_.FIRST_NAME) as col_0_0_ 
    from JPAQL_CUSTOMER customer0_ 
    where customer0_.FIRST_NAME=?
 -found result:at]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Customer's name, excluding initial 'c' character, returned</para></listitem>
            </itemizedlist>
        </section>
        
        <section id="jpa-query-criteria-function-string-concat">
            <title>CONCAT</title>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select c from Customer c where CONCAT(CONCAT(c.firstName,' '),c.lastName) ='cat inhat')]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.select(c)
    .where(cb.equal(
            cb.concat(
                    cb.concat(c.<String>get("firstName"), " "),
                    c.<String>get("lastName")),
            "cat inhat"));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where (customer0_.FIRST_NAME||?||customer0_.LAST_NAME)=?

 -found result:firstName=cat, lastName=inhat]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Customer located after concatenation of fields yields match</para></listitem>
            </itemizedlist>
        </section>            

        <section id="jpa-query-criteria-function-string-length">
            <title>LENGTH</title>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select c from Customer c where LENGTH(c.firstName) = 3]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.select(c)
    .where(cb.equal(cb.length(c.<String>get("firstName")),3));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where length(customer0_.FIRST_NAME)=3

 -found result:firstName=cat, lastName=inhat]]></programlisting>                        
            </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Customer found where length of firstName matches specified length criteria</para></listitem>
        </itemizedlist>
    </section>

        <section id="jpa-query-criteria-function-string-locate">
            <title>LOCATE</title>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[]]>select c from Customer c where LOCATE('cat',c.firstName,2) > 0</programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.select(c)
    .where(cb.greaterThan(cb.locate(c.<String>get("firstName"), "cat", 2),0));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where locate(?, customer0_.FIRST_NAME, 2)>0]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>No firstName found with 'cat' starting at position=2</para></listitem>
            </itemizedlist>
        
            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select c from Customer c where LOCATE('at',c.firstName,2) > 1]]></programlisting>

<programlisting language="java"><![CDATA[qdef.select(c)
    .where(cb.greaterThan(cb.locate(c.<String>get("firstName"), "at", 2),1));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where locate(?, customer0_.FIRST_NAME, 2)>1

 -found result:firstName=cat, lastName=inhat]]></programlisting>                        
            </figure>
        <itemizedlist spacing="compact">
            <listitem><para>firstName found with 'at' starting at a position 2</para></listitem>
        </itemizedlist>
    </section>
    
        <section id="jpa-query-criteria-function-string-substring">
            <title>SUBSTRING</title>    

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select SUBSTRING(c.firstName,2,2) from Customer c where c.firstName = 'cat']]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.select(cb.substring(c.<String>get("firstName"),  2, 2))
    .where(cb.equal(c.get("firstName"), "cat"));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select substring(customer0_.FIRST_NAME, 2, 2) as col_0_0_ 
    from JPAQL_CUSTOMER customer0_ 
    where customer0_.FIRST_NAME=?

 -found result:at]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Return the two character substring of firstName starting at position two</para></listitem>
            </itemizedlist>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select c from Customer c where SUBSTRING(c.firstName,2,2) = 'at']]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.select(c)
    .where(cb.equal(
            cb.substring(c.<String>get("firstName"), 2, 2), 
            "at"));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where substring(customer0_.FIRST_NAME, 2, 2)=?
 -found result:firstName=cat, lastName=inhat]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Find the customer with a two characters starting a position two of firstName equaling  'at'</para></listitem>
            </itemizedlist>
        </section>
    </section>





    <section id="jpa-query-criteria-function-date">
        <title>Date Functions</title>
        <itemizedlist spacing="compact">
            <listitem><para>CriteriaBuilder.currentDate()</para></listitem>
            <listitem><para>CriteriaBuilder.currentTime()</para></listitem>
            <listitem><para>CriteriaBuilder.currentTimestamp()</para></listitem>
        </itemizedlist>
  
        <figure>
            <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select s from Sale s
where s.date < CURRENT_DATE]]></programlisting>
        </figure>

        <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[CriteriaQuery<Sale> qdef = cb.createQuery(Sale.class);
Root<Sale> s = qdef.from(Sale.class);
qdef.select(s);

qdef.where(cb.lessThan(s.<Date>get("date"), cb.currentDate()));]]></programlisting>                        
            </figure>
  
            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    where sale0_.date<current_date()
...
 -found result:date=1998-04-10 10:13:35, amount=$100.00, buyer=1, clerks(1)={1, }
...
 -found result:date=1999-06-11 14:15:10, amount=$150.00, buyer=2, clerks(2)={1, 2, }]]></programlisting>                            
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Located two Sales that occurred prior to today's date</para></listitem>
            </itemizedlist>

            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select s from Sale s
where s.date = CURRENT_DATE]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.where(cb.equal(s.<Date>get("date"), cb.currentDate()));]]></programlisting>                        
            </figure>
  
            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    where sale0_.date=current_date()]]></programlisting>                            
            </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Located no sales on today's date</para></listitem>
            <listitem><para>Update with a bulk query</para></listitem>
        </itemizedlist>

            <note>
                <para>Criteria API added Bulk Updates in JPA 2.1</para>
            </note>

           <figure>
            <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[update Sale s set s.date = CURRENT_DATE]]></programlisting>
            </figure>
            <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[CriteriaUpdate<Sale> qupdate = cb.createCriteriaUpdate(Sale.class);
Root<Sale> s2 = qupdate.from(Sale.class);
qupdate.set(s2.<Date>get("date"), cb.currentDate());
int rows = em.createQuery(qupdate).executeUpdate();]]></programlisting>                        
            </figure>

           <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[update JPAQL_SALE set date=CURRENT_DATE]]></programlisting>                            
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Update all sales to today</para></listitem>
            </itemizedlist>

        
        
        
        <figure>
            <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select s from Sale s
where s.date = CURRENT_DATE]]></programlisting>
        </figure>

        <figure>
            <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.where(cb.equal(s.<Date>get("date"), cb.currentDate()));]]></programlisting>                        
        </figure>
  
        <figure>
            <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    where sale0_.date=current_date()
...
 -found result:date=2013-06-05 00:00:00, amount=$100.00, buyer=1, clerks(1)={1, }
...
 -found result:date=2013-06-05 00:00:00, amount=$150.00, buyer=2, clerks(2)={1, 2, }]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Now locating sales for today's date</para></listitem>
        </itemizedlist>
        
        <note>
            <para>Bulk commands (i.e., update) invalidate cached entities. You must refresh their
                state with the database or detach/clear them from the persistence context to 
                avoid using out-dated information.</para>
        </note>
    </section>


    <section id="jpa-query-criteria-function-orderby">
        <title>Order By</title>
        <itemizedlist spacing="compact">
            <listitem><para>ASC - ascending order</para></listitem>
            <listitem><para>DESC - descending order</para></listitem>
        </itemizedlist>

        <figure>
            <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select s from Sale s ORDER BY s.amount ASC]]></programlisting>
        </figure>

        <figure>
            <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[CriteriaQuery<Sale> qdef = cb.createQuery(Sale.class);
Root<Sale> s = qdef.from(Sale.class);
qdef.select(s);

qdef.orderBy(cb.asc(s.get("amount")));]]></programlisting>                        
        </figure>

        <figure>
            <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    order by sale0_.amount ASC
...
 -found result:date=1998-04-10 10:13:35, amount=$100.00, buyer=1, clerks(1)={1, }
...
 -found result:date=1999-06-11 14:15:10, amount=$150.00, buyer=2, clerks(2)={1, 2, }]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Note the ASC order on amount</para></listitem>
        </itemizedlist>

        <figure>
            <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select s from Sale s ORDER BY s.amount DESC]]></programlisting>
        </figure>

        <figure>
            <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[qdef.orderBy(cb.desc(s.get("amount")));]]></programlisting>                        
        </figure>

        <figure>
            <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    order by sale0_.amount DESC
 -found result:date=1999-06-11 14:15:10, amount=$150.00, buyer=2, clerks(2)={1, 2, }
 -found result:date=1998-04-10 10:13:35, amount=$100.00, buyer=1, clerks(1)={1, }]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Note the DESC order on amount</para></listitem>
        </itemizedlist>
    </section>

    <section id="jpa-query-criteria-function-aggregate">
        <title>Aggregate Functions</title>
        <para></para>
  
        <section id="jpa-query-criteria-function-aggregate-count">
            <title>COUNT</title>
            
            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select COUNT(s) from Sale s]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language=""><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Number> qdef = cb.createQuery(Number.class);
Root<Sale> s = qdef.from(Sale.class);

qdef.select(cb.count(s));]]></programlisting>                        
            </figure>


            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[select count(*) as col_0_0_ 
from JPAQL_SALE sale0_]]></programlisting>                            
            </figure>
        </section>    
  
        <section id="jpa-query-criteria-function-aggregate-minmax">
            <title>MIN/MAX</title>
            
            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select min(s.amount) from Sale s]]></programlisting>
            </figure>
            
            <figure>
                <title>Criteria API Definition</title>
<programlisting language=""><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Number> qdef = cb.createQuery(Number.class);
Root<Sale> s = qdef.from(Sale.class);

qdef.select(cb.min(s.<BigDecimal>get("amount")));]]></programlisting>                        
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select min(sale0_.amount) as col_0_0_ 
    from JPAQL_SALE sale0_
 -found result:100.00]]></programlisting>                            
            </figure>


            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select max(s.amount) from Sale s]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language=""><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Number> qdef = cb.createQuery(Number.class);
Root<Sale> s = qdef.from(Sale.class);

qdef.select(cb.max(s.<BigDecimal>get("amount")));]]></programlisting>                        
            </figure>


            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select max(sale0_.amount) as col_0_0_ 
    from JPAQL_SALE sale0_
 -found result:150.00]]></programlisting>                            
            </figure>
        </section>    
  
        <section id="jpa-query-criteria-function-aggregate-sumave">
            <title>SUM/AVE</title>
            
            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select sum(s.amount) from Sale s]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language=""><![CDATA[CriteriaQuery<Number> qdef = cb.createQuery(Number.class);
Root<Sale> s = qdef.from(Sale.class);
//select sum(s.amount) from Sale s
qdef.select(cb.sum(s.<BigDecimal>get("amount")));]]></programlisting>
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select sum(sale0_.amount) as col_0_0_ 
    from JPAQL_SALE sale0_
 -found result:250.0]]></programlisting>                           
            </figure>

 
            <figure>
                <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select ave(s.amount) from Sale s]]></programlisting>
            </figure>

            <figure>
                <title>Criteria API Definition</title>
<programlisting language=""><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Number> qdef = cb.createQuery(Number.class);
Root<Sale> s = qdef.from(Sale.class);

qdef.select(cb.avg(s.<BigDecimal>get("amount")));]]></programlisting>
            </figure>

            <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select avg(cast(sale0_.amount as double)) as col_0_0_ 
    from JPAQL_SALE sale0_
 -found result:125.0]]></programlisting>                            
            </figure>
        </section>    
    </section>


    <section id="jpa-query-criteria-function-groupby">
        <title>Group By</title>

        <figure>
            <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select c, COUNT(s) from Clerk c
LEFT JOIN c.sales s
GROUP BY c]]></programlisting>
        </figure>

        <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[CriteriaQuery<Object[]> qdef = cb.createQuery(Object[].class);
Root<Clerk> c = qdef.from(Clerk.class);
Join<Clerk,Sale> s = c.join("sales", JoinType.LEFT);

qdef.select(cb.array(c, cb.count(s)))
    .groupBy(c);]]></programlisting>                        
            </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Get count of sales for each clerk</para></listitem>
        </itemizedlist>

        <figure>
                <title>Runtime Output</title>
<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as col_0_0_,
        count(sale2_.SALE_ID) as col_1_0_,
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    left outer join JPAQL_SALE_CLERK_LINK sales1_ on clerk0_.CLERK_ID=sales1_.CLERK_ID 
    left outer join JPAQL_SALE sale2_ on sales1_.SALE_ID=sale2_.SALE_ID 
    group by clerk0_.CLERK_ID
...
 -found=[firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }, 2]
...
 -found=[firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }, 1]
...
 -found=[firstName=Jack, lastName=Pep, hireDate=1973-03-01, termDate=null, sales(0)={}, 0]]]></programlisting>                            
            </figure>
    </section>






    <section id="jpa-query-criteria-function-having">
        <title>Having</title>
  
        <figure>
            <title>Equivalent JPAQL</title>
<programlisting language=""><![CDATA[select c, COUNT(s) from Clerk c
LEFT JOIN c.sales s
GROUP BY c
HAVING COUNT(S) <= 1]]></programlisting>
        </figure>

        <figure>
                <title>Criteria API Definition</title>
<programlisting language="java"><![CDATA[CriteriaQuery<Object[]> qdef = cb.createQuery(Object[].class);
Root<Clerk> c = qdef.from(Clerk.class);
Join<Clerk,Sale> s = c.join("sales", JoinType.LEFT);

qdef.select(cb.array(c, cb.count(s)))
    .groupBy(c)
    .having(cb.le(cb.count(s), 1));]]></programlisting>                        
            </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Provide a list of Clerks and their count of Sales for counts &lt;= 1</para></listitem>
        </itemizedlist>

        <figure>
            <title>Runtime Output</title>
<programlisting language=""><![CDATA[
    select
        clerk0_.CLERK_ID as col_0_0_,
        count(sale2_.SALE_ID) as col_1_0_,
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    left outer join JPAQL_SALE_CLERK_LINK sales1_ on clerk0_.CLERK_ID=sales1_.CLERK_ID 
    left outer join JPAQL_SALE sale2_ on sales1_.SALE_ID=sale2_.SALE_ID 
    group by clerk0_.CLERK_ID 
    having count(sale2_.SALE_ID)<=1
...
 -found=[firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }, 1]
...
 -found=[firstName=Jack, lastName=Pep, hireDate=1973-03-01, termDate=null, sales(0)={}, 0]]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Wed matched on Moe (1 sale) and Jack (0 sales)</para></listitem>
        </itemizedlist>
    </section>



<!-- 
    <section id="jpa-query-criteria-function-">
        <title></title>

        <figure>
                <title>Equivalent JPAQL</title>
            </figure>
<programlisting language=""><![CDATA[
]]></programlisting>

        <figure>
                <title>Criteria API Definition</title>
            </figure>
<programlisting language="java"><![CDATA[
]]></programlisting>                        
  
        <itemizedlist spacing="compact">
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
            <listitem><para></para></listitem>
        </itemizedlist>

        <para>In programming context</para>
<programlisting language="java"><![CDATA[
]]></programlisting>                        

        <figure>
                <title>Runtime Output</title>
            </figure>
<programlisting language=""><![CDATA[
]]></programlisting>                            
    </section>
 -->

    <section id="jpa-query-criteria-function-summary">
       <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>Property and Date Functions</para></listitem>
            <listitem><para>Order By</para></listitem>
            <listitem><para>Group By, Aggregate Functions, and Having</para></listitem>
        </itemizedlist>
    </section>    
</chapter>
  
