<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-query-types">
    <title>JPA Query Types</title>
    <para>Three fundamental query types within JPA</para>
    <itemizedlist spacing="compact">
        <listitem><para>JPA Query Language (JPA) - entity/property/relationship-based</para></listitem>
        <listitem><para>Native SQL - table/column-based</para></listitem>
        <listitem><para>Criteria API - entity/property/relationship-based using Java classes</para></listitem>
    </itemizedlist>
    
        
    <section id="jpa-query-types-jpaql">
        <title>JPA Query Language (JPA-QL) Queries</title>
        <itemizedlist spacing="compact">
            <listitem><para>Access to the *entity* model using a SQL-like text query language</para></listitem>
            <listitem><para>Queries expressed using entities, properties, and relationships</para></listitem>
        </itemizedlist>
        <itemizedlist spacing="compact">
            <listitem><para>Pros</para>
                <itemizedlist spacing="compact">
                    <listitem><para>More concise (than other query forms)</para></listitem>
                    <listitem><para>Familiar to SQL users</para></listitem>
                    <listitem><para>Abstracts query away from table, column, primary key, and relationship mapping</para></listitem>
                    <listitem><para>Can be defined within XML deployment descriptors</para></listitem>
                    <listitem><para>Produces portable SQL</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Cons</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Not (overly) type-safe</para></listitem>
                    <listitem><para>No help from Java compiler in constructing query expression</para></listitem>
                    <listitem><para>Don't find out most errors until runtime</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

        <figure>
            <title>Building a JPA Query using JPA-QL</title>
<programlisting language="java"><![CDATA[String jpaqlString =
    "select c from Customer c " +
    "where c.firstName = :firstName " +
    "order by c.lastName ASC"; 
//use query string to build typed JPA-QL query
TypedQuery<Customer> query = em
        .createQuery(jpaqlString,Customer.class);]]></programlisting>                        
        </figure>
       <itemizedlist>
            <listitem><para>"c" is part of root query</para></listitem>
            <listitem><para>"c" represents rows from Customer entity table(s)</para></listitem>
            <listitem><para>"c.lastName" is path off root term</para></listitem>
            <listitem><para>":firstName" is parameter placeholder</para></listitem>
            <listitem><para>"c.firstName" is path off root term</para></listitem>
            <listitem><para>"Customer.class" type parameter allows for a type-safe return result</para></listitem>
       </itemizedlist>

        <figure>
            <title>Executing a JPA Query (built from JPA-QL)</title>
<programlisting language="java"><![CDATA[//at this point we are query-type agnostic
List<Customer> customers = query
        .setParameter("firstName", "thing")
        .getResultList();
log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>                        

<programlisting language=""><![CDATA[
select
    customer0_.CUSTOMER_ID as CUSTOMER1_3_,
    customer0_.FIRST_NAME as FIRST2_3_,
    customer0_.LAST_NAME as LAST3_3_ 
from JPAQL_CUSTOMER customer0_ 
where customer0_.FIRST_NAME=? 
order by customer0_.LAST_NAME ASC
    
-result=[firstName=thing, lastName=one, firstName=thing, lastName=two]]]></programlisting>                        
        </figure>
        <itemizedlist>
            <listitem><para>Placeholder is replaced by runtime parameter</para></listitem>
            <listitem><para>Zero-or-more results are requested</para></listitem>
            <listitem><para>Entities returned are managed</para></listitem>
        </itemizedlist>

        <figure>
            <title>Condensing the JPA-QL Query</title>
<programlisting language="java"><![CDATA[List<Customer> customers = em.createQuery(
    "select c from Customer c " +
    "where c.firstName = :firstName " +
    "order by c.lastName ASC",
    Customer.class)
        .setParameter("firstName", "thing")
        .getResultList();
log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>                        
        </figure>
    </section>



    <section id="jpa-query-types-sql">
        <title>Native SQL Queries</title>
        <itemizedlist spacing="compact">
            <listitem><para>Access to power of working with native SQL</para></listitem>
        </itemizedlist>
        <itemizedlist spacing="compact">
            <listitem><para>Pros</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Provides full access to native SQL power</para></listitem>
                    <listitem><para>Provides full access to database-vendor SQL extensions</para></listitem>
                    <listitem><para>Easy to see when native SQL is being used within application -- target for portability review</para></listitem>
                    <listitem><para>Ability to produce managed entity as result of query</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Cons</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Portability of SQL not addressed by JPA</para></listitem>
                    <listitem><para>Not type-safe</para></listitem>
                    <listitem><para>No help from Java compiler in constructing query expression</para></listitem>
                    <listitem><para>Don't find out most errors until runtime</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
  
        <figure>
            <title>Building a JPA Query using Native SQL</title>
<programlisting language="java"><![CDATA[Table table = Customer.class.getAnnotation(Table.class);
String sqlString =
    "select c.CUSTOMER_ID, c.FIRST_NAME, c.LAST_NAME " +                        
    String.format("from %s c ", table.name()) +
    "where c.FIRST_NAME = ? " +
    "order by c.LAST_NAME ASC";    
//use query string to build query
Query query = em.createNativeQuery(sqlString,Customer.class);]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>"c" represents rows in table</para></listitem>
            <listitem><para>specific columns (or *) are return for each row</para></listitem>
            <listitem><para>"?" marks a positional parameter -- non-portable to use named parameters in native SQL queries</para></listitem>
            <listitem><para>TypedQuery&lt;T&gt;s not supported in native SQL queries because of a conflict with legacy JPA 1.0 API</para></listitem>
        </itemizedlist>

        <figure>
            <title>Executing a JPA Query (built from Native SQL)</title>
<programlisting language="java"><![CDATA[//at this point we are query-type agnostic (mostly)
@SuppressWarnings("unchecked")
List<Customer> customers = query
        .setParameter(1, "thing")
        .getResultList();
log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>

<programlisting language=""><![CDATA[
select
    c.CUSTOMER_ID,
    c.FIRST_NAME,
    c.LAST_NAME 
from JPAQL_CUSTOMER c 
where c.FIRST_NAME = ? 
order by c.LAST_NAME ASC

-result=[firstName=thing, lastName=one, firstName=thing, lastName=two]]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Query execution similar to other query types</para></listitem>
            <listitem><para>User-provided SQL executed</para></listitem>
        </itemizedlist>
        <note>
            <para>Legacy JPA 1.0 Native SQL query syntax already used the signature
                of passing in a Class for createNativeQuery(). In this context, 
                it was an entity class that contained JPA mappings for the query --
                not the returned entity type. This prevented createNativeQuery()
                from being updated to return a typed result in JPA 2.0.</para>
        </note>


        <figure>
            <title>Condensing the SQL Query</title>
<programlisting language="java"><![CDATA[@SuppressWarnings("unchecked")
List<Customer> customers = em.createNativeQuery(
    "select c.CUSTOMER_ID, c.FIRST_NAME, c.LAST_NAME " +                        
    "from JPAQL_CUSTOMER c " +
    "where c.FIRST_NAME = ? " +
    "order by c.LAST_NAME ASC",
    Customer.class)
        .setParameter(1, "thing")
        .getResultList();
log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>                        
        </figure>
        
        <section id="jpa-query-types-sql-sqlresultset">
            <title>SqlResultSetMappings</title>
            <itemizedlist spacing="compact">
                <listitem><para>Allow query to return mixture of managed entities and values</para></listitem>
                <listitem><para>DAOs can use value results to plugin transient aggregate properties in parent
                    entity without pulling entire child entities back from database</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>e.g., total sales for clerk</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>

            <figure>
                <title>NativeQuery with SqlResultSetMapping</title>
<programlisting language="java"><![CDATA[@SuppressWarnings("unchecked")
List<Object[]> results = em.createNativeQuery(
        "select clerk.CLERK_ID, "
        + "clerk.FIRST_NAME, "
        + "clerk.LAST_NAME, "
        + "clerk.HIRE_DATE, "
        + "clerk.TERM_DATE, "
        + "sum(sales.amount) total_sales " 
        + "from JPAQL_CLERK clerk "
        + "left outer join JPAQL_SALE_CLERK_LINK slink on clerk.CLERK_ID=slink.CLERK_ID "
        + "left outer join JPAQL_SALE sales on sales.SALE_ID=slink.SALE_ID "
        + "group by clerk.CLERK_ID, "
        + "clerk.FIRST_NAME, "
        + "clerk.LAST_NAME, "
        + "clerk.HIRE_DATE, "
        + "clerk.TERM_DATE "
        + "order by total_sales DESC",
        "Clerk.clerkSalesResult")
        .getResultList();
]]></programlisting>
<programlisting language="java"><![CDATA[@Entity @Table(name="JPAQL_CLERK")
@SqlResultSetMappings({
    @SqlResultSetMapping(name = "Clerk.clerkSalesResult", 
            entities={ @EntityResult(entityClass = Clerk.class )},
            columns={@ColumnResult(name = "total_sales")}
    )
})
public class Clerk {]]></programlisting>                        
            </figure>                        
    
            <figure>
                <title>Example NativeQuery with SqlResultSetMapping Output</title>
<programlisting language="java"><![CDATA[for (Object[] result: results) {
    Clerk clerk = (Clerk) result[0];
    BigDecimal totalSales = (BigDecimal) result[1];
    log.info(String.format("%s, $ %s", clerk.getFirstName(), totalSales));
}]]></programlisting>                        
<programlisting language=""><![CDATA[-Manny, $ 250.00
-Moe, $ 150.00
-Jack, $ null]]></programlisting>                        
            </figure>
    
            <figure>
                <title>NamedNativeQuery with SqlResultSetMapping</title>
<programlisting language="java"><![CDATA[@Entity @Table(name="JPAQL_CLERK")
@NamedNativeQueries({
    @NamedNativeQuery(name = "Clerk.clerkSales", query = 
            "select clerk.CLERK_ID, "
            + "clerk.FIRST_NAME, "
            + "clerk.LAST_NAME, "
            + "clerk.HIRE_DATE, "
            + "clerk.TERM_DATE, "
            + "sum(sales.amount) total_sales " 
            + "from JPAQL_CLERK clerk "
            + "left outer join JPAQL_SALE_CLERK_LINK slink on clerk.CLERK_ID=slink.CLERK_ID "
            + "left outer join JPAQL_SALE sales on sales.SALE_ID=slink.SALE_ID "
            + "group by clerk.CLERK_ID, "
            + "clerk.FIRST_NAME, "
            + "clerk.LAST_NAME, "
            + "clerk.HIRE_DATE, "
            + "clerk.TERM_DATE "
            + "order by total_sales DESC",
            resultSetMapping="Clerk.clerkSalesResult")
})
@SqlResultSetMappings({
    @SqlResultSetMapping(name = "Clerk.clerkSalesResult", 
            entities={ @EntityResult(entityClass = Clerk.class )},
            columns={@ColumnResult(name = "total_sales")}
    )
})
public class Clerk {]]></programlisting>                        
            </figure>
        
    
            <figure>
                <title>Example NamedNativeQuery with SqlResultSetMapping Usage</title>
<programlisting language="java"><![CDATA[List<Object[]> results = em.createNamedQuery("Clerk.clerkSales").getResultList();]]></programlisting>                        
            </figure>
            
        </section>
    </section>





    <section id="jpa-query-types-criteria">
        <title>Criteria API Queries</title>
        <itemizedlist spacing="compact">
            <listitem><para>Somewhat parallel capability to JPAQL</para></listitem>
            <listitem><para>Build overall query using Java types (demonstrated here with "string accessors")</para></listitem>
        </itemizedlist>
        <itemizedlist spacing="compact">
            <listitem><para>Pros</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Structure of query is type-safe</para></listitem>
                    <listitem><para>Allows object-level manipulation of the query versus manipulation of a query string</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Useful when building total query based on runtime properties</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Cons</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Complex -- looses familiarity with SQL</para></listitem>
                    <listitem><para>Cannot be expressed in XML deployment descriptor</para></listitem>
                    <listitem><para>Access to properties not type-safe (addressed by 
                        <link linkend="jpa-query-types-strong-canonicalmm">Canonical Metamodel)</link></para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

        <figure>
            <title>Building a JPA Query using Criteria API</title>
<programlisting language=""><![CDATA[select c from Customer c 
where c.firstName = :firstName 
order by c.lastName ASC]]></programlisting>                        
            
<programlisting language="java"><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
Root<Customer> c = qdef.from(Customer.class);
qdef.select(c)
    .where(cb.equal(c.get("firstName"), 
                    cb.parameter(String.class,"firstName")))
    .orderBy(cb.asc(c.get("lastName")));
//build query from criteria definition
TypedQuery<Customer> query = em.createQuery(qdef);
]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>"CriteriaBuilder" used as starting point to build objects within the query tree</para></listitem>
            <listitem><para>"CriteriaQuery&lt;T&gt;" used to hold the definition of query</para></listitem>
            <listitem><para>"Root&lt;T&gt;" used to reference root level query terms</para></listitem>
            <listitem><para>"CriteriaBuilder.from()" used to designate the entity that represents root query term</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Result used to create path references for query body</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>"CriteriaBuilder.select()" officially lists the objects returned from query</para></listitem>
            <listitem><para>"CriteriaBuilder.where()" builds a decision predicate of which entities to include</para></listitem>
            <listitem><para>"CriteriaBuilder.equal()" builds an equals predicate for the where clause</para></listitem>
            <listitem><para>"Root&lt;T&gt;.get()" returns the property referenced in path expression</para></listitem>
            <listitem><para>"CriteriaBuilder.parameter()" builds a parameter placeholder within query. Useful with @Temporal date comparisons</para></listitem>
        </itemizedlist>

        <figure>
            <title>Executing a JPA Query using Criteria API</title>
<programlisting language="java"><![CDATA[//at this point we are query-type agnostic
List<Customer> customers = query
        .setParameter("firstName", "thing")
        .getResultList();
log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>

<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where customer0_.FIRST_NAME=? 
    order by customer0_.LAST_NAME asc
        
 -result=[firstName=thing, lastName=one, firstName=thing, lastName=two]]]]></programlisting>                        
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Query execution identical to JPA-QL case</para></listitem>
        </itemizedlist>

        
        <figure>
            <title>Condensing the Criteria API Query</title>
<programlisting language="java"><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
Root<Customer> c = qdef.from(Customer.class);

List<Customer> customers = em.createQuery(qdef.select(c)
    .where(cb.equal(c.get("firstName"), "thing"))
    .orderBy(cb.asc(c.get("lastName"))))
    .getResultList();

log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>                        
        </figure>

    </section>













    <section id="jpa-query-types-strong">
        <title>Strongly Typed Queries</title>
        <itemizedlist spacing="compact">
            <listitem><para>Previous Criteria API examples were string label based -- not type safe</para></listitem>
            <listitem><para>Criteria API provides means for stronger typing</para></listitem>
            <listitem><para>Strong typing permits automatic detection of model and query differences</para></listitem>
        </itemizedlist>
  
        <section id="jpa-query-types-strong-metamodel">
            <title>Metamodel API</title>
            <itemizedlist spacing="compact">
                <listitem><para>Provides access to the persistent model backing each entity and its properties</para></listitem>
            </itemizedlist>
            
      
            <figure>
                <title>Accessing JPA Metamodel</title>
<programlisting language="java"><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
Root<Customer> c = qdef.from(Customer.class);
EntityType<Customer> c_ = c.getModel();

log.info(String.format("%7s, %10s:%-30s", 
        c_.getPersistenceType(), 
        c_.getName(), 
        c_.getJavaType()));
for (Attribute<? super Customer, ?> p: c_.getAttributes()) {
    log.info(String.format("%7s, %10s:%-30s", 
            p.getPersistentAttributeType(), 
            p.getName(), 
            p.getJavaType()));          
}]]></programlisting>                        

<programlisting language=""><![CDATA[ - ENTITY,   Customer:class ejava.jpa.examples.query.Customer
 -  BASIC,  firstName:class java.lang.String        
 -  BASIC,         id:long                          
 -  BASIC,   lastName:class java.lang.String]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>JPA Metamodel provides access to</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>Entity structure</para></listitem>
                        <listitem><para>Entity database mapping</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </section>            

        <section id="jpa-query-types-strong-query">
            <title>Query using JPA Metamodel</title>
            <itemizedlist spacing="compact">
                <listitem><para>Pros</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>Access properties in (a more) type-safe manner</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>Cons</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>Complex</para></listitem>
                        <listitem><para>No compiler warning of entity type re-factoring</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>

            <figure>
                <title>Building Query with JPA Metamodel</title>
<programlisting language="java"><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
Root<Customer> c = qdef.from(Customer.class);
EntityType<Customer> c_ = c.getModel();
qdef.select(c) //we are returning a single root object
    .where(cb.equal(
            c.get(c_.getSingularAttribute("firstName", String.class)), 
            cb.parameter(String.class,"firstName")))
    .orderBy(cb.asc(c.get(c_.getSingularAttribute("lastName", String.class))));
TypedQuery<Customer> query = em.createQuery(qdef);]]></programlisting>
            </figure>
           <itemizedlist spacing="compact">
                <listitem><para>Access to properties within entities done through type-safe accessors</para></listitem>
           </itemizedlist>

            <figure>
                <title>Executing Query with JPA Metamodel</title>
<programlisting language="java"><![CDATA[//at this point we are query-type agnostic
List<Customer> customers = query
        .setParameter("firstName", "thing")
        .getResultList();
log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());
]]></programlisting>

<programlisting language=""><![CDATA[select
    customer0_.CUSTOMER_ID as CUSTOMER1_3_,
    customer0_.FIRST_NAME as FIRST2_3_,
    customer0_.LAST_NAME as LAST3_3_ 
from JPAQL_CUSTOMER customer0_ 
where customer0_.FIRST_NAME=? 
order by customer0_.LAST_NAME asc
-result=[firstName=thing, lastName=one, firstName=thing, lastName=two]]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Results identical to previous approaches</para></listitem>
            </itemizedlist>
            

            <figure>
                <title>Condensing the JPA Metamodel-based Query</title>
<programlisting language="java"><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
Root<Customer> c = qdef.from(Customer.class);
EntityType<Customer> c_ = c.getModel();
List<Customer> customers = em.createQuery(qdef.select(c)
    .where(cb.equal(
            c.get(c_.getSingularAttribute("firstName", String.class)), "thing"))
    .orderBy(cb.asc(c.get(c_.getSingularAttribute("lastName", String.class)))))
    .getResultList();

log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>      
            </figure>
                  
        </section>

        <section id="jpa-query-types-strong-canonicalmm">
            <title>Canonical Metamodel</title>
            <itemizedlist spacing="compact">
                <listitem><para>Complexities of metamodel cab be simplified using metamodel classes</para></listitem>
            </itemizedlist>
            <itemizedlist spacing="compact">
                <listitem><para>Pros</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>Easy, type-safe access to entity model</para></listitem>
                        <listitem><para>Java compiler can alert of mismatch between query and entity model</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>Cons</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>Requires either manual construct or auto-generation of separate metamodel class</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>

            <figure>
                <title>Example Canonical Metamodel</title>
<programlisting language="java"><![CDATA[package ejava.jpa.examples.query;
import javax.persistence.metamodel.SingularAttribute;
import javax.persistence.metamodel.StaticMetamodel;

@StaticMetamodel(Customer.class)
public abstract class Customer_ {
    public static volatile SingularAttribute<Customer, Long> id;
    public static volatile SingularAttribute<Customer, String> lastName;
    public static volatile SingularAttribute<Customer, String> firstName;
}]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Construct or generate a canonical metamodel class to provide type-safe, easy access to properties</para></listitem>
            </itemizedlist>

            <figure>
                <title>Building Query with Canonical Metamodel</title>
<programlisting language="java"><![CDATA[CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
Root<Customer> c = qdef.from(Customer.class);

qdef.select(c) //we are returning a single root object
    .where(cb.equal(
            c.get(Customer_.firstName), 
            cb.parameter(String.class,"firstName")))
    .orderBy(cb.asc(c.get(Customer_.lastName)));
TypedQuery<Customer> query = em.createQuery(qdef);]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Use canonical metamodel class to provide type-safe, easy access to properties ("Customer_.firstName")</para></listitem>
            </itemizedlist>

            <figure>
                <title>Executing Query with Canonical Metamodel</title>
<programlisting language="java"><![CDATA[//at this point we are query-type agnostic
List<Customer> customers = query
        .setParameter("firstName", "thing")
        .getResultList();
log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>
                        
<programlisting language=""><![CDATA[select
    customer0_.CUSTOMER_ID as CUSTOMER1_3_,
    customer0_.FIRST_NAME as FIRST2_3_,
    customer0_.LAST_NAME as LAST3_3_ 
from JPAQL_CUSTOMER customer0_ 
where customer0_.FIRST_NAME=? 
order by customer0_.LAST_NAME asc
-result=[firstName=thing, lastName=one, firstName=thing, lastName=two]]]></programlisting>      
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>Result is identical to previous approaches</para></listitem>
            </itemizedlist>
            
            
            <figure>
                <title>Condensing the Canonical Metamodel-based Query</title>
<programlisting language="java"><![CDATA[
CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery<Customer> qdef = cb.createQuery(Customer.class);
Root<Customer> c = qdef.from(Customer.class);

List<Customer> customers = em.createQuery(qdef.select(c)
    .where(cb.equal(c.get(Customer_.firstName),"thing"))
    .orderBy(cb.asc(c.get(Customer_.lastName))))
    .getResultList();
log.info("result=" + customers);
assertEquals("unexpected number of results", 2, customers.size());]]></programlisting>                        
            </figure>
            <itemizedlist spacing="compact">
                <listitem><para>More work to get here but clean, result</para></listitem>
                <listitem><para>Type-safe - queries will not compile if entity changes</para></listitem>
            </itemizedlist>
        </section>

        <section id="jpa-query-types-strong-canonicalmm-maven">
           <title>Generating Canonical Metamodel Classes</title>
            <itemizedlist spacing="compact">
                <listitem><para>Canonical Metamodel classes can be manually authoried or generated</para></listitem>
            </itemizedlist>
            
            <figure>
                <title>Maven Dependency Can Generate Canonical Metamodel Classes</title>
<programlisting language="xml"><![CDATA[<!-- generates JPA metadata classes -->
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-jpamodelgen</artifactId>
    <version>1.1.1.Final</version>
    <scope>provided</scope>
</dependency>
]]></programlisting>
            </figure>
            
            <figure>
                <title>Generated Source placed in target/generated-sources/annotations</title>
<programlisting language=""><![CDATA[`-- target
    |-- generated-sources
        `-- annotations
            `-- ejava
                `-- jpa
                    `-- examples
                        `-- query
                            |-- Clerk_.java
                            |-- Customer_.java
                            |-- Sale_.java
                            `-- Store_.java]]></programlisting>                                                
            </figure>

            <figure>
                <title>Maven Plugin adds Generated Source to IDE Build Path</title>
<programlisting language="xml"><![CDATA[<!-- add generated JPA metamodel classes to classpath -->
<plugin>
    <groupId>org.codehaus.mojo</groupId>
    <artifactId>build-helper-maven-plugin</artifactId>
    <version>1.8</version>
    <executions>
       <execution>
           <id>add-metamodel-classes</id>
           <phase>process-sources</phase>
           <goals>
               <goal>add-source</goal>
           </goals>
           <configuration>
               <sources>
                   <source>target/generated-sources/annotations</source>
               </sources>
           </configuration>
       </execution>
    </executions>
</plugin>
]]></programlisting>                        
            </figure>

            
        </section>    


    </section>

    <section id="jpa-query-types-summary">
       <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>Three basic forms for query expression</para>
                <itemizedlist spacing="compact">
                    <listitem><para>JPAQL</para></listitem>
                    <listitem><para>Native SQL</para></listitem>
                        <itemizedlist spacing="compact">
                            <listitem><para>SqlResultSetMapping</para></listitem>
                        </itemizedlist>
                    <listitem><para>Criteria API</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>String-based Accessors</para></listitem>
                            <listitem><para>Metamodel Accessors</para></listitem>
                            <listitem><para>Canonical Metamodel Accessors</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Entity model provides portability</para>
                <itemizedlist spacing="compact">
                    <listitem><para>JPAQL</para></listitem>
                    <listitem><para>Criteria API</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Native SQL provides direct access to</para>
                <itemizedlist spacing="compact">
                    <listitem><para>full power of SQL</para></listitem>
                    <listitem><para>full access to database-specific extensions</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Criteria API provides type-safe construct of query structure</para></listitem>
            <listitem><para>JPA Metamodel provides type-safe access to entity properties</para></listitem>
            <listitem><para>JPA Canonical Metamodel provides type-safe access to model-specific entity properties</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Produces compilation error when query our of sync with entity model</para></listitem>
                    <listitem><para>Provides convenient access to model-specific properties</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>       
    </section>    
</chapter>
  
