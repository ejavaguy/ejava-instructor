<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="jpa-query-jpaql-where">
    <title>JPAQL Where Clauses</title>
        
    <section id="jpa-query-jpaql-where-equals">
        <title>Equality Test</title>

        <figure>
            <title>Example Equality Test</title>
<programlisting language=""><![CDATA[select c from Customer c 
where c.firstName='cat']]></programlisting>

<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where customer0_.FIRST_NAME='cat'
        
 -found result:firstName=cat, lastName=inhat]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Return entities where there is an equality match</para></listitem>
        </itemizedlist>

        <figure>
            <title>Escaping Special Characters</title>
<programlisting language=""><![CDATA[select s from Store s 
where s.name='Big Al''s']]></programlisting>                        

<programlisting language=""><![CDATA[    select
        store0_.STORE_ID as STORE1_0_,
        store0_.name as name0_ 
    from ORMQL_STORE store0_ 
    where store0_.name='Big Al''s'
...
 -found result:name=Big Al's, sales(2)={1, 2, }]]></programlisting>                                                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Escaped special character is passed through to the database</para></listitem>
        </itemizedlist>
    </section>

    <section id="jpa-query-jpaql-where-like">
        <title>Like Test</title>
        
        <figure>
            <title>Like Test Literal</title>
<programlisting language=""><![CDATA[select c from Clerk c
where c.firstName like 'M%']]></programlisting>

<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where clerk0_.FIRST_NAME like 'M%'
...        
 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }]]></programlisting>                            
        </figure>

        <figure>
            <title>Like Test Literal Parameter</title>
<programlisting language=""><![CDATA[select c from Clerk c 
where c.firstName like :firstName)]]></programlisting>
        </figure>
           

        <figure>
            <title>Using Like Test Literal Parameter</title>
<programlisting language="java"><![CDATA[TypedQuery<T> query = em.createQuery(ejbqlString, resultType);
query.setParameter("firstName", "M%");
List<T> objects = query.getResultList();]]></programlisting>                            

<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where clerk0_.FIRST_NAME like ?
        
 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }]]></programlisting>                            
        </figure>

        <figure>
            <title>Like Test Concatenated String</title>
<programlisting language=""><![CDATA[select c from Clerk c 
where c.firstName like concat(:firstName,'%')]]></programlisting>
        </figure>

        <figure>
            <title>Using Like Test Concatenated String</title>
<programlisting language="java"><![CDATA[TypedQuery<T> query = em.createQuery(ejbqlString, resultType);
query.setParameter("firstName", "M");
List<T> objects = query.getResultList();]]></programlisting>                            

<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where clerk0_.FIRST_NAME like (?||'%')

 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }]]></programlisting>                            
        </figure>


        <figure>
           <title>Like Test Single Character Wildcard</title>
<programlisting language=""><![CDATA[select c from Clerk c 
where c.firstName like '_anny']]></programlisting>

<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from
        JPAQL_CLERK clerk0_ 
    where
        clerk0_.FIRST_NAME like '_anny'

 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }]]></programlisting>                            
        </figure>

    </section>


    <section id="jpa-query-jpaql-where-formulas">
        <title>Formulas</title>


        <figure>
            <title>Example Formula</title>
<programlisting language=""><![CDATA[select s from Sale s 
where (s.amount * :tax) > :amount]]></programlisting>
        </figure>
  

        <figure>
            <title>Using Formula</title>
<programlisting language="java"><![CDATA[String jpaql = "select count(s) from Sale s " +
    "where (s.amount * :tax) > :amount";
TypedQuery<Number> query = em.createQuery(jpaql, Number.class)
        .setParameter("amount", new BigDecimal(10.00));
        
//keep raising taxes until somebody pays $10.00 in tax
double tax = 0.05;
for (;query.setParameter("tax", new BigDecimal(tax))
           .getSingleResult().intValue()==0;
      tax += 0.01) {
    log.debug("tax=" + NumberFormat.getPercentInstance().format(tax));
}
log.info("raise taxes to: " + NumberFormat.getPercentInstance().format(tax));]]></programlisting>                            

<programlisting language=""><![CDATA[    select count(sale0_.SALE_ID) as col_0_0_ 
    from JPAQL_SALE sale0_ 
    where sale0_.amount*?>? limit ?
 -tax=5%
    select count(sale0_.SALE_ID) as col_0_0_ 
    from JPAQL_SALE sale0_ 
    where sale0_.amount*?>? limit ?
 -tax=6%
    select count(sale0_.SALE_ID) as col_0_0_ 
    from JPAQL_SALE sale0_ 
    where sale0_.amount*?>? limit ?
 -raise taxes to: 7%]]></programlisting>                            
        </figure>
    </section>


    <section id="jpa-query-jpaql-where-logic">
        <title>Logic Operators</title>

        <figure>
            <title>Logic Operator Example</title>
<programlisting language=""><![CDATA[select c from Customer c
where (c.firstName='cat' AND c.lastName='inhat')
    OR c.firstName='thing']]></programlisting>
        </figure>
  
        <figure>
            <title>Logic Operator Example Output</title>
<programlisting language=""><![CDATA[
    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where
        customer0_.FIRST_NAME='cat' 
        and customer0_.LAST_NAME='inhat' 
        or customer0_.FIRST_NAME='thing'

 -found result:firstName=cat, lastName=inhat
 -found result:firstName=thing, lastName=one
 -found result:firstName=thing, lastName=two]]></programlisting>                            
        </figure>

        <figure>
            <title>Another Logic Operator Example</title>
<programlisting language=""><![CDATA[select c from Customer c 
where (NOT (c.firstName='cat' AND c.lastName='inhat')) 
    OR c.firstName='thing']]></programlisting>
        </figure>

        <figure>
            <title>Another Logic Operator Example Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where
        customer0_.FIRST_NAME<>'cat' 
        or customer0_.LAST_NAME<>'inhat' 
        or customer0_.FIRST_NAME='thing'
        
 -found result:firstName=thing, lastName=one
 -found result:firstName=thing, lastName=two]]></programlisting>                            
        </figure>
    </section>



    <section id="jpa-query-jpaql-where-equality">
        <title>Equality Tests</title>
        <itemizedlist spacing="compact">
            <listitem><para>Must compare values</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Of same type</para></listitem>
                    <listitem><para>Of legal promotion type</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Can compare 123:int to 123:long</para></listitem>
                            <listitem><para>Cannot compare 123:int to "123":string</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Can compare entities</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>

        <figure>
            <title>Example Entity Equality Query</title>
<programlisting language=""><![CDATA[select s from Sale s
    JOIN s.clerks c
    where c = :clerk]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Compare entities and not primary/foreign key values</para></listitem>
        </itemizedlist>

        <figure>
            <title>Using Entity Equality Query</title>
<programlisting language="java"><![CDATA[//get a clerk entity
Clerk clerk = em.createQuery(
        "select c from Clerk c where c.firstName = 'Manny'", 
        Clerk.class)
       .getSingleResult();

//find all sales that involve this clerk
List<Sale> sales = em.createQuery( 
    "select s from Sale s " +
    "JOIN s.clerks c " +
    "where c = :clerk", 
    Sale.class)
        .setParameter("clerk", clerk)
        .getResultList();]]></programlisting>                            

<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where clerk0_.FIRST_NAME='Manny' limit ?]]></programlisting>
                            
<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    inner join JPAQL_SALE_CLERK_LINK clerks1_ 
            on sale0_.SALE_ID=clerks1_.SALE_ID 
    inner join JPAQL_CLERK clerk2_ 
            on clerks1_.CLERK_ID=clerk2_.CLERK_ID 
    where clerk2_.CLERK_ID=?
...
 -found=date=1998-04-10 10:13:35, amount=$100.00, buyer=1, clerks(1)={1, }
...
 -found=date=1999-06-11 14:15:10, amount=$150.00, buyer=2, clerks(2)={1, 2, }]]></programlisting>                        
        </figure>
    </section>

    <section id="jpa-query-jpaql-where-between">
        <title>Between</title>

        <figure>
            <title>Example Between Query</title>
<programlisting language=""><![CDATA[select s from Sale s
where s.amount BETWEEN :low AND :high]]></programlisting>

<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from
        JPAQL_SALE sale0_ 
    where
        sale0_.amount between ? and ?
...
 -found result:date=1998-04-10 10:13:35, amount=$100.00, buyer=1, clerks(1)={1, }]]></programlisting>                            
        </figure>
  
        <figure>
            <title>Another Example Between Query</title>
<programlisting language=""><![CDATA[select s from Sale s
where s.amount NOT BETWEEN :low AND :high]]></programlisting>

<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    where sale0_.amount not between ? and ?
...
 -found result:date=1999-06-11 14:15:10, amount=$150.00, buyer=2, clerks(2)={1, 2, }]]></programlisting>                            
        </figure>
    </section>


    <section id="jpa-query-jpaql-where-null">
        <title>Testing for Null</title>
        <para>Can be used to test for unassigned value or relationship</para>

        <figure>
            <title>Example Test for Null</title>
<programlisting language=""><![CDATA[select s from Sale s 
where s.store IS NULL]]></programlisting>

<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from
        JPAQL_SALE sale0_ 
    where
        sale0_.SALE_STORE is null]]></programlisting>                            
        </figure>
  

        <figure>
            <title>Example Test for Not Null</title>
<programlisting language=""><![CDATA[select s from Sale s 
where s.store IS NOT NULL]]></programlisting>

<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    where sale0_.SALE_STORE is not null
...
 -found result:date=1998-04-10 10:13:35, amount=$100.00, buyer=1, clerks(1)={1, }
...
 -found result:date=1999-06-11 14:15:10, amount=$150.00, buyer=2, clerks(2)={1, 2, }]]></programlisting>                            
        </figure>
    </section>

    <section id="jpa-query-jpaql-where-empty">
        <title>Testing Empty Collection</title>
        <para>Can be used to test for an empty collection</para>

        <figure>
            <title>Example Empty Collection Test</title>
<programlisting language=""><![CDATA[select c from Clerk c
where c.sales IS EMPTY]]></programlisting>

<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where not (exists (
        select sale2_.SALE_ID from JPAQL_SALE_CLERK_LINK sales1_, JPAQL_SALE sale2_ 
        where clerk0_.CLERK_ID=sales1_.CLERK_ID and sales1_.SALE_ID=sale2_.SALE_ID))
...
 -found result:firstName=Jack, lastName=Pep, hireDate=1973-03-01, termDate=null, sales(0)={}]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Sub-select returns values from collection under test</para></listitem>
            <listitem><para>Outer query tests for no existing (EMPTY)values</para></listitem>
        </itemizedlist>


        <figure>
            <title>Example Non-Empty Test</title>
<programlisting language=""><![CDATA[select c from Clerk c
where c.sales IS NOT EMPTY]]></programlisting>                        

<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where exists (
            select sale2_.SALE_ID 
            from JPAQL_SALE_CLERK_LINK sales1_, JPAQL_SALE sale2_ 
            where clerk0_.CLERK_ID=sales1_.CLERK_ID and sales1_.SALE_ID=sale2_.SALE_ID
        )
...
 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
...
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Sub-select returns values from collection under test</para></listitem>
            <listitem><para>Outer query tests for existing (NOT EMPTY)values</para></listitem>
        </itemizedlist>
    </section>



    <section id="jpa-query-jpaql-where-memberof">
        <title>Membership Test</title>
        <para>Can be used to determine membership in a collection</para>

        <figure>
            <title>Example Membership Test</title>
<programlisting language=""><![CDATA[select c from Clerk c 
where c.firstName = 'Manny']]></programlisting>

<programlisting language=""><![CDATA[select s from Sale s
where :clerk MEMBER OF s.clerks]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Defines a shorthand for a subquery</para></listitem>
        </itemizedlist>

        <figure>
            <title>Using Membership Test</title>
<programlisting language="java"><![CDATA[//get a clerk entity
Clerk clerk = em.createQuery(
    "select c from Clerk c where c.firstName = 'Manny'",
    Clerk.class)
      .getSingleResult();

//find all sales that involve this clerk
List<Sale> sales = em.createQuery(
    "select s from Sale s " +
    "where :clerk MEMBER OF s.clerks", 
    Sale.class)
        .setParameter("clerk", clerk)
        .getResultList();]]></programlisting>                            
        </figure>

        <figure>
            <title>Using Membership Test Runtime Output</title>
<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where clerk0_.FIRST_NAME='Manny' limit ?
]]></programlisting>                            
<programlisting language=""><![CDATA[    select
        sale0_.SALE_ID as SALE1_1_,
        sale0_.amount as amount1_,
        sale0_.BUYER_ID as BUYER3_1_,
        sale0_.date as date1_,
        sale0_.SALE_STORE as SALE5_1_ 
    from JPAQL_SALE sale0_ 
    where
        ? in (
            select
                clerk2_.CLERK_ID 
            from
                JPAQL_SALE_CLERK_LINK clerks1_,
                JPAQL_CLERK clerk2_ 
            where
                sale0_.SALE_ID=clerks1_.SALE_ID 
                and clerks1_.CLERK_ID=clerk2_.CLERK_ID
        )
...
 -found=date=1998-04-10 10:13:35, amount=$100.00, buyer=1, clerks(1)={1, }
...
 -found=date=1999-06-11 14:15:10, amount=$150.00, buyer=2, clerks(2)={1, 2, }]]></programlisting>                            
        </figure>
    </section>


    <section id="jpa-query-jpaql-where-subquery">
        <title>Subqueries</title>
        <para>Useful when query cannot be expressed through JOINs</para>

        <figure>
            <title>Example Subquery</title>
<programlisting language=""><![CDATA[select c from Customer c
where c.id IN
    (select s.buyerId from Sale s
     where s.amount > 100)]]></programlisting>
        </figure>

        <figure>
            <title>Example Subquery Runtime Output</title>
<programlisting language=""><![CDATA[    select
        customer0_.CUSTOMER_ID as CUSTOMER1_3_,
        customer0_.FIRST_NAME as FIRST2_3_,
        customer0_.LAST_NAME as LAST3_3_ 
    from JPAQL_CUSTOMER customer0_ 
    where customer0_.CUSTOMER_ID in (
            select sale1_.BUYER_ID 
            from JPAQL_SALE sale1_ 
            where sale1_.amount>100
        )
 -found result:firstName=thing, lastName=one]]></programlisting>                            
        </figure>
    </section>


    <section id="jpa-query-jpaql-where-all">
        <title>All</title>
        <itemizedlist spacing="compact">
            <listitem><para>All existing values must meet criteria (i.e., no value may fail criteria)</para></listitem>
            <listitem><para>Zero values is the lack of failure (i.e., meets criteria)</para></listitem>
        </itemizedlist>

        <figure>
            <title>Example ALL Query</title>
<programlisting language=""><![CDATA[select c from Clerk c
where 125 < ALL
(select s.amount from c.sales s)]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>List all clerks that have all sales above $125.00 or none at all</para></listitem>
            <listitem><para>-or- List all clerks with no sale &lt;= $125.00</para></listitem>
        </itemizedlist>

        <figure>
            <title>Example ALL Query Runtime Output</title>
<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where 125<all (
            select sale2_.amount 
            from JPAQL_SALE_CLERK_LINK sales1_, JPAQL_SALE sale2_ 
            where clerk0_.CLERK_ID=sales1_.CLERK_ID and sales1_.SALE_ID=sale2_.SALE_ID
        )
...
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }
...
 -found result:firstName=Jack, lastName=Pep, hireDate=1973-03-01, termDate=null, sales(0)={}]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Manny excluded because has 1 sale below $125.00</para></listitem>
            <listitem><para>Moe included because has only $150.00 sale</para></listitem>
            <listitem><para>Jack included because has no sales that fail criteria</para></listitem>
        </itemizedlist>

        <figure>
            <title>Another ALL Query Example</title>
<programlisting language=""><![CDATA[select c from Clerk c
where 125 > ALL
(select s.amount from c.sales s)]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>List all clerks that have all sales below $125.00 or none at all</para></listitem>
            <listitem><para>-or- List all clerks with no sale >= $125.00</para></listitem>
        </itemizedlist>

        <figure>
            <title>Another ALL Query Example Runtime Output</title>
<programlisting language=""><![CDATA[    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where 125>all (
            select sale2_.amount 
            from JPAQL_SALE_CLERK_LINK sales1_, JPAQL_SALE sale2_ 
            where clerk0_.CLERK_ID=sales1_.CLERK_ID  and sales1_.SALE_ID=sale2_.SALE_ID
        )

 -found result:firstName=Jack, lastName=Pep, hireDate=1973-03-01, termDate=null, sales(0)={}]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Manny excluded because has 1 sale above $125.00</para></listitem>
            <listitem><para>Moe excluded because has only $150.00 sale</para></listitem>
            <listitem><para>Jack included because has no sales that fail criteria</para></listitem>
        </itemizedlist>
    </section>

    <section id="jpa-query-jpaql-where-any">
        <title>Any</title>
        <itemizedlist spacing="compact">
            <listitem><para>Any matching value meets criteria (i.e., one match and you are in)</para></listitem>
            <listitem><para>Zero values fails to meet the criteria (i.e., must have at least one matching value)</para></listitem>
        </itemizedlist>

        <figure>
            <title>Example ANY Query</title>
<programlisting language=""><![CDATA[select c from Clerk c
where 125 < ANY
(select s.amount from c.sales s)]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>List all clerks that have at least one sale above $125.00</para></listitem>
        </itemizedlist>

        <figure>
            <title>Example ANY Query Runtime Output</title>
<programlisting language=""><![CDATA[ -executing query:select c from Clerk c where 125 < ANY    (select s.amount from c.sales s)
    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where 125<any (
            select sale2_.amount 
            from JPAQL_SALE_CLERK_LINK sales1_, JPAQL_SALE sale2_ 
            where clerk0_.CLERK_ID=sales1_.CLERK_ID  and sales1_.SALE_ID=sale2_.SALE_ID
        )
...
 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }
...
 -found result:firstName=Moe, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(1)={2, }
]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Manny included because has 1 sale above $125.00</para></listitem>
            <listitem><para>Moe included because $150.00 sale qualifies him as well</para></listitem>
            <listitem><para>Jack excluded because has no sales that meet criteria</para></listitem>
        </itemizedlist>
        
        
        <figure>
            <title>Another Example ANY Query</title>
<programlisting language=""><![CDATA[select c from Clerk c
where 125 > ANY
(select s.amount from c.sales s)]]></programlisting>
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>List all clerks that have at least one sale below $125.00</para></listitem>
        </itemizedlist>


        <figure>
            <title>Another Example ANY Query Runtime Output</title>
<programlisting language=""><![CDATA[ -executing query:select c from Clerk c where 125 > ANY    (select s.amount from c.sales s)
    select
        clerk0_.CLERK_ID as CLERK1_2_,
        clerk0_.FIRST_NAME as FIRST2_2_,
        clerk0_.HIRE_DATE as HIRE3_2_,
        clerk0_.LAST_NAME as LAST4_2_,
        clerk0_.TERM_DATE as TERM5_2_ 
    from JPAQL_CLERK clerk0_ 
    where 125>any (
            select sale2_.amount 
            from JPAQL_SALE_CLERK_LINK sales1_, JPAQL_SALE sale2_ 
            where clerk0_.CLERK_ID=sales1_.CLERK_ID  and sales1_.SALE_ID=sale2_.SALE_ID
        )

 -found result:firstName=Manny, lastName=Pep, hireDate=1970-01-01, termDate=null, sales(2)={1, 2, }]]></programlisting>                            
        </figure>
        <itemizedlist spacing="compact">
            <listitem><para>Manny included because has 1 sale below $125.00</para></listitem>
            <listitem><para>Moe excluded because his only $150.00 sale above criteria</para></listitem>
            <listitem><para>Jack excluded because has no sales that meet criteria</para></listitem>
        </itemizedlist>

    </section>

    <section id="jpa-query-jpaql-where-summary">
       <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>JPA-QL has detailed coverage of most query needs</para></listitem>
        </itemizedlist>
    </section>    
</chapter>
  
