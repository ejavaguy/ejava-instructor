<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="async-ejbtimers-overview">
    <title>EJB Timers Overview</title>
    <itemizedlist spacing="compact">
        <listitem><para>Perform similar role of job schedulers</para>
            <itemizedlist spacing="compact">
                <listitem><para>e.g., cron</para></listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>Three types</para>
            <itemizedlist spacing="compact">
                <listitem><para>Single Action Timer</para></listitem>
                <listitem><para>Interval Timer</para></listitem>
                <listitem><para>Calendar Timer</para></listitem>
            </itemizedlist>
        </listitem>
        <listitem><para>Timers are specific to an EJB</para>
            <itemizedlist spacing="compact">
                <listitem><para>Each EJB may have one @Timeout method but many timers</para>
<programlisting language="java"><![CDATA[import javax.ejb.Timeout;
]]></programlisting>                        
<programlisting language="java"><![CDATA[@Timeout
public void execute(Timer timer) {
]]></programlisting>                        
                </listitem>
                <listitem><para>Timer can hold Serializable context information</para>
<programlisting language="java"><![CDATA[public long sellProduct(String sellerId, AuctionItem item) throws ResourceNotFoundException {
    ...
    timerService.createTimer(item.getEndDate(), new Long(item.getId()));
    timerService.createSingleActionTimer(item.getEndDate(), 
                                         new TimerConfig(new Long(item.getId()), false));
]]></programlisting>                        
                </listitem>
                <listitem><para>If you need multiple @Timeout method behaviors - create multiple EJBs</para></listitem>
            </itemizedlist>
        </listitem>
    </itemizedlist>

    <section id="async-ejbtimers-overview-history">
        <title>EJB Timer History</title>
        <itemizedlist spacing="compact">
            <listitem><para>Original EJB Timer Service part of EJB 2.1</para>
                <itemizedlist spacing="compact">
                    <listitem><para>EJB 2.x is pre-annotations, pre-JavaSE 5, interface-based</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>EJB 3.0 added annotation-based extensions</para>
                <itemizedlist spacing="compact">
                    <listitem><para>eliminated interface-based solution requirements</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>EJB 3.1 provided overhaul of the overall service</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Added cron-like, 
                             <ulink url="https://javaee.github.io/javaee-spec/javadocs/javax/ejb/ScheduleExpression.html">calendar schedules</ulink></para>
<programlisting language="java"><![CDATA[import javax.ejb.ScheduleExpression;
]]></programlisting>                        
<programlisting language="java"><![CDATA[public void initTimers(ScheduleExpression schedule) {
   ...
}
]]></programlisting>                        
                    </listitem>
                    <listitem><para>Added <ulink url="https://javaee.github.io/javaee-spec/javadocs/javax/ejb/Schedule.html">declarative scheduling</ulink></para>
<programlisting language="java"><![CDATA[import javax.ejb.Schedule;
import javax.ejb.Timeout;
]]></programlisting>                        
<programlisting language="java"><![CDATA[@Timeout
@Schedule(second="*/10", minute ="*", hour="*", dayOfMonth="*", month="*", year="*", persistent=false)
public void execute(Timer timer) {
]]></programlisting>                        
                    </listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="async-ejbtimers-overview-timerservice">
        <title><ulink url="https://javaee.github.io/javaee-spec/javadocs/javax/ejb/TimerService.html">EJB Timer Service</ulink></title>

<programlisting language="java"><![CDATA[import javax.annotation.Resource;
import javax.ejb.TimerService;
]]></programlisting>                        
<programlisting language="java"><![CDATA[@Resource
private TimerService timerService;
]]></programlisting>                        
        <itemizedlist spacing="compact">
            <listitem><para>Starting point for all EJB Timer programmatic manipulation</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Timer Creation</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>createCalendarTimer(ScheduleExpression schedule, ...)</para></listitem>
                            <listitem><para>createIntervalTimer(Date initialExpiration, long intervalDuration, ...)</para></listitem>
                            <listitem><para>createSingleActionTimer(Date expiration, ...)</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Get Timers</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>getTimers() - get Timers associated with this EJB</para></listitem>
                            <listitem><para>getAllTimers() - get Timers associated with this module</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
                    <tip>
                       <title>Start by creating non-persistent Timers</title>
                       <para>
                          EJB Timers are created as perisistent=true by default. This sounds reasonable until
                          you begin refactoring your application and start seeing "EJB not found", etc. on follow-on
                          redeploys or many more EJB Timers firing that you believe should be. For programmatic
                          EJB Timers - always pass in the optional 
                          <ulink url="https://javaee.github.io/javaee-spec/javadocs/javax/ejb/TimerConfig.html">TimerConfig</ulink> 
                          and set persistent to false. For the 
                          <ulink url="https://javaee.github.io/javaee-spec/javadocs/javax/ejb/Schedule.html#persistent--">Schedule</ulink>
                          annotation, set the persistent attribute to false.
                       </para>
                       <para>
                          It is always desirable to be able to easily coldstart your 
                          application in development with a reboot of the application server or a redeploy of the application
                          and not have to worry about artifacts of a previous implementation approach.
                       </para>
                    </tip>
            </listitem>
        </itemizedlist>
    </section>


    <section id="async-ejbtimers-overview-single">
        <title>Single Action EJB Timers</title>
        <itemizedlist spacing="compact">
            <listitem><para>Call @Timeout method after a specified expiration</para></listitem>
        </itemizedlist>
<programlisting language="java"><![CDATA[createSingleActionTimer(Date expiration, TimerConfig timerConfig)
createSingleActionTimer(long duration, TimerConfig timerConfig)
]]></programlisting>                        
    </section>

    <section id="async-ejbtimers-overview-interval">
        <title>Interval EJB Timers</title>
        <itemizedlist spacing="compact">
            <listitem><para>Call @Timeout method after a given point in time and then specified duration after that</para></listitem>
        </itemizedlist>
<programlisting language="java"><![CDATA[createIntervalTimer(Date initialExpiration, long intervalDuration, TimerConfig timerConfig)
createIntervalTimer(long initialDuration, long intervalDuration, TimerConfig timerConfig)
]]></programlisting>                        
    </section>

    <section id="async-ejbtimers-overview-calendar">
        <title>Calendar EJB Timers</title>
        <itemizedlist spacing="compact">
            <listitem><para>Call @Timeout method based on the schedule expression</para>
                <itemizedlist spacing="compact">
                    <listitem><para>second</para></listitem>
                    <listitem><para>minute</para></listitem>
                    <listitem><para>hour</para></listitem>
                    <listitem><para>dayOfMonth</para></listitem>
                    <listitem><para>month</para></listitem>
                    <listitem><para>dayOfWeek</para></listitem>
                    <listitem><para>year</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
<programlisting language="java"><![CDATA[createCalendarTimer(ScheduleExpression schedule, TimerConfig timerConfig)
]]></programlisting>                        
    </section>


    <section id="async-ejbtimers-overview-summary">
        <title>EJB Timer Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>EJB Timers are relative to EJB</para></listitem>
            <listitem><para>EJB has one @Timeout callable by many EJB Timers</para></listitem>
            <listitem><para>Three types of EJB Timers</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Single Action</para></listitem>
                    <listitem><para>Interval</para></listitem>
                    <listitem><para>Calendar</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>Two ways to create EJB Timers</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Programmatically with ScheduleExpression class</para></listitem>
                    <listitem><para>Declaratively with @Schedule annotation</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>

</chapter>
  
