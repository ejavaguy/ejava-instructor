<!DOCTYPE partintro PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="ejb-intro-ejb">
    <title>Overview of EJB Styles</title>

    <section id="ejb-intro-ejb-uses">
        <title>EJB Uses</title>
        <itemizedlist spacing="compact">
            <listitem><para>Implement a task</para></listitem>
            <listitem><para>Interact with other beans</para></listitem>
            <listitem><para>Examples:</para>
		        <itemizedlist spacing="compact">
		            <listitem><para>TaxDistrict.calcTax(double amount)</para></listitem>
		            <listitem><para>Teller.transfer(long fromAccount, long toAccount, double amount)</para></listitem>
		            <listitem><para>Registrar.listStudents(String course, int offset, int limit)</para></listitem>
		        </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>




    <section id="ejb-intro-ejb-grainularity">
        <title>EJB Granularity</title>
        <itemizedlist spacing="compact">
            <listitem><para>Session EJB per Use Case too fine</para>
		        <itemizedlist spacing="compact">
		            <listitem><para>CreateAccountEJB</para></listitem>
		            <listitem><para>DepositEJB</para></listitem>
		            <listitem><para>WithdrawEJB</para></listitem>
		            <listitem><para>TransferEJB</para></listitem>
		        </itemizedlist>
            </listitem>
            <listitem><para>Group cohesive Use Cases into larger-grain Session EJBs</para>
		        <itemizedlist spacing="compact">
		            <listitem><para>Teller</para>
				        <itemizedlist spacing="compact">
				            <listitem><para>createAccount()</para></listitem>
				            <listitem><para>deposit()</para></listitem>
				            <listitem><para>withdraw()</para></listitem>
				            <listitem><para>transfer()</para></listitem>
				        </itemizedlist>
		            </listitem>
		        </itemizedlist>
            </listitem>
        </itemizedlist>
    </section>


    <section id="ejb-intro-ejb-types">
        <title>EJB Bean Types</title>
        <itemizedlist spacing="compact">
            <listitem><para>All are POJO-based</para>
                <itemizedlist spacing="compact">
                    <listitem><para>i.e., most Java classes can be made into an EJB</para></listitem>
                </itemizedlist>
            </listitem>
        </itemizedlist>
        
        
	    <section id="ejb-intro-ejb-entity">
	        <title>Entities (formerly Entity EJB)</title>

            <figure>
                <title>Example Entity</title>
<programlisting language="java"><![CDATA[@javax.persistence.Entity
@javax.persistence.Queries({
    @javax.persistence.Query(name="Reservation.getReservationsByName", query="
                select r from Reservation r
                where r.person.firstName like :firstName and 
                      r.person.lastName like :lastName")
})
public class Reservation {
    @javax.persistence.Id
    private long id;
     
    private String confirmation;
    
    @javax.persistence.Temporal(javax.persistence.TemporalType.DATE)
    private Date startDate;
    
    @javax.persistence.Temporal(javax.persistence.TemporalType.DATE)
    private Date endDate;
    
    @javax.persistence.ManyToOne
    @javax.persistence.JoinColumn    
    private Person person;]]></programlisting>                        
            </figure>
            
	        <itemizedlist spacing="compact">
	            <listitem><para>Represents shared data in the database</para></listitem>
	            <listitem><para>Typically interact at row/object level</para></listitem>
	            <listitem><para>Moved to Java Persistence API (JPA) Spec in EJB 3.0/JavaEE 5</para></listitem>
                <listitem><para>Not constrained to server-side</para></listitem>
	            <listitem><para>Examples:</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>Account, Owner</para></listitem>
			            <listitem><para>Account.deposit(double amount)</para></listitem>
			            <listitem><para>Account.getOwner()</para></listitem>
			        </itemizedlist>
	            </listitem>
                <listitem><para>Good for representing persistent information</para></listitem>
                <listitem><para>Contains no means to access external resources other than directly related information</para></listitem>
	        </itemizedlist>
	    </section>

	    <section id="ejb-intro-ejb-stateless">
	        <title>Stateless Session EJB</title>
                <figure>
                    <title>Stateless EJB Lifecycle</title>
                    <graphic scale="60" fileref="images/stateless-sessionbean-lifecycle.jpg"/>
                </figure>

                <figure>
                    <title>Example Stateless EJB</title>
<programlisting language="java"><![CDATA[@javax.ejb.Stateless
public class HotelMgmtEJB implements HotelMgmtRemote, HotelMgmtLocal {
    @PersistenceContext(unitName="ejbjpa-hotel")
    private EntityManager em;
    private HotelDAO dao;                                                                                                                                                                                                                                                                                                                                   
    private HotelMgmt hotelMgmt; 
    
    @PostConstruct
    public void init() {
        dao = new JPAHotelDAO();
        ((JPAHotelDAO)dao).setEntityManager(em);
        
        hotelMgmt = new HotelMgmtImpl();
        ((HotelMgmtImpl)hotelMgmt).setHotelDao(dao);
    }

    @Override
    public Room getRoom(int number) {
        return hotelMgmt.getRoom(number);
    }
}]]></programlisting>                        
            </figure>
    
	        <itemizedlist spacing="compact">
	            <listitem><para>Performs stateless actions on server-side</para></listitem>
	            <listitem><para>Maintains no conversational state</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>Each method ignorant of what went before it and after it</para></listitem>
                        <listitem><para>Persistence Context re-instantiated with each call (Transaction-Scope)</para></listitem>
			        </itemizedlist>
	            </listitem>
                <listitem><para>Methods take in a set of parameters and return a result</para></listitem>
	            <listitem><para>Maintains implementation state</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>example: DataSource</para></listitem>
			            <listitem><para>example: JMS connections</para></listitem>
                        <listitem><para>example: References to other EJBs</para></listitem>
			        </itemizedlist>
	            </listitem>
	            <listitem><para>Examples:</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>TaxCalculator.calcTax(doubt amount)</para></listitem>
			            <listitem><para>BuyerMgmt.placeBid(int auctionId, double amount)</para></listitem>
			            <listitem><para>Dmv.getExpiredLicenses()</para></listitem>
			        </itemizedlist>
	            </listitem>
                <listitem><para>Good for implementing stateless access to resources</para></listitem>
                <listitem><para>Contains no means to provide individualized access other than through separate deployments and call parameters</para></listitem>
	        </itemizedlist>
	    </section>
        
	    <section id="ejb-intro-ejb-stateful">
	        <title>Stateful Session EJB</title>
                <figure>
                    <title>Stateful EJB Lifecycle</title>
                    <graphic scale="60" fileref="images/stateful-sessionbean-lifecycle.jpg"/>
                </figure>

                <figure>
                <title>Example Stateful EJB</title>
<programlisting language="java"><![CDATA[@javax.ejb.Stateful
public class ReservationEJB implements ReservationRemote {
    @PersistenceContext(unitName="ejbjpa-hotel", type=PersistenceContextType.EXTENDED)
    private EntityManager em;
    
    @EJB
    private HotelMgmtLocal hotelMgmt;
    
    @Resource
    private SessionContext ctx;
    
    private List<Guest> guests = new LinkedList<Guest>();

    @Override
    @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)
    public int addGuest(Guest guest) {
        if (guest!=null) {
            guests.add(guest);
            em.persist(guest); //<== no transaction active yet
        }
        return guests.size();
    }

    @Override
    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    @Remove
    public List<Guest> reserveRooms() throws RoomUnavailableExcepton {
        List<Room> rooms = hotelMgmt.getAvailableRooms(null, 0, guests.size());
        if (rooms.size() < guests.size()) {
            //no rollback needed, we didn't do anything
            throw new RoomUnavailableExcepton(String.format("found on %d out of %d required", 
                    rooms.size(), guests.size()));
        }

        //assign each one of them a room
        List<Guest> completed = new ArrayList<Guest>(guests.size());
        Iterator<Room> roomItr = rooms.iterator();
        for (Guest guest: guests) {
            Room room = roomItr.next();
            try {
                //the room could be unavailable -- depending on whether pessimistic lock created
                guest = hotelMgmt.checkIn(guest, room); //<== will attempt to also persist guest
                completed.add(guest);
            } catch (RoomUnavailableExcepton ex) {
                //rollback any previous reservations
                ctx.setRollbackOnly();
                throw ex;
            }
        }
        return completed;
    }
}]]></programlisting>                        
            </figure>
            
	        <itemizedlist spacing="compact">
	            <listitem><para>Used to cache resources for client on server-side</para></listitem>
	            <listitem><para>Maintains conversational state</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>Object can cache values between calls</para>
					        <itemizedlist spacing="compact">
					            <listitem><para>example: iterator</para></listitem>
                                <listitem><para>Persistence Context (with cache of entities) can be retained between calls (Extended-Scope)</para></listitem>
					        </itemizedlist>
			            </listitem>
			            <listitem><para>Lifetime ends on timeout or specific client call</para></listitem>
			        </itemizedlist>
	            </listitem>
	            <listitem><para>Maintains implementation state</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>Not sharable between clients</para></listitem>
			            <listitem><para>All resources allocated to perform work for one instance</para></listitem>
			        </itemizedlist>
	            </listitem>
	            <listitem><para>Able to react to transaction completion/rollback (i.e., get callback)</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>example: commit data cache</para></listitem>
			            <listitem><para>example: issue message</para></listitem>
			        </itemizedlist>
	            </listitem>
                <listitem><para>Good for caching client state and back-end resource state over a multi-call session</para></listitem>
                <listitem><para>Inefficient to scale cached state for each user and across multiple servers</para></listitem>
	        </itemizedlist>
	    </section>
        
	    <section id="ejb-intro-ejb-singleton">
	        <title>Singleton Session EJB</title>
                <figure>
                    <title>Singleton EJB Lifecycle</title>
                    <graphic scale="80" fileref="images/singleton-sessionbean-lifecycle.jpg"/>
                </figure>
                <figure>
                    <title>Example Singleton EJB</title>
<programlisting language="java"><![CDATA[@javax.ejb.Singleton
@javax.ejb.Startup
@javax.ejb.ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)
@javax.ejb.AccessTimeout(value=3000)
public class StatsEJB implements StatsLocal, StatsRemote {
        private int total;

        @Override
        @javax.ejb.Lock(LockType.WRITE)
        public void increment() { ... }   
     
        @Override
        @javax.ejb.Lock(LockType.READ)
        public int getTotal() { ... }
...

}]]></programlisting>                        
            </figure>
            
	        <itemizedlist spacing="compact">
	            <listitem><para>Provides a single Session EJB instance on server-side</para></listitem>
	            <listitem><para>Single instance shared across all clients</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>Has READ/WRITE lock and timeout concerns</para></listitem>
			        </itemizedlist>
	            </listitem>
	            <listitem><para>Good for tracking shared state in memory</para></listitem>
                <listitem><para>Creates a bottleneck for concurrent access</para></listitem>
	        </itemizedlist>
	    </section>
        
	    <section id="ejb-intro-ejb-mdb">
	        <title>Message Driven EJB (MDB)</title>
            <figure>
                <title>Example Message Driven EJB</title>
<programlisting language="java"><![CDATA[
@javax.ejb.MessageDriven(activationConfig={
        @javax.ejb.ActivationConfigProperty(
                propertyName="destinationType",
                propertyValue="javax.jms.Topic"),            
        @javax.ejb.ActivationConfigProperty(
                propertyName="destination",
                propertyValue="java:/topic/ejava/examples/asyncMarket/topic1"),            
        @javax.ejb.ActivationConfigProperty(
                propertyName="messageSelector",
                propertyValue="JMSType in ('forSale', 'saleUpdate')"),
        @javax.ejb.ActivationConfigProperty(
                propertyName="acknowledgeMode",
                propertyValue="Auto-acknowledge")    
})
public class BuyerMDB implements MessageListener {
    @javax.ejb.EJB
    private BuyerLocal buyer;
    
    @javax.annotation.security.PermitAll
    public void onMessage(javax.jms.Message message) {
       ...
    }
}]]></programlisting>
            </figure>
            
	        <itemizedlist spacing="compact">
	            <listitem><para>Used to receive JMS messages</para></listitem>
	            <listitem><para>Similar to Stateless EJB, but with no callable interface</para></listitem>
	            <listitem><para>Typically provides a JMS facade for injected Session EJBs</para></listitem>
                <listitem><para>Good for implementing a JMS interface facade to business logic</para></listitem>
                <listitem><para>Unable to be called outside the scope of a JMS/JCA call -- should delegate to Session EJBs</para></listitem>
                <listitem><para>Has no client context (i.e., anonymous)</para></listitem>
	        </itemizedlist>
	    </section>
    </section>
    
    <section id="ejb-intro-iface">
       <title>EJB Interface Styles</title>
       
        <section id="ejb-intro-iface-business">
           <title>Business Interface</title>
            <figure>
                <title>Example Business Interface</title>
<programlisting language="java"><![CDATA[public interface Teller {
    Account createAccount(String accNum) throws BankException;
    void updateAccount(Account account) throws BankException;
    Account getAccount(String acctNum) throws BankException;    
}]]></programlisting>
            </figure>
            
            <itemizedlist spacing="compact">
                <listitem><para>Pure POJO</para></listitem>
                <listitem><para>No ties to EJB</para></listitem>
                <listitem><para>No sense of local or remote</para></listitem>
            </itemizedlist>
        </section>    

        <section id="ejb-intro-iface-remote">
           <title>Remote Interface</title>
            <figure>
                <title>Example Remote Interface</title>
<programlisting language="java"><![CDATA[@javax.ejb.Remote
public interface TellerRemote extends Teller {
    Ledger getLedger() throws BankException;
    List<Owner> getOwners(int index, int count) throws BankException;
    String whoAmI();
}]]></programlisting>
<programlisting language="java"><![CDATA[public class Ledger implements java.io.Serializable {
...
}]]></programlisting>
            </figure>
            
            <itemizedlist spacing="compact">
                <listitem><para>Uses RMI-based technology to provide built-in implementation</para></listitem>
                <listitem><para>Data types must be built-in types or Serializable types</para></listitem>
                <listitem><para>Pass-by-value semantics between client and EJB</para></listitem>
                <listitem><para>Usable by local (same application/EAR) and remote (outside of same application/EAR) endpoints</para></listitem>
            </itemizedlist>

        </section>    
       
        <section id="ejb-intro-iface-local">
           <title>Local Interface</title>
            <figure>
                <title>Example Local Interface</title>
<programlisting language="java"><![CDATA[
@Local
public interface TellerLocal extends Teller {
}]]></programlisting>
            </figure>
            
            
            <itemizedlist spacing="compact">
                <listitem><para>Pass-by-reference semantics between client and EJB</para></listitem>
                <listitem><para>client and EJB share the same object instance</para></listitem>
                <listitem><para>Must load class from same classloader</para></listitem>
                <listitem><para>Data types need not be built-in or Serializable types</para></listitem>
                <listitem><para>Restricted to be from application (e.g., must be from same EAR to share reference)</para></listitem>
            </itemizedlist>
            
            <warning>
                <title>Design Remote Interfaces for Remote Clients</title>
                <para>Remote clients are different from local clients and require 
                     different considerations when designing the remote interface.
                     Although JavaEE/EJB make it technically possible to implement
                     location independence the interface hierarchies, this is usually
                     not feasible when dealing with non-trivial interface requirements.
                     Design local interfaces for local clients (within the deployed application)
                     and design remote interfaces for remote clients.
                </para>
            </warning>       
            
        </section>    
       
        <section id="ejb-intro-iface-noiface">
           <title>No Interface EJB</title>
            <figure>
                <title>Example No Interface EJB</title>
<programlisting language="java"><![CDATA[
@javax.ejb.Singleton
@javax.ejb.Startup
@javax.ejb.ConcurrencyManagement(ConcurrencyManagementType.CONTAINER)
@javax.ejb.AccessTimeout(value=3000)
public class StatsEJB {
        private int total;

        @javax.ejb.Lock(LockType.WRITE)
        public void increment() { ... }   
     
        @javax.ejb.Lock(LockType.READ)
        public int getTotal() { ... }
...

}]]></programlisting>
            </figure>
            
            <itemizedlist spacing="compact">
                <listitem><para>Interfaces are an encapsulation issue and not an EJB issue</para></listitem>
                <listitem><para>If you do not need the encapsulation of an interface -- EJB will *not* make you add one for local access</para></listitem>
                <listitem><para>Must have interface when using remote clients</para></listitem>
            </itemizedlist>
        </section>    
       
        <section id="ejb-intro-iface-other">
           <title>Other Interface Types</title>
            <itemizedlist spacing="compact">
                <listitem><para>JAX-RS support</para></listitem>
                <listitem><para>SOAP support</para></listitem>
                <listitem><para>CORBA/IIOP support</para></listitem>
            </itemizedlist>
            
            
   <figure>
       <title>Example JAX-RS Interface</title>
<programlisting language="java"><![CDATA[
import java.net.URI;
import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.UriBuilder;
import javax.ws.rs.core.UriInfo;

@Path("/products")
public class ProductsResource {
        @Inject
        private InventoryMgmtEJB ejb;
        @Context 
        private UriInfo uriInfo;

    /**
     * Updates a product with the values of the object passed in
     * @param id
     * @param product
     * @return updated product if successful
     */
    @PUT @Path("{id}")
    @Consumes({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    @Produces({MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON})
    @JsonbAnnotation  //helps trigger JSON-B response marshaling when DTO also JAXB
    public Response updateProduct(@PathParam("id") int id, 
            @JsonbProperty Product product  //annotation helps trigger JSON-B request demarshaling when DTO also JAXB
         ) {
        logger.debug("{} {}", request.getMethod(), uriInfo.getAbsolutePath());

        try {
            Product p = ejb.updateProduct(product);
            logger.info("updated pojo product={}", p);
            return Response.ok(p)
                    .tag("" + p.getVersion())
                    .build();
        } catch (Exception ex) {
            return ResourceHelper.serverError(logger, "update product", ex).build();
        }
    }
}]]></programlisting>
   </figure>
            
        </section>    
        
    </section>    

    
    
    
    <section id="ejb-intro-ejb-deploy">
        <title>EJB Deployments</title>

	    <section id="ejb-intro-ejb-deploy-ejbmodule">
	        <title>EJB Module</title>
		    <figure>
		        <title>EJB Module</title>
		        <graphic fileref="images/ejb-module.png"/>
		    </figure>        
	        <itemizedlist spacing="compact">
	            <listitem><para>Contains one or more EJB beans</para></listitem>
	        </itemizedlist>
	    </section>

	    <section id="ejb-intro-ejb-deploy-naked">
	        <title>Naked EJB Deployment</title>
		    <figure>
		        <title>Naked EJB Deployment</title>
		        <graphic fileref="images/ejb-intro-naked-ejb-deploy.png"/>
		    </figure>        
	        <itemizedlist spacing="compact">
	            <listitem><para>EJB modules are deployable by themselves</para></listitem>
	            <listitem><para>Contain no mechanism to bring in dependencies</para></listitem>
	            <listitem><para>Can only be communicated with using remote interface</para></listitem>
	        </itemizedlist>
	    </section>

	    <section id="ejb-intro-ejb-deploy-ear">
	        <title>EJB EAR Deployment</title>
		    <figure>
		        <title>EAR Deployment</title>
		        <graphic scalefit="0" fileref="images/ejb-intro-ear-deploy.png"/>
		    </figure>        
	        <itemizedlist spacing="compact">
	            <listitem><para>Can deploy multiple EJB modules, multiple WARs, and utility libraries</para></listitem>
	            <listitem><para>Provides means to use local interfaces/pass by reference between EJBs and WAR/WEB</para></listitem>
	            <listitem><para>Convenient wrapper for entire application</para></listitem>
	        </itemizedlist>
	    </section>

	    <section id="ejb-intro-ejb-deploy-war">
	        <title>EJB WAR ("flexible") Deployment</title>
		    <figure>
		        <title>WAR Deployment</title>
		        <graphic fileref="images/ejb-intro-war-deploy.png"/>
		    </figure>        
	        <itemizedlist spacing="compact">
	            <listitem><para>Can deploy multiple EJB modules within WEB-INF/lib</para></listitem>
	            <listitem><para>Can deploy multiple EJB beans within WEB-INF/classes</para>
			        <itemizedlist spacing="compact">
			            <listitem><para>Realistically useful when Servlet or JSP wishes to use declarative JTA transactions 
			                or security access control within a helper class</para></listitem>
			            <listitem><para>Ideal use for No-interface Session EJB</para></listitem>
			        </itemizedlist>
	            </listitem>
	            <listitem><para>Eliminates need for EAR in some cases</para></listitem>
	        </itemizedlist>
	    </section>

	    <section id="ejb-intro-ejb-deploy-classloader">
	        <title>EAR Deployment Class Loaders</title>
                <figure>
                    <title>Class Loaders</title>
                    <graphic fileref="images/ejb-intro-classloader.jpg"/>
                </figure>        
	        <itemizedlist spacing="compact">
	            <listitem><para>Arranged in a parent/child relationship</para></listitem>
	            <listitem><para>May access classes/resources loaded by local and parent class loaders</para></listitem>
	            <listitem><para>Do not have access to classes/resources loaded by sibling class loaders</para></listitem>
	            <listitem><para>Requests for classes are first delegated to parent class loader</para></listitem>
	        </itemizedlist>

                <figure>
                    <title>Separate Deployments</title>
                    <graphic fileref="images/ejb-intro-separatedeployments.jpg"/>
                </figure>        
	        <itemizedlist spacing="compact">
	            <listitem><para>Classes loaded by one EJB deployment are not sharable with other deployments</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Must use remote interfaces and pass-by-value serialized data</para></listitem>
                            <listitem><para>No pass by reference</para></listitem>
                        </itemizedlist>
                    </listitem>
	            <listitem><para>EJB classes/resources can be shared with single Web App if loaded in WEB-INF/lib</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Local interfaces/resources are local to that WAR</para></listitem>
                            <listitem><para>EJB classes cannot be shared across WARs</para></listitem>
                            <listitem><para>Must again resort to remote interfaces and pass-by-value serialized data to share implementations</para></listitem>
                        </itemizedlist>
                    </listitem>
	        </itemizedlist>

                <figure>
                    <title>EAR Class Loaders</title>
                    <graphic fileref="images/ejb-intro-earclassloader.jpg"/>
                </figure>        
	        <itemizedlist spacing="compact">
	            <listitem><para>EAR class loader is root to deployed application</para></listitem>
	            <listitem><para>EJB class loader is host to all EJBs and root to WAR class loaders</para></listitem>
	            <listitem><para>WAR class loaders are separate</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Allows two separate WARs to generate the same class from two separate index.jsp files</para></listitem>
                            <listitem><para>Disallows WAR from duplicating EAR/EJB-supplied classes</para></listitem>
                        </itemizedlist>
                    </listitem>
	            <listitem><para>EJBs and WARs-to-EJBs can share information using pass-by-reference</para></listitem>
	        </itemizedlist>
	    </section>
    </section>
</chapter>
  
