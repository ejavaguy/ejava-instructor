<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="ejb-security-rmiclient">
    <title>EJB Security RMI Client</title>
    <itemizedlist spacing="compact">
        <listitem><para>JBoss Remoting and JNDI InitialContext</para></listitem>
        <listitem><para>EJBClient and JNDI InitialContext</para></listitem>
        <listitem><para>Changing Users</para></listitem>
        <listitem><para>Access Violations</para></listitem>
        <listitem><para>Access Granted</para></listitem>
    </itemizedlist>

    <section id="ejb-security-rmiclient-remoting">
        <title>JBoss Remoting</title>
        <itemizedlist spacing="compact">
            <listitem><para>Used to perform JMS and other non-EJB resource lookups</para></listitem>
        </itemizedlist>
        
        <section id="ejb-security-rmiclient-remoting-jndiprops">
            <title>jndi.properties</title>
<programlisting language=""><![CDATA[java.naming.factory.initial=org.wildfly.naming.client.WildFlyInitialContextFactory
java.naming.factory.url.pkgs=
java.naming.provider.url=http-remoting://127.0.0.1:8080
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>factory.initial set to WildFlyInitialContextFactory implementation</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>compatible with both JBoss Remoting and EJB Client</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>provider.url set to address of JBoss server</para></listitem>
                <listitem><para>url.pkgs option not needed with Wildfly implementation (e.g., "ejb:")</para></listitem>
            </itemizedlist>
        </section>
        
                
        <section id="ejb-security-rmiclient-remoting-jndiname">
            <title>JBoss Remoting JNDI Name</title>
<programlisting language=""><![CDATA[securePingEAR/securePingEJB/SecurePingEJB!info.ejava.examples.secureping.ejb.SecurePingRemote]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Using generic JBoss Remoting JNDI name</para></listitem>
            </itemizedlist>
        </section>
                
        <section id="ejb-security-rmiclient-remoting-auth">
            <title>JBoss Remoting Authentication with JNDI InitialContext</title>
<programlisting language="java"><![CDATA[private Context runAs(String[] login) throws NamingException, IOException {
    Properties env = new Properties(); //load the defaults from jndi.properties
    if (login != null) {
        env.put(Context.SECURITY_PRINCIPAL, login[0]);
        env.put(Context.SECURITY_CREDENTIALS, login[1]);
    }
    return new InitialContext(env);
}
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Client provides credentials in JNDI prior to obtaining InitialContext</para></listitem>
                <listitem><para>Must use current JNDI Context to lookup @Remote</para></listitem>
            </itemizedlist>
        </section>
                
        <section id="ejb-security-rmiclient-remoting-auth-example">
            <title>Example Changing Users with JBoss Remoting</title>
<programlisting language="java"><![CDATA[protected String[] userLogin = new String[] { userUser, userPassword };
protected String[] adminLogin = new String[] { adminUser, adminPassword };
]]></programlisting>

<programlisting language="java"><![CDATA[jndi=runAs(userLogin);
ejb=(SecurePing)jndi.lookup(jndiName);
assertFalse("user in admin role", ejb.isCallerInRole("admin"));
assertTrue("user not in user role", ejb.isCallerInRole("user"));
jndi.close();

jndi=runAs(adminLogin);
ejb=(SecurePing)jndi.lookup(jndiName);
assertTrue("admin not in admin role", ejb.isCallerInRole("admin"));
assertTrue("admin not in user role", ejb.isCallerInRole("user"));
jndi.close();
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Client can switch credentials with a change in InitialContexts and @Remote reference</para></listitem>
            </itemizedlist>
        </section>
                
        <section id="ejb-security-rmiclient-remoting-auth-fixed">
            <title>Optional Fixed Credentials</title>
<programlisting language=""><![CDATA[java.naming.security.principal=known
java.naming.security.credentials=password1!]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Fixed credentials can be placed in jndi.properties when known and not changing</para></listitem>
            </itemizedlist>
        </section>

    </section>

    <section id="ejb-security-rmiclient-ejbclient">
        <title>EJBClient</title>
        <itemizedlist spacing="compact">
            <listitem><para>Primary means to communicate with EJB using RMI</para></listitem>
            <listitem><para>Leverages vendor knowledge of EJB and specific @Remote interface</para></listitem>
        </itemizedlist>
                
        <section id="ejb-security-rmiclient-ejbclient-jndiprops">
            <title>jndi.properties</title>
<programlisting language=""><![CDATA[java.naming.factory.initial=org.wildfly.naming.client.WildFlyInitialContextFactory
java.naming.factory.url.pkgs=
java.naming.provider.url=http-remoting://127.0.0.1:8080
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>factory.initial not important if url.pkgs extension supplied</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>WildFlyInitialContextFactory performs this automatically</para></listitem>
                    </itemizedlist>
                </listitem>
                <listitem><para>provider.url same as with JBoss Remoting</para></listitem>
            </itemizedlist>
        </section>
        

                
        <section id="ejb-security-rmiclient-ejbclient-jndiauth">
            <title>EJB Client Authentication with JNDI InitialContext</title>
<programlisting language="java"><![CDATA[protected static String[] currentLogin;
]]></programlisting>

<programlisting language="java"><![CDATA[private void runAs(String[] login) throws NamingException, IOException {
    if (!Arrays.equals(login, currentLogin) || securePing==null) {
        Properties props = new Properties();  //initialize with values from jndi.properties
        if (login!=null) {
            props.put(Context.SECURITY_PRINCIPAL, login[0]);
            props.put(Context.SECURITY_CREDENTIALS, login[1]);
        }
        InitialContext jndi = null;
        try {
            jndi = new InitialContext(props);
            securePing = (SecurePingRemote)jndi.lookup(jndiName);
            currentLogin = login;
        } finally {
            if (jndi!=null) { jndi.close(); }
        }
    }
}
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>EJBClient stores credentials with connection</para></listitem>
                <listitem><para>No security need to keep InitialContext open</para></listitem>
            </itemizedlist>
        </section>
                
                
        <section id="ejb-security-rmiclient-ejbclient-example">
            <title>Example Changing Users with EJBClient</title>
<programlisting language="java"><![CDATA[protected String[] userLogin = new String[] { userUser, userPassword };
protected String[] adminLogin = new String[] { adminUser, adminPassword };
]]></programlisting>

<programlisting language="java"><![CDATA[runAs(userLogin);
assertFalse("user in admin role",   securePing.isCallerInRole("admin"));
assertTrue("user not in user role", securePing.isCallerInRole("user"));

runAs(adminLogin);
assertTrue("admin not in admin role", securePing.isCallerInRole("admin"));
assertTrue("admin not in user role",  securePing.isCallerInRole("user"));
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>No need to get new InitialContext or new lookup of @Remote</para></listitem>
            </itemizedlist>
        </section>
                
        <section id="ejb-security-rmiclient-ejbclient-auth-fixed">
            <title>Optional Fixed Credentials</title>
<programlisting language=""><![CDATA[remote.connection.default.username=known
remote.connection.default.password=password1!]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Fixed credentials can be placed in jboss-ejb-client.properties when known and not changing</para></listitem>
            </itemizedlist>
        </section>
    </section>
    
    <section id="ejb-security-rmiclient-sanitycheck">
        <title>Security Sanity Check</title>
        <itemizedlist spacing="compact">
            <listitem><para>Useful to implement sanity check to assure authentication and authorizations in place</para></listitem>
        </itemizedlist>

<programlisting language="java"><![CDATA[@Stateless
public class SecurePingEJB implements SecurePingRemote, SecurePingLocal {    
    @Resource
    SessionContext ctx;
]]></programlisting>
                
        <section id="ejb-security-rmiclient-sanitycheck-whoami">
            <title>whoAmI</title>
<programlisting language="java"><![CDATA[@PermitAll
public String whoAmI() {
    String name= ctx.getCallerPrincipal().getName();
    logger.debug("whoAmI()={}", name);
    return name;
}
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Implement debug method to return authenticated identity</para></listitem>
            </itemizedlist>
        </section>

        <section id="ejb-security-rmiclient-sanitycheck-inrole">
            <title>isCallerInRole</title>
<programlisting language="java"><![CDATA[@PermitAll
public boolean isCallerInRole(String role) {
    boolean result = ctx.isCallerInRole(role);
    logger.debug("user={}, isCallerInRole({})={}", ctx.getCallerPrincipal().getName(), role, result);  
    return result;
}
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Implement debug method to return role query result</para></listitem>
            </itemizedlist>
        </section>
                
        <section id="ejb-security-rmiclient-sanitycheck-success">
            <title>Client Issues Security Query Calls</title>
<programlisting language="java"><![CDATA[runAs(userLogin);
assertEquals("unexpected user", userUser, securePing.whoAmI());
assertFalse("user in internalRole role", securePing.isCallerInRole("internalRole"));

runAs(adminLogin);
assertEquals("unexpected user", adminUser, securePing.whoAmI());
assertTrue("admin not in internalRole role", securePing.isCallerInRole("internalRole"));]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Client asserts security query results to verify setup correctly</para></listitem>
            </itemizedlist>
        </section>
                
        <section id="ejb-security-rmiclient-sanitycheck-accessviolation">
            <title>Example Access Violation</title>
<programlisting language="java"><![CDATA[Context jndi = new InitialContext();
logger.debug("looking up jndi.name={}", jndiName);
securePing = (SecurePingRemote)jndi.lookup(jndiName);

try {
    runAs(userLogin);
    logger.info(securePing.pingAdmin());
    fail("didn't detect non-admin user");
}
catch (EJBAccessException ex) {
    logger.info("expected exception thrown:" + ex);
}]]></programlisting>

<programlisting language=""><![CDATA[
-looking up jndi.name=ejb:securePingEAR/securePingEJB/SecurePingEJB
   !info.ejava.examples.secureping.ejb.SecurePingRemote as user1
-found=Proxy for remote EJB StatelessEJBLocator for "securePingEAR/securePingEJB/SecurePingEJB", 
   view is interface info.ejava.examples.secureping.ejb.SecurePingRemote, affinity is None
-login=[user1, password1!], whoAmI=user1
-expected exception thrown:javax.ejb.EJBAccessException: WFLYEJB0364: Invocation on method: 
   public abstract java.lang.String info.ejava.examples.secureping.ejb.SecurePing.pingAdmin() 
   of bean: SecurePingEJB is not allowed
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>EJBAccessException thrown when accessing method not allowed</para></listitem>
            </itemizedlist>
        </section>
                
        <section id="ejb-security-rmiclient-sanitycheck-accessgranted">
            <title>Example Access Granted</title>
<programlisting language="java"><![CDATA[runAs(adminLogin);
logger.info(securePing.pingAdmin());]]></programlisting>

<programlisting language=""><![CDATA[
-looking up jndi.name=ejb:securePingEAR/securePingEJB/SecurePingEJB
   !info.ejava.examples.secureping.ejb.SecurePingRemote as admin1
-found=Proxy for remote EJB StatelessEJBLocator for "securePingEAR/securePingEJB/SecurePingEJB", 
   view is interface info.ejava.examples.secureping.ejb.SecurePingRemote, affinity is None
-login=[admin1, password1!], whoAmI=admin1
-called pingAdmin, principal=admin1, isUser=true, isAdmin=true, isInternalRole=true
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>Access to method protected by declarative security granted</para></listitem>
                <listitem><para>Results of programmatic security checks returned in formatted text string</para></listitem>
            </itemizedlist>
        </section>
    </section>
    
    <section id="ejb-security-rmiclient-summary">
        <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem><para>JBoss Remoting and JNDI InitialContext</para></listitem>
            <listitem><para>EJBClient and JNDI InitialContext</para></listitem>
            <listitem><para>Changing Users</para></listitem>
            <listitem><para>Access Violations</para></listitem>
            <listitem><para>Access Granted</para></listitem>
        </itemizedlist>
    </section>

</chapter>
  
