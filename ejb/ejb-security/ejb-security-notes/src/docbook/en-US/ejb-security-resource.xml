<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="ejb-security-resource">
    <title>JAX-RS Resource Security</title>
    <itemizedlist spacing="compact">
        <listitem>Setup WAR security<para></para></listitem>
        <listitem><para>HTTP BASIC authentification with JAX-RS</para></listitem>
        <listitem><para>HTTPS private connections</para></listitem>
        <listitem><para>JAX-RS Filters</para></listitem>
        <listitem><para>Declarative Access Control</para></listitem>
    </itemizedlist>

    <section id="ejb-security-resource-setup">
        <title>Web Security Setup</title>
        <itemizedlist spacing="compact">
            <listitem><para>Add/modify deployment descriptors in WEB-INF</para></listitem>
        </itemizedlist>
<programlisting language=""><![CDATA[
$ jar tf target/securePingJaxRsWAR-5.0.0-SNAPSHOT.war
...
WEB-INF/beans.xml
WEB-INF/web.xml
WEB-INF/jboss-web.xml
]]></programlisting>

        <section id="ejb-security-resource-setup-webxml">
            <title>Assign WAR security-domain: jboss-web.xml</title>
<programlisting language="xml"><![CDATA[# jboss-web.xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE jboss-web>
<jboss-web xmlns="http://www.jboss.com/xml/ns/javaee"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.jboss.com/xml/ns/javaee http://www.jboss.org/j2ee/schema/jboss-web_12_0.xsd"
           version="12.0">
    <security-domain>other</security-domain>      
</jboss-web>
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>default-security domain was assigned within Wildfly configuration - making this optional</para></listitem>
            </itemizedlist>
        </section>

        <section id="ejb-security-resource-setup-authmethod">
            <title>Assign WAR <ulink url="https://docs.oracle.com/cd/E19798-01/821-1841/gkbsa/index.html">auth-method</ulink>: web.xml</title>
            <itemizedlist spacing="compact">
                <listitem><para>BASIC - username and password passed in "Authentication" header Base64 encoded</para></listitem>
                <listitem><para>FORM - credentials submitted as part of a form response</para></listitem>
                <listitem><para>CLIENT-CERT - client public key authenticated as part of HTTPS connection</para></listitem>
                <listitem><para>DIGEST - an encyrpted form of BASIC</para></listitem>
                <listitem><para>EXTERNAL</para></listitem>
            </itemizedlist>
<programlisting language="xml"><![CDATA[# web.xml
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  version="4.0">
    ...
</web-app>
]]></programlisting>
<programlisting language="xml"><![CDATA[# web.xml
<login-config>
  <auth-method>BASIC</auth-method>
  <realm-name>ApplicationRealm</realm-name>
</login-config>
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>May need separate WARs for mixed solutions using BASIC (API) and FORM</para></listitem>
                <listitem><para>Wildfly legacy security offers the following option</para></listitem>
            </itemizedlist>
<programlisting language="xml"><![CDATA[# web.xml
  <!-- if mixing JAX-RS BASIC with HTML FORM
  http://undertow.io/undertow-docs/undertow-docs-1.3.0/index.html#servlet-security
   -->
  <auth-method>BASIC?silent=true,FORM</auth-method>
]]></programlisting>
        </section>
    </section>


    <section id="ejb-security-resource-jaxrs">
        <title>JAX-RS Resource Class</title>

<programlisting language="java"><![CDATA[@ApplicationPath("api")
public class SecurePingJaxRsApplication extends Application {
]]></programlisting>
<programlisting language="java"><![CDATA[@Path("ping")
@PermitAll
public class SecurePingResource {
    //this injection requires CDI, which requires a WEB-INF/beans.xml file be in place to activate
    @EJB(beanName="SecurePingEJB", beanInterface=SecurePingLocal.class)
    private SecurePing secureService;
    
    @Context
    private SecurityContext ctx;
]]></programlisting>
        <itemizedlist spacing="compact">
            <listitem><para>Accessible via "/api/ping"</para></listitem>
        </itemizedlist>

        <section id="ejb-security-resource-jaxrs-debug">
            <title>JAX-RS Debug Methods</title>

            <section id="ejb-security-resource-jaxrs-debug-whoami">
                <title>whoAmI</title>
                <itemizedlist spacing="compact">
                    <listitem><para>Return the authenticated userName of the caller from the EJB tier</para></listitem>
                </itemizedlist>
<programlisting language="java"><![CDATA[@Path("whoAmI")
@GET
@Produces(MediaType.TEXT_PLAIN)
public Response whoAmI() {
    ResponseBuilder rb = null;
    try {
        rb = Response.ok(secureService.whoAmI());
    } catch (Exception ex) {
        rb=makeExceptionResponse(ex);
    }
    return rb.build();
}
]]></programlisting>
                <itemizedlist spacing="compact">
                    <listitem><para>Accessible via GET "/api/ping/whoAmI"</para></listitem>
                </itemizedlist>
            </section>


            <section id="ejb-security-resource-jaxrs-debug-callerrole">
                <title>isCallerInRole</title>
                <itemizedlist spacing="compact">
                    <listitem><para>Return the role query result for current user from EJB tier</para></listitem>
                </itemizedlist>
<programlisting language="java"><![CDATA[@Path("roles/{role}")
@GET
@Produces(MediaType.TEXT_PLAIN)
public Response isCallerInRole(@PathParam("role") String role) {
    ResponseBuilder rb = null;
    try {
        rb = Response.ok(secureService.isCallerInRole(role));
    } catch (Exception ex) {
        rb=makeExceptionResponse(ex);
    }
    return rb.build();        
}
]]></programlisting>
                <itemizedlist spacing="compact">
                    <listitem><para>Accessible via GET "/api/ping/roles/{role}"</para></listitem>
                </itemizedlist>
            </section>
        </section>
    </section>

    <section id="ejb-security-resource-client">
        <title>JAX-RS Client Authentication</title>

        <section id="ejb-security-resource-client-header">
            <title>Authorization Header</title>
            <itemizedlist spacing="compact">
                <listitem><para>Form the Authorization value for the header</para>
<programlisting language="java"><![CDATA[# client
String credentials = userUser + ":" + userPassword;
String authn = "Basic " + Base64.getEncoder().encodeToString(credentials.getBytes());
]]></programlisting>
<programlisting language=""><![CDATA[
Basic dXNlcjE6cGFzc3dvcmQxIQ==
]]></programlisting>
                </listitem>

                <listitem><para>Add Authorizaton header to JAX-RS request</para>
<programlisting language="java"><![CDATA[# client
Response response = target.request(MediaType.TEXT_PLAIN)
        .header("Authorization", authn)
        .get();
]]></programlisting>
<programlisting language=""><![CDATA[
Authorization: Basic dXNlcjE6cGFzc3dvcmQxIQ==
]]></programlisting>
                </listitem>
            </itemizedlist>
        </section>

        <section id="ejb-security-resource-client-adapter-class">
            <title>JAX-RS Client Authorization Filter</title>
            <itemizedlist spacing="compact">
                <listitem><para>Above unwrapped solution works - but mixes business communication details with security details</para></listitem>
                <listitem><para>Better to use a filter - promotes separation of concerns</para></listitem>
            </itemizedlist>

<programlisting language="java"><![CDATA[import java.io.IOException;
import java.util.Base64;

import javax.ws.rs.client.ClientRequestContext;
import javax.ws.rs.client.ClientRequestFilter;
import javax.ws.rs.core.MultivaluedMap;
]]></programlisting>

<programlisting language="java"><![CDATA[public class BasicAuthnFilter implements ClientRequestFilter {
    private final String authn;
    
    public BasicAuthnFilter(String username, String password) {
        String credentials = username + ":" + password;
        authn = "Basic " + Base64.getEncoder().encodeToString(credentials.getBytes());
    }

    @Override
    public void filter(ClientRequestContext requestContext) throws IOException {
        MultivaluedMap<String, Object> headers = requestContext.getHeaders();
        headers.add("Authorization", authn);
    }
}
]]></programlisting>
        </section>

        <section id="ejb-security-resource-client-adapter-add">
            <title>JAX-RS Client Authorization Filter Registration</title>
            <itemizedlist spacing="compact">
                <listitem><para>Instantiate the filter</para>
<programlisting language="java"><![CDATA[# client
ClientRequestFilter authnFilter = new BasicAuthnFilter(userUser, userPassword);
]]></programlisting>
                </listitem>
                <listitem><para>Register filter with JAX-RS Client</para>
<programlisting language="java"><![CDATA[# client
Client jaxRsClient = ClientBuilder.newClient(); 
jaxRsClient.register(authnFilter);
]]></programlisting>
                </listitem>
                <listitem><para>Leave remaining calls untouched</para></listitem>
            </itemizedlist>
<programlisting language="java"><![CDATA[# client
URI whoAmIUri = UriBuilder.fromUri(baseHttpUrl).path("whoAmI").build();
WebTarget target = jaxRsClient.target(whoAmIUri);
logger.debug("GET {}", target.getUri());
Response response = target.request(MediaType.TEXT_PLAIN)
        .get();
]]></programlisting>

          <tip>
            <title>Cache JAX-RS Client and Filter Chains</title>
            <para>
              If switching identities, you will need multiple JAX-RS Client instances.
              Best performance to cache Client instances rather than re-construct each 
              and their filter chain each time. 
            </para>
<programlisting language="java"><![CDATA[private Map<String, Client> jaxRsClients = new HashMap<>();
]]></programlisting>
          </tip>
        </section>

        <section id="ejb-security-resource-client-https">
            <title>Protect BASIC Credentials with HTTPS</title>
            <itemizedlist spacing="compact">
                <listitem><para>Problem - HTTP will send credential in the clear</para></listitem>
                <listitem><para>Base64 is an encoding - not an encyption</para></listitem>
            </itemizedlist>


            <section id="ejb-security-resource-client-https-transport">
                <title>Add transport-guarantee to web.xml for URI patterns</title>
                <itemizedlist spacing="compact">
                    <listitem><para>NONE - (default) no confidentiality required (HTTP)</para></listitem>
                    <listitem><para>CONFIDENTIAL - confidentiality required (HTTPS)</para></listitem>
                </itemizedlist>
<programlisting language="xml"><![CDATA[# web.xml
<security-constraint>
    <web-resource-collection>
        <web-resource-name>methods</web-resource-name>
        <url-pattern>/api/ping/whoAmI</url-pattern>
        <url-pattern>/api/ping/canAccess</url-pattern>
    </web-resource-collection>
    <user-data-constraint>
        <transport-guarantee>CONFIDENTIAL</transport-guarantee>
    </user-data-constraint>
</security-constraint>
]]></programlisting>
                <itemizedlist spacing="compact">
                    <listitem><para>Specifying CONFIDENTIAL will disable HTTP for url-pattern and cause re-direct to HTTPS</para></listitem>
                </itemizedlist>
            </section>

            <section id="ejb-security-resource-client-https-redirect">
                <title>Client Redirect to HTTPS</title>
                <itemizedlist spacing="compact">
                    <listitem><para>Inspect response headers using Filter</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>ClientResponseFilter provides convenient access to request and response for debug</para></listitem>
                        </itemizedlist>
<programlisting language="java"><![CDATA[# client
public class LoggingFilter implements ClientResponseFilter {
    private final Logger logger;
    public LoggingFilter(Logger logger) {
        this.logger = logger;
    }
    @Override
    public void filter(ClientRequestContext requestContext, 
                       ClientResponseContext responseContext) {
        String method = requestContext.getMethod();
        String uri = requestContext.getUri().toString();
        StatusType status = responseContext.getStatusInfo();
        logger.debug("{} {}, returned {}/{}\nhdrs sent: {}\nhdrs rcvd: {}", 
                method, uri, status.getStatusCode(), status, 
                requestContext.getStringHeaders(), 
                responseContext.getHeaders());

    }
}
]]></programlisting>
                    </listitem>
                    <listitem><para>Register Filter with Client</para>
<programlisting language="java"><![CDATA[# client
ClientResponseFilter loggingFilter = new LoggingFilter(logger);
jaxRsClient.register(loggingFilter);
]]></programlisting>
                    </listitem>
                    <listitem><para>HTTP Headers - Redirect</para>
<programlisting language=""><![CDATA[# client
-GET http://localhost:8080/securePingApi/api/ping/whoAmI, returned 302/Found
hdrs sent: [Accept=text/plain,
            Authorization=Basic dXNlcjE6cGFzc3dvcmQxIQ==]
hdrs rcvd: [Connection=keep-alive,
            Content-Length=0,
            Date=Tue, 13 Nov 2018 14:03:28 GMT,
            Location=https://localhost:8443/securePingApi/api/ping/whoAmI]
]]></programlisting>
                        <itemizedlist spacing="compact">
                            <listitem><para>302/Found response re-directs to Location</para></listitem>
                            <listitem><para>Location contains full HTTPS URL</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Use HTTPS URL</para>
                        <itemizedlist spacing="compact">
                            <listitem><para>Change URL to use HTTPS versus HTTP</para></listitem>
                            <listitem><para>This is same URL returned in 302/FOUND re-direct</para></listitem>
                        </itemizedlist>
<programlisting language="java"><![CDATA[# client
if (response.getStatus()==302) {
    String redirectTo = response.getHeaderString("Location");
    target = jaxRsClient.target(redirectTo);
    logger.debug("GET {}", target.getUri());
    response = target.request(MediaType.TEXT_PLAIN).get();
}
]]></programlisting>
<programlisting language=""><![CDATA[
-GET https://localhost:8443/securePingApi/api/ping/whoAmI, returned 200/OK
hdrs sent: [Accept=text/plain,
            Authorization=Basic dXNlcjE6cGFzc3dvcmQxIQ==]
hdrs rcvd: [Connection=keep-alive,
            Content-Length=5,
            Content-Type=text/plain;charset=UTF-8,
            Date=Tue, 13 Nov 2018 14:43:27 GMT]
]]></programlisting>
                    </listitem>
                </itemizedlist>
            </section>

            <section id="ejb-security-resource-client-https-cert">
                <title>Client TrustStore</title>
                <itemizedlist spacing="compact">
                    <listitem><para>Java clients require server or server's certificate authority (CA) in trustStore</para></listitem>
                    <listitem><para>HTTPS will fail without Wildfly certificate in client trustStore</para></listitem>
                </itemizedlist>

                <itemizedlist spacing="compact">
                    <listitem><para>Define a path to Java Keystore with Server Public Key</para>
<programlisting language="xml"><![CDATA[# IT client pom.xml
<properties>
    <java.truststore>${jboss.home}/standalone/configuration/application.keystore</java.truststore>
]]></programlisting>
                        <itemizedlist spacing="compact">
                            <listitem><para>Example uses server's identity keyStore for simplicity</para></listitem>
                            <listitem><para>keyStore contains server's public key (and private key)</para></listitem>
                            <listitem><para>no password required to access keyStore public keys</para></listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem><para>Pass trustStore System Property using failsafe configuration</para>
<programlisting language="xml"><![CDATA[# IT client pom.xml
<pluginManagement>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>${maven-failsafe-plugin.version}</version>
            <configuration>
                <systemPropertyVariables>
                    <javax.net.ssl.trustStore>${java.truststore}</javax.net.ssl.trustStore>
                </systemPropertyVariables>
            </configuration>
            ...
]]></programlisting>
                        <itemizedlist spacing="compact">
                            <listitem><para>results in process launched with -Djavax.net.ssl.trustStore=.../application.keystore</para></listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </section>
        </section>
    </section>

    <section id="ejb-security-resource-declarative">
        <title>Declarative Access Control</title>

        <section id="ejb-security-resource-declarative-intermediates">
            <title>Two intermediate contexts defined to access Nested Pinger Resource</title>
<programlisting language="java"><![CDATA[
@Path("secured")
public Pinger authenticated() {
    return new Pinger();
}
]]></programlisting>
<programlisting language="java"><![CDATA[
@Path("unsecured")
public Pinger anonymous() {
    return new Pinger();
}
]]></programlisting>
        </section>

        <section id="ejb-security-resource-declarative-nested">
            <title>Same Nested Pinger Resource Exposed</title>
<programlisting language="java"><![CDATA[public class Pinger {
    @Path("pingUser")
    @GET
    @Produces({MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML})
    public Response pingUser() {
        ResponseBuilder rb = null;
        try {
            PingResult result = makeResourcePayload(secureService!=null ?
                    secureService.pingUser() : "no ejb injected!!!");
            rb = secureService!=null ? 
                    Response.ok(result) :
                    Response.serverError().entity(result);
        } catch (EJBAccessException ex) {
            PingResult entity = makeResourcePayload(ex.toString());
            rb = Response.status(Status.FORBIDDEN).entity(entity);                
        } catch (Exception ex) {
            rb=makeExceptionResponse(ex);
        }
        
        return rb.build();
    }
]]></programlisting>
        </section>

        <section id="ejb-security-resource-declarative-webxml">
            <title>Declarative Access Control</title>
            <itemizedlist spacing="compact">
                <listitem><para>Define role restrictions for url-patterns</para></listitem>
            </itemizedlist>

<programlisting language="xml"><![CDATA[# web.xml
<security-constraint>
    <web-resource-collection>
        <web-resource-name>secured</web-resource-name>
        <url-pattern>/api/ping/secured/pingUser</url-pattern>
    </web-resource-collection>
    <auth-constraint>
        <role-name>user</role-name>
    </auth-constraint>
</security-constraint>
]]></programlisting>
            <itemizedlist spacing="compact">
                <listitem><para>/api/ping/secured/pingUser constrained to callers with "user" role</para></listitem>
                <listitem><para>CONFIDENTIAL transport-guarantee left off for example simplicity</para></listitem>
                <listitem><para>Response</para>
                    <itemizedlist spacing="compact">
                        <listitem><para>200/OK - if credentials supplied, successfully authenticated, and authorized</para></listitem>
                        <listitem><para>403/FORBIDDEN - if credentials supplied, successfully authenticated, but not authorized</para></listitem>
                        <listitem><para>401/UNAUTHORIZED - if not successfully authenticated</para></listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
        </section>

        <section id="ejb-security-resource-declarative-calls">
            <title>Nested Resource Called from Two URIs</title>
            <itemizedlist spacing="compact">
                <listitem><para>No web access control, delegating to EJB - Resource method called for all callers</para>
<programlisting language="xml"><![CDATA[# web.xml
GET https://localhost:8443/securePingApi/api/ping/pingUser
]]></programlisting>
                </listitem>
                <listitem><para>Web API access control - Resource method only invoked for authorized callers</para>
<programlisting language="xml"><![CDATA[
GET https://localhost:8443/securePingApi/api/ping/secured/pingUser
]]></programlisting>
                </listitem>
            </itemizedlist>
        </section>

    </section>



    <section id="ejb-security-resource-summary">
        <title>Summary</title>
        <itemizedlist spacing="compact">
            <listitem>Setup WAR security<para></para>
                <itemizedlist spacing="compact">
                    <listitem><para>jboss-web.xml: Associate security-domain</para></listitem>
                    <listitem><para>web.xml: Identity auth-method (BASIC)</para></listitem>
                </itemizedlist>
            </listitem>
            <listitem><para>HTTP BASIC authentification with JAX-RS</para></listitem>
            <listitem><para>HTTPS private connections</para></listitem>
            <listitem><para>JAX-RS Filters</para></listitem>
            <listitem><para>Declarative Access Control</para></listitem>
        </itemizedlist>
    </section>

</chapter>
  
