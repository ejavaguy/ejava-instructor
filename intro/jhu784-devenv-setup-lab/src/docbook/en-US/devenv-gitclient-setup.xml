<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"  [ ]>

<chapter id="devenv-gitclient-setup">
    <title>Git Client Setup</title>
    <para>
        You will use Git in this class to perform an initial checkout and
        get updates for source files. Any Git client should be able to perform
        that function. You can determine if you have a command line Git 
        client already installed using the following simple command.
    </para>
    <figure>
        <title>Verifying if Git is Installed</title>
<programlisting><![CDATA[//my Ubuntu system
$ git --version
git version 2.17.1
]]></programlisting>
<programlisting><![CDATA[//my Mac system
$ git --version
git version 2.22.0
]]></programlisting>
<programlisting><![CDATA[//my Windows system
>git --version
git version 2.22.0.windows.1
]]></programlisting>
    </figure>

    <section id="devenv-gitclient-install">
        <title>Install Git Client</title>
        <para>There are a number of options and some are going to be
            based on on your platform. Your basic options include command
            line or using an Eclipse plugin
        </para>

        <itemizedlist spacing="compact">
            <listitem>
                <para>
                    Eclipse GUI Users: There is a git plugin for
                    Eclipse available called EGit. It automatically comes with
                    Eclipse these days, so no extra installation is required.
                </para>
            </listitem>
            <listitem>
                <para>
                    Linux Command-Line Users: Use your package 
                    installer. My normal choice is to select git, gitk, and git-gui packages.
                </para>
<programlisting><![CDATA[//my Ubuntu system
$ sudo apt update
$ sudo apt install git gitk git-gui

$ git --version
git version 2.17.1
]]></programlisting>
            </listitem>
            <listitem>
                <para>
                    Mac Users: Although confusing at times, I find most development tools 
                    are available thru the brew package manager.
                </para>
<programlisting><![CDATA[//my Mac
$ brew update
$ brew install git

$ git --version
git version 2.22.0
]]></programlisting>
            </listitem>
            <listitem>
                <para>
                    Cygwin Command-Line Users: Use the cygwin setup
                    tool to locate the git packages
                </para>
            </listitem>
            <listitem>
                <para>
                    Windows Command-Line Users: Use one of the many available packagings for Git
                </para>
                <itemizedlist spacing="compact">
                    <listitem><para><ulink url="https://git-scm.com/">git-scm.com</ulink></para></listitem>
                    <listitem><para><ulink url="https://code.google.com/p/tortoisegit/">TortoiseGit</ulink></para></listitem>
                    <listitem><para><ulink url="http://git-for-windows.github.io/">git-for-windows.github.io</ulink></para></listitem>
                </itemizedlist>
                <para>git-scm example</para>
                <orderedlist spacing="compact">
                    <listitem>
                        <para>
                            Download and launch the installer
                        </para>
                    </listitem>
                    <listitem>
                        <para>Pick your choice of editors.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Pick how deeply integrated with the Windows shell
                            you want Git and Git bash commands to be. When working
                            on Windows systems, I find the Git bash shell to be a 
                            very usable and lightweight alternative to Cygwin.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Choose your checkout style. Don't worry about 
                            commit style you will only be performing
                            read-only checkouts. I chose "Checkout as-is,
                            commit Unix-style line endings" since I used all
                            linux-style editors on Windows. You may want the
                            Window checkout format.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Choose your terminal window. I would recommend 
                            anything over the default Windows console window
                            -- but that is a personal preference.
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            Click on the "Git Bash" icon after the installation 
                            is complete.
                        </para>
                    </listitem>
                </orderedlist>
            </listitem>
        </itemizedlist>
    </section>

    <section id="devenv-gitclient-getrepo">
        <title>Get Class Repository</title>
        <para>
            The class repository is located on github and can be browsed
            using the following http URL
            <ulink url="https://github.com/ejavaguy/ejava-student">https://github.com/ejavaguy/ejava-student</ulink>.
            With a cloned copy, you can receive file updates during the semester.
        </para>
        <orderedlist spacing="compact">
            <listitem>
                <para>CD to a directory you wish to place source code.
                    Make sure the path to this directory contains no
                    spaces.
                </para>
            </listitem>
            <listitem>
                <para>
                    Clone the class repository using the following URL
                    <ulink url="git://github.com/ejavaguy/ejava-student.git">git://github.com/ejavaguy/ejava-student.git</ulink>
                </para>
                <programlisting><![CDATA[
$ git clone git://github.com/ejavaguy/ejava-student.git
Cloning into 'ejava-student'...
...
Checking out files: 100% (1289/1289), done.
...

$ ls ejava-student/
...

$ cd ejava-student
$ git branch -a    //list all branches -- local and remote
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
]]></programlisting>
                <note>
                    <para>Git leaves you with all branches fetched and a local master
                        branch referencing the class' master branch on github. You will
                        be using the master branch for the duration of the semester. 
                        Other branches may show up, including my working branches where
                        I am actively working on the next wave of updates.
                        The master branch is usually updated the evening 
                        before or the day of class and should always be stable.
                    </para>
                </note>
            </listitem>
            
            <listitem>
                <para>Perform a mock update. This is what you will be
                    doing several times this semester to get file
                    updates.
                </para>
                <programlisting><![CDATA[
$ git checkout master #switches to master branch
$ git pull            #downloads changes and attempts merge
Already up-to-date.
]]></programlisting>
                <note>
                    <para>
                        There are many modules within the class repository.
                        Some are ready for use, some are still being worked,
                        and some are not for use this semester.
                        The ones ready for your use will be wired into the 
                        build and will be compiled during a follow-on section.
                        The list will increase as the semester moves forward. 
                        Please ignore these extra modules. Keeping them within
                        the baseline helps me keep related things centralized.
                    </para>
                </note>
                <note>
                    <para>
                        If you ever make changes to the class examples and would like
                        to keep those changes separate from the updates. Store them
                        in a new branch at any time using the following git commands.
                    </para>
                        <programlisting><![CDATA[
$ git checkout -b new-branch       #creates new branch from current branch 
                                   #and switches to that branch
$ git commit -am "saving my stuff" #commits all dirty files to new branch
$ git checkout master              #switches back to the master branch 
]]></programlisting>
                    <para>
                        If you simply want to throw away any changes you made, you 
                        can discard those changes to tracked files using the following
                        git commands.
                    </para>
                        <programlisting><![CDATA[
$ git reset --hard master
$ git clean -rn  #shows you what it would delete without deleting 
$ git clean -rf  #deletes files not managed or specifically ignored by git
]]></programlisting>
                </note>
            </listitem>
        </orderedlist>
    </section>
</chapter>
