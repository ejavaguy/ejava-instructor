<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="devenv-maven-setup">
    <title>Maven Environment Setup</title>
    <para></para>

    <section id="devenv-maven-install">
        <title>Maven Installation</title>
        <para></para>
        <orderedlist spacing="compact">
            <listitem>
                <para>
                    Download Maven 3
                    <ulink url="http://maven.apache.org/download.html">http://maven.apache.org/download.html</ulink>
                </para>
            </listitem>
            <listitem>
                <para>
                    Unzip the contents into a directory with no spaces in its path.
                </para>
                <programlisting><![CDATA[
$ ls apache-maven-3.2.3/
bin  boot  conf  lib  LICENSE.txt  NOTICE.txt  README.txt
]]></programlisting>
            </listitem>
            <listitem>
                <para>
                    Add an environment variable for MAVEN_HOME and
                    add MAVEN_HOME/bin to your PATH
                </para>
                <programlisting><![CDATA[
//my linux system -- should be done in .bashrc
export MAVEN_HOME=/opt/apache-maven-3.2.3
export PATH=$MAVEN_HOME/bin:$PATH

//my windows system -- should be done in Advanced System Settings->Environment Variables
set MAVEN_HOME=/apps/apache-maven-3.2.3
set PATH=%MAVEN_HOME%\bin;%PATH%
]]></programlisting>
            </listitem>
            <listitem>
                <para>Verify maven is installed and in the path</para>
                <programlisting><![CDATA[
//my fedora system
$ mvn --version
Apache Maven 3.1.0 (893ca28a1da9d5f51ac03827af98bb730128f9f2; 2013-06-27 22:15:32-0400)
Maven home: /opt/apache-maven-3.1.0
Java version: 1.7.0_25, vendor: Oracle Corporation
Java home: /usr/lib/jvm/java-1.7.0-openjdk-1.7.0.25.x86_64/jre
Default locale: en_US, platform encoding: UTF-8
OS name: "linux", version: "3.8.13-100.fc17.x86_64", arch: "amd64", family: "unix"

//my windows xp system
> mvn --version
Apache Maven 3.2.3 (33f8c3e1027c3ddde99d3cdebad2656a31e8fdf4; 2014-08-11T16:58:10-04:00)
Maven home: C:\apps\apache-maven-3.2.3\bin\..
Java version: 1.7.0_67, vendor: Oracle Corporation
Java home: C:\apps\Java\jdk1.7.0_67\jre
Default locale: en_US, platform encoding: Cp1252
OS name: "windows xp", version: "5.1", arch: "x86", family: "windows"
]]></programlisting>
            </listitem>
        </orderedlist>
    </section>
    <section id="devenv-maven-config">
        <title>Maven Configuration</title>
        <orderedlist spacing="compact">
            <listitem>
                <para>Add a skeletal settings.xml file that will be used
                    to provide local overrides for the build. This is
                    the place where you can customize the build for local
                    environment specifics like directory locations, server
                    address, server ports, etc.
                </para>
                <orderedlist spacing="compact">
                    <listitem>
                        <para>
                            Add the following to the<code>.m2/settings.xml</code>
                            file in your HOME directory.
                        </para>
                        <programlisting language="xml"><![CDATA[
<?xml version="1.0"?>
<settings xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

    <offline>false</offline>
    
    <profiles>
    </profiles>
    
    <activeProfiles>
    </activeProfiles>
</settings>    
]]></programlisting>
                    </listitem>
                    <listitem>
                        <para>You can test whether your settings.xml
                            file is seen by Maven by temporarily making
                            it an invalid XML file and verifying that the
                            next Maven build command fails with a parsing
                            error.
                        </para>
                        <programlisting><![CDATA[
$ mvn clean
[ERROR] Error executing Maven.
[ERROR] 1 problem was encountered while building the effective settings
[FATAL] Non-parseable settings /home/user/.m2/settings.xml: only whitespace content allowed before start tag and not s (position: START_DOCUMENT seen <?xml version="1.0"?>\ns... @2:2)  @ /home/user/.m2/settings.xml, line 2, column 2
]]></programlisting>
                    </listitem>
                    
                    <listitem>
                        <para>
                            Add a default specification for the database
                            profile we will be using for class at the bottom 
                            of the <code>.m2/settings.xml</code> file in your
                            HOME directory. 
                        </para>
                        <programlisting language="xml"><![CDATA[
    <activeProfiles>
        <activeProfile>h2db</activeProfile>
    </activeProfiles>
]]></programlisting>
                    </listitem>
                    
                    <listitem>
                        <para>
                            If your operating system HOME directory has spaces
                            in the path (e.g., Windows XP's Documents and Settings)
                            then add a <code>localRepository</code> path specification
                            to the <code>.m2/settings.xml</code> file and have
                            it point to a location that does not have spaces in 
                            the path. The path does not have to exist. It will 
                            be created during the next build. 
                        </para>
                        <programlisting language="xml"><![CDATA[
    <offline>false</offline>
    <!-- this overrides the default $HOME/.m2/repository location. --> 
    <localRepository>c:/jhu/repository</localRepository>
]]></programlisting>
                    </listitem>

                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
    
    <section id="devenv-maven-test">
        <title>Test Maven Build</title>
        <para>
            Each week you will be asked to update your cloned copy of the 
            class examples and perform a test build. This will give both 
            of us some comfort that your environment is setup correctly
            and act as a baseline for debugging your class assignments.
            Therefore, do the following to test your initial installation and
            repeat each week.
        </para>
        <orderedlist spacing="compact">
            <listitem>
                <para>
                    Change your current directory to the root of the cloned 
                    repository and make sure you have a current copy. 
                </para>
                    <programlisting><![CDATA[
$ ls
README.md  async  build  common  coursedocs  ejb  javase  jpa  pom.xml  projects  src
$ git pull
Already up-to-date.
]]></programlisting>
             </listitem>
             <listitem><para>Test your configuration using </para>
                <programlisting><![CDATA[
$ mvn clean install
[INFO] Scanning for projects...
...
]]></programlisting>                        
             </listitem>
         </orderedlist>

        <note>
            <title>OutOfMemoryError</title>
            <para>
                If you receive an "OutOfMemoryError: PermGen space" error, you can update 
                the amount of memory allocated to the build by setting MAVEN_OPTS.
            </para>
            <para>
                You can set this in the current shell using one of the following commands
            </para>
<programlisting><![CDATA[
bash> export MAVEN_OPTS="-Xmx512m -XX:MaxPermSize=256m"

windows> set MAVEN_OPTS=-Xmx512m -XX:MaxPermSize=256m
]]></programlisting>                        
            <para>
                You can optionally set these properties in one of the shell-specific environment scripts.
            </para>
<programlisting><![CDATA[
bash> $HOME/.mavenrc

windows> %HOME%\mavenrc_pre.bat
]]></programlisting>                        
            <para>
                You can also set them using shell-specific techniques.
            </para>
        </note>
    </section>
    
    <section id="devenv-maven-missing-dependencies">
        <title>Missing Dependencies</title>
        <para>There are a few cases where dependencies cannot be hosted in public repositories
             and must be downloaded and installed manually. Oracle DB Client is one example.
        </para>
        <figure>
            <title>Missing Maven Dependency Error/Warning Message</title>
<programlisting language=""><![CDATA[
Failure to find com.oracle:ojdbc6:pom:11.2.0.3 in ... 
was cached in the local repository, resolution will not be reattempted until the update interval of 
... has elapsed or updates are forced.
]]></programlisting>                        
        </figure>
        
        <para>If the message is a warning (i.e., for site/javadoc documentation -- it can be ignored).
            If you want to eliminate the warning or it is coming up as an error, you can download
            the artifact directly from the vendor and manually install it in your local repository.
        </para>
        <note>
            <para>
                This is only an example. You are not required to download if the Oracle database driver for
                class if you do not wish. You can create a dummy file (touch dummy.jar) and register it using
                a dummy groupId, artifactId, and version if you wish.
            </para>
        </note>
       <orderedlist spacing="compact">
            <listitem><para>Download the driver jar from 
                <ulink url="http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html">Oracle</ulink> 
                accept the license agreement.</para>
            </listitem>
            <listitem><para>Install it manually into your localRepository</para>
<programlisting language=""><![CDATA[
$ mvn install:install-file -Dfile=/home/jcstaff/Downloads/ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.3 -Dpackaging=jar
[INFO] Scanning for projects...
...
[INFO] --- maven-install-plugin:2.4:install-file (default-cli) @ standalone-pom ---
[INFO] Installing /home/jcstaff/Downloads/ojdbc6.jar to /home/jcstaff/.m2/repository/com/oracle/ojdbc6/11.2.0.3/ojdbc6-11.2.0.3.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
...
]]></programlisting>                        
            </listitem>
       </orderedlist>

        <note>
            <title>Artifacts are Best Placed in Network Repositories</title>
            <para>This artifact would ideally be placed within a network cache/repository (i.e., Nexus)
                and not into individual localRepositories. In the next chapter you will be shown
                how could could setup a Maven Nexus for team use. If you go that route -- it would
                be better to upload the file to that archive.</para>
        </note>
        <note>
            <title>Rogue Internet Repositories</title>
            <para>Probably violating license restrictions, but the following 
                <ulink url="https://code.lds.org/nexus/content/groups/main-repo/">network repository</ulink>
                 does contain the missing Oracle driver. One could add that as an upstream repository
                 in their Nexus or define it as an artifact repository in the pom to avoid having to
                 manually import the artifact.</para>
        </note>
    </section>

    <section id="devenv-maven-localsite">
        <title>Build Local Site</title>
        <para>
            The class web site will be pre-built with up-to-date information.
            However, you may wish to have a local version and can do so by 
            performing the following.
        </para>
<programlisting language=""><![CDATA[
$ mvn clean verify site -DskipTests
$ mvn site:stage
//the output will be in target/staging
]]></programlisting>                        

        <para>
            If you have more time and wish to generate more detailed reports,
            execute the following.
        </para>
<programlisting language=""><![CDATA[
$ mvn clean verify site -Preports -Pcobertura
$ mvn site:stage
//the output will be in target/staging
]]></programlisting>                        

        <para>
            If you have less time and are looking only to get up-to-date 
            documents, execute the followng from the coursedocs directory.
        </para>
<programlisting language=""><![CDATA[
$ cd coursedocs
$ mvn site:stage
//the output will be in target/site
]]></programlisting>                        
    </section>
</chapter>
