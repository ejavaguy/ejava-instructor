<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">


<chapter id="devenv-eclipse-setup">
    <title>Eclipse Setup</title>
    <para>
        The most current release of Eclipse IDE as of preparing these instructions is 2019-06. Eclipse IDE
        seems to have gone from a yearly release cycle to a three month release cycle . When they followed
        a yearly release cycle -- it was always released in the August/Sepember timeframe and that was the 
        worst time to switch. The best time to upgrade when they followed the yearly cycle was in the 
        Janurary timeframe when issues had been reported and patches had time to be released. 
        I am not sure yet how to time the new 
        three month cycles -- but needless to say "the latest" is not a requirement for this course.
        If you already have an IDE or a version of Eclipse that you are comfortable with -- there should 
        be no reason to upgrade.
    </para>

    <note>
        <title>No Course Requirement for Eclipse IDE</title>
        <para>
          There is no course requirement that you use Eclipse IDE or the latest Eclipse IDE. Many students
          have completed this course using IntelliJ.
        </para>
    </note>

    <section id="devenv-eclipse-install">
        <title>Download and Install Eclipse</title>
        <orderedlist spacing="compact">
            <listitem>
                <para>
                    Download Eclipse IDE for JavaEE Developers 
                    <ulink url="https://www.eclipse.org/downloads/packages/release/2019-06/r/eclipse-ide-enterprise-java-developers">Eclipse IDE for Enterprise Developers</ulink>
                    or latest from
                    <ulink url="https://www.eclipse.org/downloads/packages">Eclipse Packages</ulink>
                    or 
                    <ulink url="http://eclipse.org/downloads">Eclipse Downloads</ulink>
                </para>
            </listitem>

            <listitem><para>Install Eclipse IDE for JavaEE Developers and Start</para>
              <itemizedlist spacing="compact">
                <listitem><para>For the Mac installation, a .dmg was provided. Install Eclipse to the 
                    Applications folder, pin it to the taskbar so that it is easy to locate, and 
                    start Eclipse.
                    </para></listitem>
                <listitem><para>For the Linux installation, a tar.gz archive was provided. Exctract this to a 
                    location on your computer, and start Eclipse.
                    </para></listitem>
                <listitem><para>For the Windows installation, a .zip archive was provided. Extract this to a 
                    location on your computer, pin the <code>eclipse</code> executable
                    to the taskbar so that it is easy to locate, and start Eclipse.
                    </para></listitem>
              </itemizedlist>
            </listitem>
        </orderedlist>
    </section>

    <section id="devenv-eclipse-import">
    </section>
    
    <section id="devenv-eclipse-jdk">
        <title>Define JDK location</title>
        <para>Eclipse will default to the JRE when launching most tools/applications.
            Sometimes this can be an issue and requires a JDK. Add the JDK and make it 
            your default JRE. Make sure it is JDK 11.</para>
        <orderedlist spacing="compact">
            <listitem><para>Window-&gt;Preferences-&gt;Java-&gt;Installed JREs</para></listitem>
            <listitem><para>press Add..-&gt;Standard VM and reference the JDK instance you installed earlier</para></listitem>
            <listitem><para>Make the new JDK VM your default</para></listitem>
        </orderedlist>
        
        <note>
            <title>Enable Java Assertions</title>
            <para>It is a good idea to use assertions (<code>assert foo!=null : "hey!";</code>) 
            in your code and enable assertions within your development environment
            (by adding <code>-ea</code> to the "Default VM Arguments" setting within
            the JRE Definition).</para>
        </note>
    </section>
    
    <section id="devenv-eclipse-setup-m2e">
        <title>Setup Maven Eclipse Integration (m2e)</title>
        <para>m2e is a plugin installed into Eclipse that configures Eclipse
        based on the Maven pom.xml configuration. When adjusting your builds,
        you should always define changes within the Maven pom.xml and rely on
        m2e to translate that into Eclipse. Any changes added directly to 
        Eclipse will not be seen by the command-line build.</para>
        
        <note>
            <title>m2e is now part of Eclipse JavaEE</title>
            <para>m2e was pre-installed in the download. Nothing more 
                needs to be done to install it. The rest of these instructions
                are concerned with using it and demonstrating it.</para>
        </note>
        
        <orderedlist spacing="compact">
            <listitem><para>Add the Java Package Explorer to the JavaEE Perspective.
                    I find this easier to work with than the Project 
                    Explorer used by default in the JavaEE perspective.</para>
                <orderedlist spacing="compact">
                    <listitem><para>Select Window-&gt;Open Perspective-&gt;Other-&gt;Java</para></listitem>
                    <listitem><para>Select Top Level Elements-&gt;Working Sets from the down-facing triangle in the top-right corner of the Package Explorer.</para></listitem>
                    <listitem><para>Create a New Java Working Set and call it "javase"</para></listitem>
                    <listitem><para>Press OK</para></listitem>
                </orderedlist>
            </listitem>
            <listitem><para>Import the class examples into Eclipse as a Maven Project</para>
                <orderedlist spacing="compact">
                    <listitem><para>Right click on "javase" in the Package 
                        Explorer and select Import...-&gt;Maven-&gt;Existing Maven Projects</para></listitem>
                    <listitem><para>Browse to the project area where you performed 
                        the Git checkout earlier and select the <code>javase</code> folder.</para></listitem>
                    <listitem><para>Select Next to have the current project(s)
                        added to the selected working set.</para>
                    <note>
                        <para>There will be an extra panel that appears the 
                        first time you import a project with a new maven plugin.
                        Allow Eclipse to setup any that it knows about, discover 
                        ones that may be new, or resolve later for those that
                        it cannot find. There will be unsigned content warnings
                        for most of the plugins. Eclipse will want to restart
                        after installing any new plugins.</para>
                    </note>
                    </listitem>
                    <listitem>
                        <para>
                            Build and test the <code>javase5Enhancements</code> application using 
                            Run As-&gt;Maven Install by right clicking on any of the 
                            project folders.
                       </para>
                       <note>
                            <para>If you receive the following error</para>
<programlisting language=""><![CDATA[[ERROR] No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?
]]></programlisting>          
                            <para>
                                add the following '-vm' option to your eclipse.ini file -- pointing to your
                                javaw executable in the JDK directory, restart Eclipse, and retry.
                            </para>
<programlisting language=""><![CDATA[-vm C:\apps\Java\jdk1.8.0_181/bin/javaw.exe
]]></programlisting>                        
<programlisting language=""><![CDATA[--launcher.defaultAction
openFile
-vm C:\apps\Java\jdk1.8.0_181/bin/javaw.exe
-vmargs
...
]]></programlisting>                        
                       </note>
                    </listitem>
                    <listitem>
                        <para>
                            Try also Run As-&gt;JUnit Test.
                       </para>
                    </listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
    
    
    <section id="devenv-eclipse-setup-egit">
        <title>Setup Git Eclipse Team Provider</title>
        <para>You can use the command line Git to functionally clone the 
            remote repository and update your local copy. However, having
            Git integrated into Eclipse allows the plugin to make Eclipse
            transition easier between one checked out branch to another or 
            correctly react to an updated branch.</para>
        
        <note>
            <title>Git is now part of Eclipse JavaEE</title>
            <para>Git is pre-installed in the download. Nothing more 
                needs to be done to install it (yay!).</para>
        </note>
    </section>
    
    <section id="devenv-eclipse-setup-jbosstools">
        <title>Setup JBoss Eclipse Integration</title>
        <para>JBoss maintains a set of Eclipse plugins to help with development
        and use of their products. There are too many to describe -- let alone
        understand in total. However, we can make use of a few. The primary 
        one is to optionally run/manage Wildfly within Eclipse versus the 
        command line. Follow these steps if you want to enable a few additional
        productivity JBoss Tools plugins.</para>
        <orderedlist spacing="compact">
            <listitem><para>Open the Eclipse Marketplace panel using 
                <code>Help-&gt;Eclipse Marketplace</code></para>
            </listitem>
            <listitem><para>Type <code>Wildfly</code> into the seach field and press Go</para></listitem>
            <listitem><para>Click Install for the <code>JBoss Tools</code></para></listitem>
            <listitem><para>Complete the installation steps for JBoss Tools. There
                are many tools in the repository. Very few of them are
                needed for class or not obvious how to use them without more investigation. 
                Choose the following suggested minimal set.</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Context and Dependency Injection Tools</para></listitem>
                    <listitem><para>Hibernate Tools</para></listitem>
                    <listitem><para>JBoss AS, Wildfly, &amp; EAP Tools</para></listitem>
                    <listitem><para>JBoss JAX-RS Tools</para></listitem>
                </itemizedlist>
                <note>
                    <para>You will receive a warning about the content within the 
                    plugin being unsigned.</para>
                </note>
                <note>
                    <para>You will receive a warning after restarting Eclipse 
                    about the reporting anonymous use to JBoss. They use those callbacks
                    to determine where and when their tools are being used 
                    (for bragging rights?). I disable that.</para>
                </note>
            </listitem>
            <listitem><para>Define a Server Instance for JBoss</para>
                <orderedlist spacing="compact">
                    <listitem><para>Open the JavaEE Perspective</para></listitem>
                    <listitem><para>Select "new server wizard..." in the Servers panel</para></listitem>
                    <listitem><para>Select Wildfly 17 under the 
                        JBoss Community folder</para></listitem>
                    <listitem><para>Select defaults for location, controlled by, 
                        and create new runtime.</para></listitem>
                    <listitem><para>Set HOME to your wildfly installation directory
                       using the Browse button on the next panel.</para></listitem>
                    <listitem><para>Set the JRE to JavaSE-11</para></listitem>
                    <listitem><para>Leave the server base directory as "standalone" and 
                       configuration to "standalone.xml".</para></listitem>
                    <listitem><para>Review options. Note that I generally start my 
                        server externally so that standard output does not compete 
                        with my other actions within Eclipse. However, there are
                        pros and cons to both methods and I will start you with
                        internally launched here.</para></listitem>
                    <listitem><para>Start the server by right clicking on it
                        and selecting Start. You should see some server log activity in the 
                        Eclipse console. This will conflict with but play nice with
                        the externally-managed mode. We will look at this closer
                        once we get to server-side development.</para></listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
</chapter>
