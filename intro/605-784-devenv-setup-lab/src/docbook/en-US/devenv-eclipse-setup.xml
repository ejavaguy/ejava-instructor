<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">


<chapter id="devenv-eclipse-setup">
    <title>Eclipse Setup</title>
    <para>
        The most current version of Eclipse is Kepler. I have only been using
        it for class, but so far it is fantastic.
    </para>

    <section id="devenv-eclipse-install">
        <title>Download and Install Eclipse Kepler</title>
        <orderedlist spacing="compact">
            <listitem>
                <para>
                    Download Eclipse IDE for JavaEE Developers 
                    <ulink url="http://eclipse.org/downloads">http://eclipse.org/downloads</ulink>
                </para>
            </listitem>
            <listitem><para>Unzip the downloaded archive.</para>
<programlisting><![CDATA[
$ tar xzf ~/Downloads/eclipse-jee-kepler-R-linux-gtk-x86_64.tar.gz

$ ls eclipse
about_files  about.html  artifacts.xml  configuration  dropins  eclipse  eclipse.ini  
epl-v10.html  features  icon.xpm  notice.html  p2  plugins  readme
]]></programlisting>                        
            </listitem>
            <listitem><para>Create a shortcut for starting Eclipse</para></listitem>
            <listitem><para>Start Eclipse</para></listitem>
        </orderedlist>
    </section>
    
    <section id="devenv-eclipse-jdk">
        <title>Define JDK location</title>
        <para>Eclipse will default to the JRE when launching most tools/applications.
            Sometimes this can be an issue and requires a JDK. Add the JDK and make it 
            your default JRE.</para>
        <orderedlist spacing="compact">
            <listitem><para>Window-&gt;Preferences-&gt;Java-&gt;Installed JREs</para></listitem>
            <listitem><para>press Add..-&gt;Standard VM and reference the JDK instance you installed earlier</para></listitem>
            <listitem><para>Make the new JDK VM your default</para></listitem>
        </orderedlist>
    </section>
    
    <section id="devenv-eclipse-setup-m2e">
        <title>Setup Maven Eclipse Integration (m2e)</title>
        <para>m2e is a plugin installed into Eclipse that configures Eclipse
        based on the Maven pom.xml configuration. When adjusting your builds,
        you should always define changes within the Maven pom.xml and rely on
        m2e to translate that into Eclipse. Any changes added directly to 
        Eclipse will not be seen by the command-line build.</para>
        
        <note>
            <title>M2E is now part of Eclipse JavaEE</title>
            <para>m2e was pre-installed in my download of kepler. Nothing more 
                needs to be done to install it. The rest of these instructions
                are concerned with using it and demonstrating it.</para>
        </note>
        
        <orderedlist spacing="compact">
            <listitem><para>Add the Java Package Explorer to the JavaEE Perspective.
                    I find this easier to work with than the Project 
                    Explorer used by default in the JavaEE perspective.</para>
                <orderedlist spacing="compact">
                    <listitem><para>Select Window-&gt;Show View-&gt;Other-&gt;Java-&gt;Package Explorer.</para></listitem>
                    <listitem><para>Drag the Package Explorer to the panel with the Project Explorer</para></listitem>
                    <listitem><para>Select Top Level Elements-&gt;Working Sets from the down-facing triangle in the top-right corner of the Package Explorer.</para></listitem>
                    <listitem><para>Create a New Java Working Set and call it "class-examples"</para></listitem>
                    <listitem><para>Press OK</para></listitem>
                </orderedlist>
            </listitem>
            <listitem><para>Import the class examples into Eclipse as a Maven Project</para>
                <orderedlist spacing="compact">
                    <listitem><para>Right click on "class-examples" in the Package 
                        Explorer and select Import...-&gt;Maven-&gt;Existing Maven Projects</para></listitem>
                    <listitem><para>Browse to the project area where you performed 
                        the Git checkout earlier and select the javase5Enhancements folder.</para></listitem>
                    <listitem><para>Select Next to have the current project(s)
                        added to the selected working set.</para>
                    <note>
                        <para>There will be an extra panel that appears the 
                        first time you import a project with a new maven plugin.
                        Allow Eclipse to setup any that it knows about, discover 
                        ones that may be new, or resolve later for those that
                        it cannot find. There will be unsigned content warnings
                        for most of the plugins. Eclipse will want to restart
                        after installing any new plugins.</para>
                    </note>
                    </listitem>
                    <listitem>
                        <para>
                            Build and test the application using 
                            Run As-&gt;Maven Install by right clicking on any of the 
                            project folders.
                       </para>
                       <note>
                            <para>If you receive the following error</para>
<programlisting language=""><![CDATA[
[ERROR] No compiler is provided in this environment. Perhaps you are running on a JRE rather than a JDK?
]]></programlisting>          
                            <para>
                                add the following '-vm' option to your eclipse.ini file -- pointing to your
                                javaw executable in the JDK directory, restart Eclipse, and retry.
                            </para>
<programlisting language=""><![CDATA[
-vm C:\apps\Java\jdk1.7.0_11/bin/javaw.exe
]]></programlisting>                        
<programlisting language=""><![CDATA[
--launcher.defaultAction
openFile
-vm C:\apps\Java\jdk1.7.0_11/bin/javaw.exe
-vmargs
-Dosgi.requiredJavaVersion=1.5
-Dhelp.lucene.tokenizer=standard
-Xms40m
-Xmx512m
]]></programlisting>                        
                       </note>
                    </listitem>
                    <listitem>
                        <para>
                            Try also Run As-&gt;JUnit Test.
                       </para>
                    </listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
    
    
    <section id="devenv-eclipse-setup-egit">
        <title>Setup EGit Eclipse Team Provider</title>
        <para>You can use the command line Git to functionally clone the 
            remote repository and update your local copy. However, having
            Git integrated into Eclipse allows the plugin to make Eclipse
            transition easier between one checked out branch to another or 
            correctly react to an updated branch. To do this -- install the 
            EGit plugin.</para>
            
        
        <note>
            <title>Git and EGit is now part of Eclipse JavaEE</title>
            <para>Git and EGit was pre-installed in my download of kepler. Nothing more 
                needs to be done to install it. The rest of these instructions
                are concerned with using it and demonstrating it.</para>
        </note>
            
            <orderedlist spacing="compact">
                <listitem><para>Right click on the <code>ejavase5Enhancements</code>
                   project imported earlier and select 
                   <code>Team-&gt;Share Project...-&gt;Git-&gt;Use of create repository in parent folder of project-&gt;Finish</code></para></listitem>
                <listitem><para><code>[(branch-name)]</code> should now be displayed 
                    to the right of the project name</para></listitem>
            </orderedlist>
    </section>
    
    <section id="devenv-eclipse-setup-jbosstools">
        <title>Setup JBoss Eclipse Integration</title>
        <para>Add the following repository to your Eclipse instance and
           install the plugin</para>
        <orderedlist spacing="compact">
            <listitem><para>Open the Eclipse Marketplace panel using 
                <code>Help-&gt;Eclipse Marketplace</code></para>
            </listitem>
            <listitem><para>Type JBoss into the seach field and press Go</para></listitem>
            <listitem><para>Click Install for the <code>JBoss Tools (Kepler)</code></para></listitem>
            <listitem><para>Complete the installation steps for JBoss Tools. There
                are many tools in the repository. Not all of them are
                needed for class or obvious how to use them without more investigation. 
                Choose the following suggested minimal set.</para>
                <itemizedlist spacing="compact">
                    <listitem><para>Context and Dependency Injection Tools</para></listitem>
                    <listitem><para>Hibernate Tools</para></listitem>
                    <listitem><para>JBoss JAX-RS Tools</para></listitem>
                    <listitem><para>JBoss AS Tools</para></listitem>
                    <listitem><para>JBoss WebServices Tools</para></listitem>
                </itemizedlist>
                <note>
                    <para>You will receive a warning about the content within the 
                    plugin being unsigned.</para>
                </note>
                <note>
                    <para>You will receive a warning after restarting Eclipse 
                    about the reporting anonymous use to JBoss. They use those callbacks
                    to determine where and when their tools are being used 
                    (for bragging rights?). I disable that.</para>
                </note>
            </listitem>
            <listitem><para>Define a Server Instance for JBoss</para>
                <orderedlist spacing="compact">
                    <listitem><para>Open the JavaEE Perspective</para></listitem>
                    <listitem><para>Select "new server wizard..." in the Servers panel</para></listitem>
                    <listitem><para>Select Enterprise Application Platform 6.x under the 
                        JBoss Enterprise Middleware folder</para></listitem>
                    <listitem><para>Set HOME to your jboss-eap-6.2.0.Final directory
                       using the Browse button on the next panel</para></listitem>
                    <listitem><para>Name the server "standalone" and leave the 
                       to match the default "standalone.xml" configuration file.</para></listitem>
                    <listitem><para>Set the JRE to the default 'real' JRE</para></listitem>
                    <listitem><para>Review options. Note that I generally start my 
                        server externally so that standard output does not compete 
                        with my other actions within Eclipse. However, there are
                        pros and cons to both methods and I will start you with
                        internally launched here.</para></listitem>
                    <listitem><para>Start the server by right clicking on it
                        and selecting Start</para></listitem>
                </orderedlist>
            </listitem>
        </orderedlist>
    </section>
</chapter>
